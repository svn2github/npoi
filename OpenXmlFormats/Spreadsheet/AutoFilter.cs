// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>schemas</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Generic;
using System.Xml;
using NPOI.OpenXml4Net.Util;
using System.IO;

namespace NPOI.OpenXmlFormats.Spreadsheet
{


    public class CT_AutoFilter
    {

        private List<CT_FilterColumn> filterColumnField;

        private CT_SortState sortStateField;

        private CT_ExtensionList extLstField;

        private string refField;

        public CT_AutoFilter()
        {
            //this.extLstField = new CT_ExtensionList();
            //this.sortStateField = new CT_SortState();
            //this.filterColumnField = new List<CT_FilterColumn>();
        }
        public static CT_AutoFilter Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_AutoFilter ctObj = new CT_AutoFilter();
            ctObj.@ref = XmlHelper.ReadString(node.Attributes["ref"]);
            ctObj.filterColumn = new List<CT_FilterColumn>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "sortState")
                    ctObj.sortState = CT_SortState.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "filterColumn")
                    ctObj.filterColumn.Add(CT_FilterColumn.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "ref", this.@ref);
            sw.Write(">");
            if (this.sortState != null)
                this.sortState.Write(sw, "sortState");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            if (this.filterColumn != null)
            {
                foreach (CT_FilterColumn x in this.filterColumn)
                {
                    x.Write(sw, "filterColumn");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        [XmlElement]
        public List<CT_FilterColumn> filterColumn
        {
            get
            {
                return this.filterColumnField;
            }
            set
            {
                this.filterColumnField = value;
            }
        }
        [XmlElement]
        public CT_SortState sortState
        {
            get
            {
                return this.sortStateField;
            }
            set
            {
                this.sortStateField = value;
            }
        }
        [XmlElement]
        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
        [XmlAttribute]
        public string @ref
        {
            get
            {
                return this.refField;
            }
            set
            {
                this.refField = value;
            }
        }


    }

    public class CT_FilterColumn
    {

        //private object itemField;

        private uint colIdField;

        private bool hiddenButtonField;

        private bool showButtonField;

        public CT_FilterColumn()
        {
            this.hiddenButtonField = false;
            this.showButtonField = true;
        }
        //[XmlAttribute]
        //public object Item
        //{
        //    get
        //    {
        //        return this.itemField;
        //    }
        //    set
        //    {
        //        this.itemField = value;
        //    }
        //}
        [XmlAttribute]
        public uint colId
        {
            get
            {
                return this.colIdField;
            }
            set
            {
                this.colIdField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool hiddenButton
        {
            get
            {
                return this.hiddenButtonField;
            }
            set
            {
                this.hiddenButtonField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool showButton
        {
            get
            {
                return this.showButtonField;
            }
            set
            {
                this.showButtonField = value;
            }
        }

        public static CT_FilterColumn Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_FilterColumn ctObj = new CT_FilterColumn();
            ctObj.colId = XmlHelper.ReadUInt(node.Attributes["colId"]);
            ctObj.hiddenButton = XmlHelper.ReadBool(node.Attributes["hiddenButton"]);
            ctObj.showButton = XmlHelper.ReadBool(node.Attributes["showButton"]);
            //TODO: implement http://www.schemacentral.com/sc/ooxml/t-ssml_CT_FilterColumn.html
            //foreach (XmlNode childNode in node.ChildNodes)
            //{
            //    if (childNode.LocalName == "Item")
            //        ctObj.Item = new Object();
            //}
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "colId", this.colId, true);
            XmlHelper.WriteAttribute(sw, "hiddenButton", this.hiddenButton);
            XmlHelper.WriteAttribute(sw, "showButton", this.showButton);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    public class CT_ColorFilter
    {

        private uint dxfIdField;

        private bool dxfIdFieldSpecified;

        private bool cellColorField;

        public CT_ColorFilter()
        {
            this.cellColorField = true;
        }

        public uint dxfId
        {
            get
            {
                return this.dxfIdField;
            }
            set
            {
                this.dxfIdField = value;
            }
        }

        [XmlIgnore]
        public bool dxfIdSpecified
        {
            get
            {
                return this.dxfIdFieldSpecified;
            }
            set
            {
                this.dxfIdFieldSpecified = value;
            }
        }

        [DefaultValue(true)]
        public bool cellColor
        {
            get
            {
                return this.cellColorField;
            }
            set
            {
                this.cellColorField = value;
            }
        }
    }

    public class CT_CustomFilters
    {

        private List<CT_CustomFilter> customFilterField;

        private bool andField;

        public CT_CustomFilters()
        {
            this.customFilterField = new List<CT_CustomFilter>();
            this.andField = false;
        }

        public List<CT_CustomFilter> customFilter
        {
            get
            {
                return this.customFilterField;
            }
            set
            {
                this.customFilterField = value;
            }
        }

        [DefaultValue(false)]
        public bool and
        {
            get
            {
                return this.andField;
            }
            set
            {
                this.andField = value;
            }
        }
    }

    public class CT_CustomFilter
    {

        private ST_FilterOperator operatorField;

        private string valField;

        public CT_CustomFilter()
        {
            this.operatorField = ST_FilterOperator.equal;
        }

        [DefaultValue(ST_FilterOperator.equal)]
        public ST_FilterOperator @operator
        {
            get
            {
                return this.operatorField;
            }
            set
            {
                this.operatorField = value;
            }
        }

        public string val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }

    public enum ST_FilterOperator
    {

    
        equal,

    
        lessThan,

    
        lessThanOrEqual,

    
        notEqual,

    
        greaterThanOrEqual,

    
        greaterThan,
    }

    public class CT_DynamicFilter
    {

        private ST_DynamicFilterType typeField;

        private double valField;

        private bool valFieldSpecified;

        private double maxValField;

        private bool maxValFieldSpecified;

        public ST_DynamicFilterType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        public double val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }

        [XmlIgnore]
        public bool valSpecified
        {
            get
            {
                return this.valFieldSpecified;
            }
            set
            {
                this.valFieldSpecified = value;
            }
        }

        public double maxVal
        {
            get
            {
                return this.maxValField;
            }
            set
            {
                this.maxValField = value;
            }
        }

        [XmlIgnore]
        public bool maxValSpecified
        {
            get
            {
                return this.maxValFieldSpecified;
            }
            set
            {
                this.maxValFieldSpecified = value;
            }
        }
    }

    public enum ST_DynamicFilterType
    {

    
        @null,

    
        aboveAverage,

    
        belowAverage,

    
        tomorrow,

    
        today,

    
        yesterday,

    
        nextWeek,

    
        thisWeek,

    
        lastWeek,

    
        nextMonth,

    
        thisMonth,

    
        lastMonth,

    
        nextQuarter,

    
        thisQuarter,

    
        lastQuarter,

    
        nextYear,

    
        thisYear,

    
        lastYear,

    
        yearToDate,

    
        Q1,

    
        Q2,

    
        Q3,

    
        Q4,

    
        M1,

    
        M2,

    
        M3,

    
        M4,

    
        M5,

    
        M6,

    
        M7,

    
        M8,

    
        M9,

    
        M10,

    
        M11,

    
        M12,
    }

    public class CT_Filters
    {

        private List<CT_Filter> filterField;

        private List<CT_DateGroupItem> dateGroupItemField;

        private bool blankField;

        private ST_CalendarType calendarTypeField;

        public CT_Filters()
        {
            this.dateGroupItemField = new List<CT_DateGroupItem>();
            this.filterField = new List<CT_Filter>();
            this.blankField = false;
            this.calendarTypeField = ST_CalendarType.none;
        }

        public List<CT_Filter> filter
        {
            get
            {
                return this.filterField;
            }
            set
            {
                this.filterField = value;
            }
        }

        public List<CT_DateGroupItem> dateGroupItem
        {
            get
            {
                return this.dateGroupItemField;
            }
            set
            {
                this.dateGroupItemField = value;
            }
        }

        [DefaultValue(false)]
        public bool blank
        {
            get
            {
                return this.blankField;
            }
            set
            {
                this.blankField = value;
            }
        }

        [DefaultValue(ST_CalendarType.none)]
        public ST_CalendarType calendarType
        {
            get
            {
                return this.calendarTypeField;
            }
            set
            {
                this.calendarTypeField = value;
            }
        }
    }

    public class CT_Filter
    {

        private string valField;

        public string val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }
    }

    public class CT_DateGroupItem
    {

        private ushort yearField;

        private ushort monthField;

        private bool monthFieldSpecified;

        private ushort dayField;

        private bool dayFieldSpecified;

        private ushort hourField;

        private bool hourFieldSpecified;

        private ushort minuteField;

        private bool minuteFieldSpecified;

        private ushort secondField;

        private bool secondFieldSpecified;

        private ST_DateTimeGrouping dateTimeGroupingField;

        public ushort year
        {
            get
            {
                return this.yearField;
            }
            set
            {
                this.yearField = value;
            }
        }

        public ushort month
        {
            get
            {
                return this.monthField;
            }
            set
            {
                this.monthField = value;
            }
        }

        [XmlIgnore]
        public bool monthSpecified
        {
            get
            {
                return this.monthFieldSpecified;
            }
            set
            {
                this.monthFieldSpecified = value;
            }
        }

        public ushort day
        {
            get
            {
                return this.dayField;
            }
            set
            {
                this.dayField = value;
            }
        }

        [XmlIgnore]
        public bool daySpecified
        {
            get
            {
                return this.dayFieldSpecified;
            }
            set
            {
                this.dayFieldSpecified = value;
            }
        }

        public ushort hour
        {
            get
            {
                return this.hourField;
            }
            set
            {
                this.hourField = value;
            }
        }

        [XmlIgnore]
        public bool hourSpecified
        {
            get
            {
                return this.hourFieldSpecified;
            }
            set
            {
                this.hourFieldSpecified = value;
            }
        }

        public ushort minute
        {
            get
            {
                return this.minuteField;
            }
            set
            {
                this.minuteField = value;
            }
        }

        [XmlIgnore]
        public bool minuteSpecified
        {
            get
            {
                return this.minuteFieldSpecified;
            }
            set
            {
                this.minuteFieldSpecified = value;
            }
        }

        public ushort second
        {
            get
            {
                return this.secondField;
            }
            set
            {
                this.secondField = value;
            }
        }

        [XmlIgnore]
        public bool secondSpecified
        {
            get
            {
                return this.secondFieldSpecified;
            }
            set
            {
                this.secondFieldSpecified = value;
            }
        }

        public ST_DateTimeGrouping dateTimeGrouping
        {
            get
            {
                return this.dateTimeGroupingField;
            }
            set
            {
                this.dateTimeGroupingField = value;
            }
        }
    }

    public enum ST_DateTimeGrouping
    {

    
        year,

    
        month,

    
        day,

    
        hour,

    
        minute,

    
        second,
    }
    
    public class CT_IconFilter
    {

        private ST_IconSetType iconSetField;

        private uint iconIdField;

        private bool iconIdFieldSpecified;

        public ST_IconSetType iconSet
        {
            get
            {
                return this.iconSetField;
            }
            set
            {
                this.iconSetField = value;
            }
        }

        public uint iconId
        {
            get
            {
                return this.iconIdField;
            }
            set
            {
                this.iconIdField = value;
            }
        }

        [XmlIgnore]
        public bool iconIdSpecified
        {
            get
            {
                return this.iconIdFieldSpecified;
            }
            set
            {
                this.iconIdFieldSpecified = value;
            }
        }
    }

    public enum ST_IconSetType
    {

    
        [XmlEnum("3Arrows")]
        Item3Arrows,

    
        [XmlEnum("3ArrowsGray")]
        Item3ArrowsGray,

    
        [XmlEnum("3Flags")]
        Item3Flags,

    
        [XmlEnum("3TrafficLights1")]
        Item3TrafficLights1,

    
        [XmlEnum("3TrafficLights2")]
        Item3TrafficLights2,

    
        [XmlEnum("3Signs")]
        Item3Signs,

    
        [XmlEnum("3Symbols")]
        Item3Symbols,

    
        [XmlEnum("3Symbols2")]
        Item3Symbols2,

    
        [XmlEnum("4Arrows")]
        Item4Arrows,

    
        [XmlEnum("4ArrowsGray")]
        Item4ArrowsGray,

    
        [XmlEnum("4RedToBlack")]
        Item4RedToBlack,

    
        [XmlEnum("4Rating")]
        Item4Rating,

    
        [XmlEnum("4TrafficLights")]
        Item4TrafficLights,

    
        [XmlEnum("5Arrows")]
        Item5Arrows,

    
        [XmlEnum("5ArrowsGray")]
        Item5ArrowsGray,

    
        [XmlEnum("5Rating")]
        Item5Rating,

    
        [XmlEnum("5Quarters")]
        Item5Quarters,
    }

    public class CT_Top10
    {

        private bool topField;

        private bool percentField;

        private double valField;

        private double filterValField;

        private bool filterValFieldSpecified;

        public CT_Top10()
        {
            this.topField = true;
            this.percentField = false;
        }

        [DefaultValue(true)]
        public bool top
        {
            get
            {
                return this.topField;
            }
            set
            {
                this.topField = value;
            }
        }

        [DefaultValue(false)]
        public bool percent
        {
            get
            {
                return this.percentField;
            }
            set
            {
                this.percentField = value;
            }
        }

        public double val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }

        public double filterVal
        {
            get
            {
                return this.filterValField;
            }
            set
            {
                this.filterValField = value;
            }
        }

        [XmlIgnore]
        public bool filterValSpecified
        {
            get
            {
                return this.filterValFieldSpecified;
            }
            set
            {
                this.filterValFieldSpecified = value;
            }
        }
    }

    public class CT_SortState
    {

        private List<CT_SortCondition> sortConditionField;

        private CT_ExtensionList extLstField;

        private bool columnSortField;

        private bool caseSensitiveField;

        private ST_SortMethod sortMethodField;

        private string refField;

        public CT_SortState()
        {
            //this.extLstField = new CT_ExtensionList();
            //this.sortConditionField = new List<CT_SortCondition>();
            this.columnSortField = false;
            this.caseSensitiveField = false;
            this.sortMethodField = ST_SortMethod.none;
        }
        public static CT_SortState Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SortState ctObj = new CT_SortState();
            if (node.Attributes["columnSort"] != null)
                ctObj.columnSort = XmlHelper.ReadBool(node.Attributes["columnSort"]);
            if (node.Attributes["caseSensitive"] != null)
                ctObj.caseSensitive = XmlHelper.ReadBool(node.Attributes["caseSensitive"]);
            if (node.Attributes["sortMethod"] != null)
                ctObj.sortMethod = (ST_SortMethod)Enum.Parse(typeof(ST_SortMethod), node.Attributes["sortMethod"].Value);
            ctObj.@ref = XmlHelper.ReadString(node.Attributes["ref"]);
            ctObj.sortCondition = new List<CT_SortCondition>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sortCondition")
                    ctObj.sortCondition.Add(CT_SortCondition.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "columnSort", this.columnSort);
            XmlHelper.WriteAttribute(sw, "caseSensitive", this.caseSensitive);
            XmlHelper.WriteAttribute(sw, "sortMethod", this.sortMethod.ToString());
            XmlHelper.WriteAttribute(sw, "ref", this.@ref);
            sw.Write(">");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            if (this.sortCondition != null)
            {
                foreach (CT_SortCondition x in this.sortCondition)
                {
                    x.Write(sw, "sortCondition");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        [XmlElement]
        public List<CT_SortCondition> sortCondition
        {
            get
            {
                return this.sortConditionField;
            }
            set
            {
                this.sortConditionField = value;
            }
        }
        [XmlElement]
        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool columnSort
        {
            get
            {
                return this.columnSortField;
            }
            set
            {
                this.columnSortField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool caseSensitive
        {
            get
            {
                return this.caseSensitiveField;
            }
            set
            {
                this.caseSensitiveField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_SortMethod.none)]
        public ST_SortMethod sortMethod
        {
            get
            {
                return this.sortMethodField;
            }
            set
            {
                this.sortMethodField = value;
            }
        }
        [XmlAttribute]
        public string @ref
        {
            get
            {
                return this.refField;
            }
            set
            {
                this.refField = value;
            }
        }


    }

    public class CT_SortCondition
    {

        private bool descendingField;

        private ST_SortBy sortByField;

        private string refField;

        private string customListField;

        private uint dxfIdField;

        private bool dxfIdFieldSpecified;

        private ST_IconSetType iconSetField;

        private uint iconIdField;

        private bool iconIdFieldSpecified;

        public CT_SortCondition()
        {
            this.descendingField = false;
            this.sortByField = ST_SortBy.value;
            this.iconSetField = ST_IconSetType.Item3Arrows;
        }
        public static CT_SortCondition Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SortCondition ctObj = new CT_SortCondition();
            if (node.Attributes["descending"] != null)
                ctObj.descending = XmlHelper.ReadBool(node.Attributes["descending"]);
            if (node.Attributes["sortBy"] != null)
                ctObj.sortBy = (ST_SortBy)Enum.Parse(typeof(ST_SortBy), node.Attributes["sortBy"].Value);
            ctObj.@ref = XmlHelper.ReadString(node.Attributes["ref"]);
            ctObj.customList = XmlHelper.ReadString(node.Attributes["customList"]);
            if (node.Attributes["dxfId"] != null)
                ctObj.dxfId = XmlHelper.ReadUInt(node.Attributes["dxfId"]);
            if (node.Attributes["iconSet"] != null)
                ctObj.iconSet = XmlHelper.GetEnumValueFromString<ST_IconSetType>(node.Attributes["iconSet"].Value);
            if (node.Attributes["iconId"] != null)
                ctObj.iconId = XmlHelper.ReadUInt(node.Attributes["iconId"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "descending", this.descending);
            XmlHelper.WriteAttribute(sw, "sortBy", this.sortBy.ToString());
            XmlHelper.WriteAttribute(sw, "ref", this.@ref);
            XmlHelper.WriteAttribute(sw, "customList", this.customList);
            XmlHelper.WriteAttribute(sw, "dxfId", this.dxfId);
            XmlHelper.WriteAttribute(sw, "iconSet",  XmlHelper.GetEnumValue(this.iconSet));
            XmlHelper.WriteAttribute(sw, "iconId", this.iconId);
            sw.Write("/>");
        }

        [DefaultValue(false)]
        public bool descending
        {
            get
            {
                return this.descendingField;
            }
            set
            {
                this.descendingField = value;
            }
        }

        [DefaultValue(ST_SortBy.value)]
        public ST_SortBy sortBy
        {
            get
            {
                return this.sortByField;
            }
            set
            {
                this.sortByField = value;
            }
        }

        public string @ref
        {
            get
            {
                return this.refField;
            }
            set
            {
                this.refField = value;
            }
        }

        public string customList
        {
            get
            {
                return this.customListField;
            }
            set
            {
                this.customListField = value;
            }
        }

        public uint dxfId
        {
            get
            {
                return this.dxfIdField;
            }
            set
            {
                this.dxfIdField = value;
            }
        }

        [XmlIgnore]
        public bool dxfIdSpecified
        {
            get
            {
                return this.dxfIdFieldSpecified;
            }
            set
            {
                this.dxfIdFieldSpecified = value;
            }
        }

        [DefaultValue(ST_IconSetType.Item3Arrows)]
        public ST_IconSetType iconSet
        {
            get
            {
                return this.iconSetField;
            }
            set
            {
                this.iconSetField = value;
            }
        }

        public uint iconId
        {
            get
            {
                return this.iconIdField;
            }
            set
            {
                this.iconIdField = value;
            }
        }

        [XmlIgnore]
        public bool iconIdSpecified
        {
            get
            {
                return this.iconIdFieldSpecified;
            }
            set
            {
                this.iconIdFieldSpecified = value;
            }
        }


    }

    public enum ST_SortBy
    {

    
        value,

    
        cellColor,

    
        fontColor,

    
        icon,
    }

    public enum ST_SortMethod
    {

    
        stroke,

    
        pinYin,

    
        none,
    }
}
