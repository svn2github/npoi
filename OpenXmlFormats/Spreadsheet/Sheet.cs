// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>schemas</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace NPOI.OpenXmlFormats.Spreadsheet
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Xml.Serialization;
    using NPOI.OpenXmlFormats.Dml;
    using System.ComponentModel;
    using System.Xml.Schema;
    using System.Diagnostics;
    using System.Xml;
    using NPOI.OpenXml4Net.Util;
    using NPOI.OpenXml4Net.OPC;

    public enum ST_SmartTagShow
    {
        all,
        none,
        noIndicator,
    }

    public enum ST_CalcMode
    {
        manual,
        auto,
        autoNoTable,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_FunctionGroup
    {
        public static CT_FunctionGroup Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_FunctionGroup ctObj = new CT_FunctionGroup();
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            return ctObj;
        }
        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "name", this.name);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

        private string nameField;
        [XmlAttribute]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_FunctionGroups
    {

        private List<CT_FunctionGroup> functionGroupField;

        private uint builtInGroupCountField;

        public CT_FunctionGroups()
        {
            //this.functionGroupField = new List<CT_FunctionGroup>();
            this.builtInGroupCountField = (uint)(16);
        }
        public static CT_FunctionGroups Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_FunctionGroups ctObj = new CT_FunctionGroups();
            ctObj.builtInGroupCount = XmlHelper.ReadUInt(node.Attributes["builtInGroupCount"]);
            ctObj.functionGroup = new List<CT_FunctionGroup>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "functionGroup")
                    ctObj.functionGroup.Add(CT_FunctionGroup.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }
        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "builtInGroupCount", this.builtInGroupCount);
            sw.Write(">");
            if (this.functionGroup != null)
            {
                foreach (CT_FunctionGroup x in this.functionGroup)
                {
                    x.Write(sw, "functionGroup");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        public List<CT_FunctionGroup> functionGroup
        {
            get
            {
                return this.functionGroupField;
            }
            set
            {
                this.functionGroupField = value;
            }
        }

        [DefaultValue(typeof(uint), "16")]
        public uint builtInGroupCount
        {
            get
            {
                return this.builtInGroupCountField;
            }
            set
            {
                this.builtInGroupCountField = value;
            }
        }
    }

    public enum ST_SheetState
    {
        visible,
        hidden,
        veryHidden,
    }
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_OutlinePr
    {

        private bool applyStylesField;

        private bool summaryBelowField;

        private bool summaryRightField;

        private bool showOutlineSymbolsField;

        public static CT_OutlinePr Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_OutlinePr ctObj = new CT_OutlinePr();
            ctObj.applyStyles = XmlHelper.ReadBool(node.Attributes["applyStyles"]);
            ctObj.summaryBelow = XmlHelper.ReadBool(node.Attributes["summaryBelow"]);
            ctObj.summaryRight = XmlHelper.ReadBool(node.Attributes["summaryRight"]);
            ctObj.showOutlineSymbols = XmlHelper.ReadBool(node.Attributes["showOutlineSymbols"]);
            return ctObj;
        }
        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "applyStyles", this.applyStyles);
            XmlHelper.WriteAttribute(sw, "summaryBelow", this.summaryBelow);
            XmlHelper.WriteAttribute(sw, "summaryRight", this.summaryRight);
            XmlHelper.WriteAttribute(sw, "showOutlineSymbols", this.showOutlineSymbols);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }
        public CT_OutlinePr()
        {
            this.applyStylesField = false;
            this.summaryBelowField = true;
            this.summaryRightField = true;
            this.showOutlineSymbolsField = true;
        }
        public CT_OutlinePr Clone()
        {
            CT_OutlinePr newPr = new CT_OutlinePr();
            newPr.applyStylesField = applyStylesField;
            newPr.showOutlineSymbolsField = showOutlineSymbolsField;
            newPr.summaryBelowField = summaryBelowField;
            newPr.summaryRightField = summaryRightField;
            return newPr;
        }

        [DefaultValue(false)]
        public bool applyStyles
        {
            get
            {
                return this.applyStylesField;
            }
            set
            {
                this.applyStylesField = value;
            }
        }

        [DefaultValue(true)]
        public bool summaryBelow
        {
            get
            {
                return this.summaryBelowField;
            }
            set
            {
                this.summaryBelowField = value;
            }
        }

        [DefaultValue(true)]
        public bool summaryRight
        {
            get
            {
                return this.summaryRightField;
            }
            set
            {
                this.summaryRightField = value;
            }
        }

        [DefaultValue(true)]
        public bool showOutlineSymbols
        {
            get
            {
                return this.showOutlineSymbolsField;
            }
            set
            {
                this.showOutlineSymbolsField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_PageSetUpPr
    {

        private bool autoPageBreaksField;

        private bool fitToPageField;

        public static CT_PageSetUpPr Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PageSetUpPr ctObj = new CT_PageSetUpPr();
            ctObj.autoPageBreaks = XmlHelper.ReadBool(node.Attributes["autoPageBreaks"]);
            ctObj.fitToPage = XmlHelper.ReadBool(node.Attributes["fitToPage"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "autoPageBreaks", this.autoPageBreaks, false);
            XmlHelper.WriteAttribute(sw, "fitToPage", this.fitToPage, false);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }
        public CT_PageSetUpPr()
        {
            this.autoPageBreaksField = true;
            this.fitToPageField = false;
        }
        public CT_PageSetUpPr Clone()
        {
            CT_PageSetUpPr newPr = new CT_PageSetUpPr();
            newPr.autoPageBreaksField = autoPageBreaksField;
            newPr.fitToPageField = fitToPageField;
            return newPr;
        }

        [DefaultValue(true)]
        public bool autoPageBreaks
        {
            get
            {
                return this.autoPageBreaksField;
            }
            set
            {
                this.autoPageBreaksField = value;
            }
        }

        [DefaultValue(false)]
        public bool fitToPage
        {
            get
            {
                return this.fitToPageField;
            }
            set
            {
                this.fitToPageField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_SheetDimension
    {

        private string refField;

        [XmlAttribute("ref")]
        public string @ref
        {
            get
            {
                return this.refField;
            }
            set
            {
                this.refField = value;
            }
        }

        public static CT_SheetDimension Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SheetDimension ctObj = new CT_SheetDimension();
            ctObj.@ref = XmlHelper.ReadString(node.Attributes["ref"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "ref", this.@ref);
            sw.Write("/>");
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_SheetViews
    {

        private List<CT_SheetView> sheetViewField;

        private CT_ExtensionList extLstField;
        public static CT_SheetViews Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SheetViews ctObj = new CT_SheetViews();
            ctObj.sheetView = new List<CT_SheetView>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sheetView")
                    ctObj.sheetView.Add(CT_SheetView.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            if (this.sheetView != null)
            {
                foreach (CT_SheetView x in this.sheetView)
                {
                    x.Write(sw, "sheetView");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        public CT_SheetViews()
        {
            //this.extLstField = new CT_ExtensionList();
            this.sheetViewField = new List<CT_SheetView>();
        }

        public CT_SheetView AddNewSheetView()
        {
            CT_SheetView sv = new CT_SheetView();
            this.sheetViewField.Add(sv);
            return sv;
        }
        public CT_SheetView GetSheetViewArray(int index)
        {
            return this.sheetViewField[index];
        }
        public void SetSheetViewArray(int index, CT_SheetView array)
        {
            sheetViewField[index] = array;
        }
        public int sizeOfSheetViewArray()
        {
            return this.sheetViewField.Count;
        }
        [XmlElement]
        public List<CT_SheetView> sheetView
        {
            get
            {
                return this.sheetViewField;
            }
            set
            {
                this.sheetViewField = value;
            }
        }
        [XmlElement]
        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_SheetView
    {

        private CT_Pane paneField;

        private List<CT_Selection> selectionField;

        private List<CT_PivotSelection> pivotSelectionField;

        private CT_ExtensionList extLstField;

        private bool windowProtectionField;

        private bool showFormulasField;

        private bool showGridLinesField;

        private bool showRowColHeadersField;

        private bool showZerosField;

        private bool rightToLeftField;

        private bool tabSelectedField;

        private bool showRulerField;

        private bool showOutlineSymbolsField;

        private bool defaultGridColorField;

        private bool showWhiteSpaceField;

        private ST_SheetViewType viewField;

        private string topLeftCellField;

        private uint colorIdField;

        private uint zoomScaleField;

        private uint zoomScaleNormalField;

        private uint zoomScaleSheetLayoutViewField;

        private uint zoomScalePageLayoutViewField;

        private uint workbookViewIdField;

        public static CT_SheetView Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SheetView ctObj = new CT_SheetView();
            ctObj.windowProtection = XmlHelper.ReadBool(node.Attributes["windowProtection"]);
            ctObj.showFormulas = XmlHelper.ReadBool(node.Attributes["showFormulas"]);
            if (node.Attributes["showGridLines"] == null)
                ctObj.showGridLines = true;
            else
                ctObj.showGridLines = XmlHelper.ReadBool(node.Attributes["showGridLines"]);
            if (node.Attributes["showRowColHeaders"] == null)
                ctObj.showRowColHeaders = true;
            else
                ctObj.showRowColHeaders = XmlHelper.ReadBool(node.Attributes["showRowColHeaders"]);
            if (node.Attributes["showZeros"] == null)
                ctObj.showZeros = true;
            else
                ctObj.showZeros = XmlHelper.ReadBool(node.Attributes["showZeros"]);
            ctObj.rightToLeft = XmlHelper.ReadBool(node.Attributes["rightToLeft"]);
            ctObj.tabSelected = XmlHelper.ReadBool(node.Attributes["tabSelected"]);
            ctObj.showRuler = XmlHelper.ReadBool(node.Attributes["showRuler"]);
            ctObj.showOutlineSymbols = XmlHelper.ReadBool(node.Attributes["showOutlineSymbols"]);
            ctObj.defaultGridColor = XmlHelper.ReadBool(node.Attributes["defaultGridColor"]);
            if (node.Attributes["showWhiteSpace"] == null)
                ctObj.showWhiteSpace = true;
            else
                ctObj.showWhiteSpace = XmlHelper.ReadBool(node.Attributes["showWhiteSpace"]);
            if (node.Attributes["view"] != null)
                ctObj.view = (ST_SheetViewType)Enum.Parse(typeof(ST_SheetViewType), node.Attributes["view"].Value);
            ctObj.topLeftCell = XmlHelper.ReadString(node.Attributes["topLeftCell"]);
            ctObj.colorId = XmlHelper.ReadUInt(node.Attributes["colorId"]);
            ctObj.zoomScale = XmlHelper.ReadUInt(node.Attributes["zoomScale"]);
            ctObj.zoomScaleNormal = XmlHelper.ReadUInt(node.Attributes["zoomScaleNormal"]);
            ctObj.zoomScaleSheetLayoutView = XmlHelper.ReadUInt(node.Attributes["zoomScaleSheetLayoutView"]);
            ctObj.zoomScalePageLayoutView = XmlHelper.ReadUInt(node.Attributes["zoomScalePageLayoutView"]);
            ctObj.workbookViewId = XmlHelper.ReadUInt(node.Attributes["workbookViewId"]);
            ctObj.selection = new List<CT_Selection>();
            ctObj.pivotSelection = new List<CT_PivotSelection>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "pane")
                    ctObj.pane = CT_Pane.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "selection")
                    ctObj.selection.Add(CT_Selection.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "pivotSelection")
                    ctObj.pivotSelection.Add(CT_PivotSelection.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "windowProtection", this.windowProtection, false);
            XmlHelper.WriteAttribute(sw, "showFormulas", this.showFormulas, false);
            if (!this.showGridLines)
                XmlHelper.WriteAttribute(sw, "showGridLines", this.showGridLines);
            if (!this.showRowColHeaders)
                XmlHelper.WriteAttribute(sw, "showRowColHeaders", this.showRowColHeaders);
            if (!this.showZeros)
                XmlHelper.WriteAttribute(sw, "showZeros", this.showZeros);
            XmlHelper.WriteAttribute(sw, "rightToLeft", this.rightToLeft, false);
            XmlHelper.WriteAttribute(sw, "tabSelected", this.tabSelected, false);
            XmlHelper.WriteAttribute(sw, "showRuler", this.showRuler, false);
            XmlHelper.WriteAttribute(sw, "showOutlineSymbols", this.showOutlineSymbols, false);
            XmlHelper.WriteAttribute(sw, "defaultGridColor", this.defaultGridColor, false);
            if (!this.showWhiteSpace)
                XmlHelper.WriteAttribute(sw, "showWhiteSpace", this.showWhiteSpace);
            if (this.view != ST_SheetViewType.normal)
                XmlHelper.WriteAttribute(sw, "view", this.view.ToString());
            XmlHelper.WriteAttribute(sw, "topLeftCell", this.topLeftCell);
            XmlHelper.WriteAttribute(sw, "colorId", this.colorId);
            XmlHelper.WriteAttribute(sw, "zoomScale", this.zoomScale);
            XmlHelper.WriteAttribute(sw, "zoomScaleNormal", this.zoomScaleNormal);
            XmlHelper.WriteAttribute(sw, "zoomScaleSheetLayoutView", this.zoomScaleSheetLayoutView);
            XmlHelper.WriteAttribute(sw, "zoomScalePageLayoutView", this.zoomScalePageLayoutView);
            XmlHelper.WriteAttribute(sw, "workbookViewId", this.workbookViewId, true);
            sw.Write(">");
            if (this.pane != null)
                this.pane.Write(sw, "pane");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            if (this.selection != null)
            {
                foreach (CT_Selection x in this.selection)
                {
                    x.Write(sw, "selection");
                }
            }
            if (this.pivotSelection != null)
            {
                foreach (CT_PivotSelection x in this.pivotSelection)
                {
                    x.Write(sw, "pivotSelection");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        public CT_SheetView()
        {
            //this.extLstField = new CT_ExtensionList();
            this.pivotSelectionField = new List<CT_PivotSelection>();
            this.selectionField = new List<CT_Selection>();
            //this.paneField = new CT_Pane();
            this.windowProtectionField = false;
            this.showFormulasField = false;
            this.showGridLinesField = true;
            this.showRowColHeadersField = true;
            this.showZerosField = true;
            this.rightToLeftField = false;
            this.tabSelectedField = false;
            this.showRulerField = true;
            this.showOutlineSymbolsField = true;
            this.defaultGridColorField = true;
            this.showWhiteSpaceField = true;
            this.viewField = ST_SheetViewType.normal;
            this.colorIdField = ((uint)(64));
            this.zoomScaleField = ((uint)(100));
            this.zoomScaleNormalField = ((uint)(0));
            this.zoomScaleSheetLayoutViewField = ((uint)(0));
            this.zoomScalePageLayoutViewField = ((uint)(0));
        }
        public bool IsSetPane()
        {
            return this.paneField != null;
        }
        public CT_Pane AddNewPane()
        {
            this.paneField = new CT_Pane();
            return this.paneField;
        }
        public CT_Selection AddNewSelection()
        {
            if (this.selectionField == null)
                selectionField = new List<CT_Selection>();
            CT_Selection newSel = new CT_Selection();
            selectionField.Add(newSel);
            return newSel;
        }
        public void UnsetPane()
        {
            this.paneField = null;
        }
        public CT_Selection GetSelectionArray(int index)
        {
            return this.selectionField[index];
        }
        public CT_Selection InsertNewSelection(int index)
        {
            CT_Selection sel = new CT_Selection();
            this.selectionField.Insert(index, sel);
            return sel;
        }
        public int SizeOfSelectionArray()
        {
            return this.selectionField.Count;
        }
        public void SetSelectionArray(List<CT_Selection> selectionArray)
        {
            this.selectionField = selectionArray;
        }
        [XmlElement]
        public CT_Pane pane
        {
            get
            {
                return this.paneField;
            }
            set
            {
                this.paneField = value;
            }
        }
        [XmlElement]
        public List<CT_Selection> selection
        {
            get
            {
                return this.selectionField;
            }
            set
            {
                this.selectionField = value;
            }
        }
        [XmlElement]
        public List<CT_PivotSelection> pivotSelection
        {
            get
            {
                return this.pivotSelectionField;
            }
            set
            {
                this.pivotSelectionField = value;
            }
        }
        [XmlElement]
        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool windowProtection
        {
            get
            {
                return this.windowProtectionField;
            }
            set
            {
                this.windowProtectionField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool showFormulas
        {
            get
            {
                return this.showFormulasField;
            }
            set
            {
                this.showFormulasField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool showGridLines
        {
            get
            {
                return this.showGridLinesField;
            }
            set
            {
                this.showGridLinesField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool showRowColHeaders
        {
            get
            {
                return this.showRowColHeadersField;
            }
            set
            {
                this.showRowColHeadersField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool showZeros
        {
            get
            {
                return this.showZerosField;
            }
            set
            {
                this.showZerosField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool rightToLeft
        {
            get
            {
                return this.rightToLeftField;
            }
            set
            {
                this.rightToLeftField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool tabSelected
        {
            get
            {
                return this.tabSelectedField;
            }
            set
            {
                this.tabSelectedField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool showRuler
        {
            get
            {
                return this.showRulerField;
            }
            set
            {
                this.showRulerField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool showOutlineSymbols
        {
            get
            {
                return this.showOutlineSymbolsField;
            }
            set
            {
                this.showOutlineSymbolsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool defaultGridColor
        {
            get
            {
                return this.defaultGridColorField;
            }
            set
            {
                this.defaultGridColorField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool showWhiteSpace
        {
            get
            {
                return this.showWhiteSpaceField;
            }
            set
            {
                this.showWhiteSpaceField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_SheetViewType.normal)]
        public ST_SheetViewType view
        {
            get
            {
                return this.viewField;
            }
            set
            {
                this.viewField = value;
            }
        }
        [XmlAttribute]
        public string topLeftCell
        {
            get
            {
                return this.topLeftCellField;
            }
            set
            {
                this.topLeftCellField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "64")]
        public uint colorId
        {
            get
            {
                return this.colorIdField;
            }
            set
            {
                this.colorIdField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "100")]
        public uint zoomScale
        {
            get
            {
                return this.zoomScaleField;
            }
            set
            {
                this.zoomScaleField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint zoomScaleNormal
        {
            get
            {
                return this.zoomScaleNormalField;
            }
            set
            {
                this.zoomScaleNormalField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint zoomScaleSheetLayoutView
        {
            get
            {
                return this.zoomScaleSheetLayoutViewField;
            }
            set
            {
                this.zoomScaleSheetLayoutViewField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint zoomScalePageLayoutView
        {
            get
            {
                return this.zoomScalePageLayoutViewField;
            }
            set
            {
                this.zoomScalePageLayoutViewField = value;
            }
        }
        [XmlAttribute]
        public uint workbookViewId
        {
            get
            {
                return this.workbookViewIdField;
            }
            set
            {
                this.workbookViewIdField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Pane
    {

        private double xSplitField;

        private double ySplitField;

        private string topLeftCellField;

        private ST_Pane activePaneField;

        private ST_PaneState stateField;

        public CT_Pane()
        {
            this.xSplitField = 0D;
            this.ySplitField = 0D;
            this.activePaneField = ST_Pane.topLeft;
            this.stateField = ST_PaneState.split;
        }

        public static CT_Pane Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Pane ctObj = new CT_Pane();
            ctObj.xSplit = XmlHelper.ReadDouble(node.Attributes["xSplit"]);
            ctObj.ySplit = XmlHelper.ReadDouble(node.Attributes["ySplit"]);
            ctObj.topLeftCell = XmlHelper.ReadString(node.Attributes["topLeftCell"]);
            if (node.Attributes["activePane"] != null)
                ctObj.activePane = (ST_Pane)Enum.Parse(typeof(ST_Pane), node.Attributes["activePane"].Value);
            if (node.Attributes["state"] != null)
                ctObj.state = (ST_PaneState)Enum.Parse(typeof(ST_PaneState), node.Attributes["state"].Value);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "xSplit", this.xSplit);
            XmlHelper.WriteAttribute(sw, "ySplit", this.ySplit);
            XmlHelper.WriteAttribute(sw, "topLeftCell", this.topLeftCell);
            XmlHelper.WriteAttribute(sw, "activePane", this.activePane.ToString());
            XmlHelper.WriteAttribute(sw, "state", this.state.ToString());
            sw.Write("/>");
        }
        public bool IsSetTopLeftCell()
        {
            return this.topLeftCellField != null;
        }
        public void UnsetTopLeftCell()
        {
            this.topLeftCellField = null;
        }
        public void UnsetYSplit()
        {
            this.ySplitField = 0D;
        }
        public void UnsetXSplit()
        {
            this.xSplitField = 0D;
        }
        public bool IsSetXSplit()
        {
            return this.xSplitField != 0D;
        }
        public bool IsSetYSplit()
        {
            return this.ySplitField != 0D;
        }
        [XmlAttribute]
        [DefaultValue(0D)]
        public double xSplit
        {
            get
            {
                return this.xSplitField;
            }
            set
            {
                this.xSplitField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(0D)]
        public double ySplit
        {
            get
            {
                return this.ySplitField;
            }
            set
            {
                this.ySplitField = value;
            }
        }
        [XmlAttribute]
        public string topLeftCell
        {
            get
            {
                return this.topLeftCellField;
            }
            set
            {
                this.topLeftCellField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_Pane.topLeft)]
        public ST_Pane activePane
        {
            get
            {
                return this.activePaneField;
            }
            set
            {
                this.activePaneField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_PaneState.split)]
        public ST_PaneState state
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

    }

    public enum ST_Pane
    {
        bottomRight,
        topRight,
        bottomLeft,
        topLeft,
    }

    public enum ST_PaneState
    {
        split,
        frozen,
        frozenSplit,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Selection
    {

        private ST_Pane paneField;

        private string activeCellField;

        private uint activeCellIdField;

        private string sqrefField;

        public CT_Selection()
        {
            this.paneField = ST_Pane.topLeft;
            this.activeCellIdField = ((uint)(0));
        }

        public static CT_Selection Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Selection ctObj = new CT_Selection();
            if (node.Attributes["pane"] != null)
                ctObj.pane = (ST_Pane)Enum.Parse(typeof(ST_Pane), node.Attributes["pane"].Value);
            ctObj.activeCell = XmlHelper.ReadString(node.Attributes["activeCell"]);
            ctObj.activeCellId = XmlHelper.ReadUInt(node.Attributes["activeCellId"]);
            ctObj.sqref = XmlHelper.ReadString(node.Attributes["sqref"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            if (this.pane != ST_Pane.topLeft)
                XmlHelper.WriteAttribute(sw, "pane", this.pane.ToString());
            XmlHelper.WriteAttribute(sw, "activeCell", this.activeCell);
            XmlHelper.WriteAttribute(sw, "activeCellId", this.activeCellId);
            XmlHelper.WriteAttribute(sw, "sqref", this.sqref);
            sw.Write("/>");
        }

        public void SetSqref(string[] array)
        {
            if (array.Length > 0)
                sqrefField = array[0];
        }
        [XmlAttribute]
        [DefaultValue(ST_Pane.topLeft)]
        public ST_Pane pane
        {
            get
            {
                return this.paneField;
            }
            set
            {
                this.paneField = value;
            }
        }
        [XmlAttribute]
        public string activeCell
        {
            get
            {
                return this.activeCellField;
            }
            set
            {
                this.activeCellField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint activeCellId
        {
            get
            {
                return this.activeCellIdField;
            }
            set
            {
                this.activeCellIdField = value;
            }
        }
        [XmlAttribute]
        public string sqref
        {
            get
            {
                return this.sqrefField;
            }
            set
            {
                this.sqrefField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_PivotSelection
    {

        private CT_PivotArea pivotAreaField;

        private ST_Pane paneField;

        private bool showHeaderField;

        private bool labelField;

        private bool dataField;

        private bool extendableField;

        private uint countField;

        private ST_Axis axisField;

        private bool axisFieldSpecified;

        private uint dimensionField;

        private uint startField;

        private uint minField;

        private uint maxField;

        private uint activeRowField;

        private uint activeColField;

        private uint previousRowField;

        private uint previousColField;

        private uint clickField;

        private string idField;

        public CT_PivotSelection()
        {
            this.pivotAreaField = new CT_PivotArea();
            this.paneField = ST_Pane.topLeft;
            this.showHeaderField = false;
            this.labelField = false;
            this.dataField = false;
            this.extendableField = false;
            this.countField = ((uint)(0));
            this.dimensionField = ((uint)(0));
            this.startField = ((uint)(0));
            this.minField = ((uint)(0));
            this.maxField = ((uint)(0));
            this.activeRowField = ((uint)(0));
            this.activeColField = ((uint)(0));
            this.previousRowField = ((uint)(0));
            this.previousColField = ((uint)(0));
            this.clickField = ((uint)(0));
        }

        public static CT_PivotSelection Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PivotSelection ctObj = new CT_PivotSelection();
            if (node.Attributes["pane"] != null)
                ctObj.pane = (ST_Pane)Enum.Parse(typeof(ST_Pane), node.Attributes["pane"].Value);
            ctObj.showHeader = XmlHelper.ReadBool(node.Attributes["showHeader"]);
            ctObj.label = XmlHelper.ReadBool(node.Attributes["label"]);
            ctObj.data = XmlHelper.ReadBool(node.Attributes["data"]);
            ctObj.extendable = XmlHelper.ReadBool(node.Attributes["extendable"]);
            ctObj.count = XmlHelper.ReadUInt(node.Attributes["count"]);
            if (node.Attributes["axis"] != null)
                ctObj.axis = (ST_Axis)Enum.Parse(typeof(ST_Axis), node.Attributes["axis"].Value);
            ctObj.dimension = XmlHelper.ReadUInt(node.Attributes["dimension"]);
            ctObj.start = XmlHelper.ReadUInt(node.Attributes["start"]);
            ctObj.min = XmlHelper.ReadUInt(node.Attributes["min"]);
            ctObj.max = XmlHelper.ReadUInt(node.Attributes["max"]);
            ctObj.activeRow = XmlHelper.ReadUInt(node.Attributes["activeRow"]);
            ctObj.activeCol = XmlHelper.ReadUInt(node.Attributes["activeCol"]);
            ctObj.previousRow = XmlHelper.ReadUInt(node.Attributes["previousRow"]);
            ctObj.previousCol = XmlHelper.ReadUInt(node.Attributes["previousCol"]);
            ctObj.click = XmlHelper.ReadUInt(node.Attributes["click"]);
            ctObj.id = XmlHelper.ReadString(node.Attributes["id", PackageNamespaces.SCHEMA_RELATIONSHIPS]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "pivotArea")
                    ctObj.pivotArea = CT_PivotArea.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "pane", this.pane.ToString());
            XmlHelper.WriteAttribute(sw, "showHeader", this.showHeader);
            XmlHelper.WriteAttribute(sw, "label", this.label);
            XmlHelper.WriteAttribute(sw, "data", this.data);
            XmlHelper.WriteAttribute(sw, "extendable", this.extendable);
            XmlHelper.WriteAttribute(sw, "count", this.count);
            XmlHelper.WriteAttribute(sw, "axis", this.axis.ToString());
            XmlHelper.WriteAttribute(sw, "dimension", this.dimension);
            XmlHelper.WriteAttribute(sw, "start", this.start);
            XmlHelper.WriteAttribute(sw, "min", this.min);
            XmlHelper.WriteAttribute(sw, "max", this.max);
            XmlHelper.WriteAttribute(sw, "activeRow", this.activeRow);
            XmlHelper.WriteAttribute(sw, "activeCol", this.activeCol);
            XmlHelper.WriteAttribute(sw, "previousRow", this.previousRow);
            XmlHelper.WriteAttribute(sw, "previousCol", this.previousCol);
            XmlHelper.WriteAttribute(sw, "click", this.click);
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write(">");
            if (this.pivotArea != null)
                this.pivotArea.Write(sw, "pivotArea");
            sw.Write(string.Format("</{0}>", nodeName));
        }
        public CT_PivotArea pivotArea
        {
            get
            {
                return this.pivotAreaField;
            }
            set
            {
                this.pivotAreaField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_Pane.topLeft)]
        public ST_Pane pane
        {
            get
            {
                return this.paneField;
            }
            set
            {
                this.paneField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool showHeader
        {
            get
            {
                return this.showHeaderField;
            }
            set
            {
                this.showHeaderField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool data
        {
            get
            {
                return this.dataField;
            }
            set
            {
                this.dataField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool extendable
        {
            get
            {
                return this.extendableField;
            }
            set
            {
                this.extendableField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint count
        {
            get
            {
                return this.countField;
            }
            set
            {
                this.countField = value;
            }
        }
        [XmlAttribute]
        public ST_Axis axis
        {
            get
            {
                return this.axisField;
            }
            set
            {
                this.axisField = value;
            }
        }

        [XmlIgnore]
        public bool axisSpecified
        {
            get
            {
                return this.axisFieldSpecified;
            }
            set
            {
                this.axisFieldSpecified = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint dimension
        {
            get
            {
                return this.dimensionField;
            }
            set
            {
                this.dimensionField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint start
        {
            get
            {
                return this.startField;
            }
            set
            {
                this.startField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint min
        {
            get
            {
                return this.minField;
            }
            set
            {
                this.minField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint max
        {
            get
            {
                return this.maxField;
            }
            set
            {
                this.maxField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint activeRow
        {
            get
            {
                return this.activeRowField;
            }
            set
            {
                this.activeRowField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint activeCol
        {
            get
            {
                return this.activeColField;
            }
            set
            {
                this.activeColField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint previousRow
        {
            get
            {
                return this.previousRowField;
            }
            set
            {
                this.previousRowField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint previousCol
        {
            get
            {
                return this.previousColField;
            }
            set
            {
                this.previousColField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "0")]
        public uint click
        {
            get
            {
                return this.clickField;
            }
            set
            {
                this.clickField = value;
            }
        }
        // TODO is the following correct?
        [XmlAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_PivotArea
    {

        private CT_PivotAreaReferences referencesField;

        private CT_ExtensionList extLstField;

        private int fieldField;

        private bool fieldFieldSpecified;

        private ST_PivotAreaType typeField;

        private bool dataOnlyField;

        private bool labelOnlyField;

        private bool grandRowField;

        private bool grandColField;

        private bool cacheIndexField;

        private bool outlineField;

        private string offsetField;

        private bool collapsedLevelsAreSubtotalsField;

        private ST_Axis axisField;

        private bool axisFieldSpecified;

        private uint fieldPositionField;

        private bool fieldPositionFieldSpecified;

        public CT_PivotArea()
        {
            //this.extLstField = new CT_ExtensionList();
            //this.referencesField = new CT_PivotAreaReferences();
            this.typeField = ST_PivotAreaType.normal;
            this.dataOnlyField = true;
            this.labelOnlyField = false;
            this.grandRowField = false;
            this.grandColField = false;
            this.cacheIndexField = false;
            this.outlineField = true;
            this.collapsedLevelsAreSubtotalsField = false;
        }

        public static CT_PivotArea Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PivotArea ctObj = new CT_PivotArea();
            ctObj.field = XmlHelper.ReadInt(node.Attributes["field"]);
            if (node.Attributes["type"] != null)
                ctObj.type = (ST_PivotAreaType)Enum.Parse(typeof(ST_PivotAreaType), node.Attributes["type"].Value);
            ctObj.dataOnly = XmlHelper.ReadBool(node.Attributes["dataOnly"]);
            ctObj.labelOnly = XmlHelper.ReadBool(node.Attributes["labelOnly"]);
            ctObj.grandRow = XmlHelper.ReadBool(node.Attributes["grandRow"]);
            ctObj.grandCol = XmlHelper.ReadBool(node.Attributes["grandCol"]);
            ctObj.cacheIndex = XmlHelper.ReadBool(node.Attributes["cacheIndex"]);
            ctObj.outline = XmlHelper.ReadBool(node.Attributes["outline"]);
            ctObj.offset = XmlHelper.ReadString(node.Attributes["offset"]);
            ctObj.collapsedLevelsAreSubtotals = XmlHelper.ReadBool(node.Attributes["collapsedLevelsAreSubtotals"]);
            if (node.Attributes["axis"] != null)
                ctObj.axis = (ST_Axis)Enum.Parse(typeof(ST_Axis), node.Attributes["axis"].Value);
            ctObj.fieldPosition = XmlHelper.ReadUInt(node.Attributes["fieldPosition"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "references")
                    ctObj.references = CT_PivotAreaReferences.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "field", this.field);
            XmlHelper.WriteAttribute(sw, "type", this.type.ToString());
            XmlHelper.WriteAttribute(sw, "dataOnly", this.dataOnly);
            XmlHelper.WriteAttribute(sw, "labelOnly", this.labelOnly);
            XmlHelper.WriteAttribute(sw, "grandRow", this.grandRow);
            XmlHelper.WriteAttribute(sw, "grandCol", this.grandCol);
            XmlHelper.WriteAttribute(sw, "cacheIndex", this.cacheIndex);
            XmlHelper.WriteAttribute(sw, "outline", this.outline);
            XmlHelper.WriteAttribute(sw, "offset", this.offset);
            XmlHelper.WriteAttribute(sw, "collapsedLevelsAreSubtotals", this.collapsedLevelsAreSubtotals);
            XmlHelper.WriteAttribute(sw, "axis", this.axis.ToString());
            XmlHelper.WriteAttribute(sw, "fieldPosition", this.fieldPosition);
            sw.Write(">");
            if (this.references != null)
                this.references.Write(sw, "references");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            sw.Write(string.Format("</{0}>", nodeName));
        }
        public CT_PivotAreaReferences references
        {
            get
            {
                return this.referencesField;
            }
            set
            {
                this.referencesField = value;
            }
        }

        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
        [XmlAttribute]
        public int field
        {
            get
            {
                return this.fieldField;
            }
            set
            {
                this.fieldField = value;
            }
        }

        [XmlIgnore]
        public bool fieldSpecified
        {
            get
            {
                return this.fieldFieldSpecified;
            }
            set
            {
                this.fieldFieldSpecified = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_PivotAreaType.normal)]
        public ST_PivotAreaType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool dataOnly
        {
            get
            {
                return this.dataOnlyField;
            }
            set
            {
                this.dataOnlyField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool labelOnly
        {
            get
            {
                return this.labelOnlyField;
            }
            set
            {
                this.labelOnlyField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool grandRow
        {
            get
            {
                return this.grandRowField;
            }
            set
            {
                this.grandRowField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool grandCol
        {
            get
            {
                return this.grandColField;
            }
            set
            {
                this.grandColField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool cacheIndex
        {
            get
            {
                return this.cacheIndexField;
            }
            set
            {
                this.cacheIndexField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool outline
        {
            get
            {
                return this.outlineField;
            }
            set
            {
                this.outlineField = value;
            }
        }
        [XmlAttribute]
        public string offset
        {
            get
            {
                return this.offsetField;
            }
            set
            {
                this.offsetField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool collapsedLevelsAreSubtotals
        {
            get
            {
                return this.collapsedLevelsAreSubtotalsField;
            }
            set
            {
                this.collapsedLevelsAreSubtotalsField = value;
            }
        }
        [XmlAttribute]
        public ST_Axis axis
        {
            get
            {
                return this.axisField;
            }
            set
            {
                this.axisField = value;
            }
        }

        [XmlIgnore]
        public bool axisSpecified
        {
            get
            {
                return this.axisFieldSpecified;
            }
            set
            {
                this.axisFieldSpecified = value;
            }
        }
        [XmlAttribute]
        public uint fieldPosition
        {
            get
            {
                return this.fieldPositionField;
            }
            set
            {
                this.fieldPositionField = value;
            }
        }

        [XmlIgnore]
        public bool fieldPositionSpecified
        {
            get
            {
                return this.fieldPositionFieldSpecified;
            }
            set
            {
                this.fieldPositionFieldSpecified = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_PivotAreaReferences
    {

        private List<CT_PivotAreaReference> referenceField;

        private uint countField;

        private bool countFieldSpecified;

        public static CT_PivotAreaReferences Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PivotAreaReferences ctObj = new CT_PivotAreaReferences();
            ctObj.count = XmlHelper.ReadUInt(node.Attributes["count"]);
            ctObj.reference = new List<CT_PivotAreaReference>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "reference")
                    ctObj.reference.Add(CT_PivotAreaReference.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "count", this.count);
            sw.Write(">");
            if (this.reference != null)
            {
                foreach (CT_PivotAreaReference x in this.reference)
                {
                    x.Write(sw, "reference");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }
        public CT_PivotAreaReferences()
        {
            this.referenceField = new List<CT_PivotAreaReference>();
        }

        public List<CT_PivotAreaReference> reference
        {
            get
            {
                return this.referenceField;
            }
            set
            {
                this.referenceField = value;
            }
        }
        [XmlAttribute]
        public uint count
        {
            get
            {
                return this.countField;
            }
            set
            {
                this.countField = value;
            }
        }

        [XmlIgnore]
        public bool countSpecified
        {
            get
            {
                return this.countFieldSpecified;
            }
            set
            {
                this.countFieldSpecified = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_PivotAreaReference
    {

        private List<CT_Index> xField;

        private CT_ExtensionList extLstField;

        private uint fieldField;

        private bool fieldFieldSpecified;

        private uint countField;

        private bool countFieldSpecified;

        private bool selectedField;

        private bool byPositionField;

        private bool relativeField;

        private bool defaultSubtotalField;

        private bool sumSubtotalField;

        private bool countASubtotalField;

        private bool avgSubtotalField;

        private bool maxSubtotalField;

        private bool minSubtotalField;

        private bool productSubtotalField;

        private bool countSubtotalField;

        private bool stdDevSubtotalField;

        private bool stdDevPSubtotalField;

        private bool varSubtotalField;

        private bool varPSubtotalField;

        public static CT_PivotAreaReference Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PivotAreaReference ctObj = new CT_PivotAreaReference();
            ctObj.field = XmlHelper.ReadUInt(node.Attributes["field"]);
            ctObj.count = XmlHelper.ReadUInt(node.Attributes["count"]);
            ctObj.selected = XmlHelper.ReadBool(node.Attributes["selected"]);
            ctObj.byPosition = XmlHelper.ReadBool(node.Attributes["byPosition"]);
            ctObj.relative = XmlHelper.ReadBool(node.Attributes["relative"]);
            ctObj.defaultSubtotal = XmlHelper.ReadBool(node.Attributes["defaultSubtotal"]);
            ctObj.sumSubtotal = XmlHelper.ReadBool(node.Attributes["sumSubtotal"]);
            ctObj.countASubtotal = XmlHelper.ReadBool(node.Attributes["countASubtotal"]);
            ctObj.avgSubtotal = XmlHelper.ReadBool(node.Attributes["avgSubtotal"]);
            ctObj.maxSubtotal = XmlHelper.ReadBool(node.Attributes["maxSubtotal"]);
            ctObj.minSubtotal = XmlHelper.ReadBool(node.Attributes["minSubtotal"]);
            ctObj.productSubtotal = XmlHelper.ReadBool(node.Attributes["productSubtotal"]);
            ctObj.countSubtotal = XmlHelper.ReadBool(node.Attributes["countSubtotal"]);
            ctObj.stdDevSubtotal = XmlHelper.ReadBool(node.Attributes["stdDevSubtotal"]);
            ctObj.stdDevPSubtotal = XmlHelper.ReadBool(node.Attributes["stdDevPSubtotal"]);
            ctObj.varSubtotal = XmlHelper.ReadBool(node.Attributes["varSubtotal"]);
            ctObj.varPSubtotal = XmlHelper.ReadBool(node.Attributes["varPSubtotal"]);
            ctObj.x = new List<CT_Index>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "x")
                    ctObj.x.Add(CT_Index.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "field", this.field);
            XmlHelper.WriteAttribute(sw, "count", this.count);
            XmlHelper.WriteAttribute(sw, "selected", this.selected);
            XmlHelper.WriteAttribute(sw, "byPosition", this.byPosition);
            XmlHelper.WriteAttribute(sw, "relative", this.relative);
            XmlHelper.WriteAttribute(sw, "defaultSubtotal", this.defaultSubtotal);
            XmlHelper.WriteAttribute(sw, "sumSubtotal", this.sumSubtotal);
            XmlHelper.WriteAttribute(sw, "countASubtotal", this.countASubtotal);
            XmlHelper.WriteAttribute(sw, "avgSubtotal", this.avgSubtotal);
            XmlHelper.WriteAttribute(sw, "maxSubtotal", this.maxSubtotal);
            XmlHelper.WriteAttribute(sw, "minSubtotal", this.minSubtotal);
            XmlHelper.WriteAttribute(sw, "productSubtotal", this.productSubtotal);
            XmlHelper.WriteAttribute(sw, "countSubtotal", this.countSubtotal);
            XmlHelper.WriteAttribute(sw, "stdDevSubtotal", this.stdDevSubtotal);
            XmlHelper.WriteAttribute(sw, "stdDevPSubtotal", this.stdDevPSubtotal);
            XmlHelper.WriteAttribute(sw, "varSubtotal", this.varSubtotal);
            XmlHelper.WriteAttribute(sw, "varPSubtotal", this.varPSubtotal);
            sw.Write(">");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            if (this.x != null)
            {
                foreach (CT_Index x in this.x)
                {
                    x.Write(sw, "x");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        public CT_PivotAreaReference()
        {
            this.extLstField = new CT_ExtensionList();
            this.xField = new List<CT_Index>();
            this.selectedField = true;
            this.byPositionField = false;
            this.relativeField = false;
            this.defaultSubtotalField = false;
            this.sumSubtotalField = false;
            this.countASubtotalField = false;
            this.avgSubtotalField = false;
            this.maxSubtotalField = false;
            this.minSubtotalField = false;
            this.productSubtotalField = false;
            this.countSubtotalField = false;
            this.stdDevSubtotalField = false;
            this.stdDevPSubtotalField = false;
            this.varSubtotalField = false;
            this.varPSubtotalField = false;
        }

        public List<CT_Index> x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }

        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public uint field
        {
            get
            {
                return this.fieldField;
            }
            set
            {
                this.fieldField = value;
            }
        }

        [XmlIgnore]
        public bool fieldSpecified
        {
            get
            {
                return this.fieldFieldSpecified;
            }
            set
            {
                this.fieldFieldSpecified = value;
            }
        }

        public uint count
        {
            get
            {
                return this.countField;
            }
            set
            {
                this.countField = value;
            }
        }

        [XmlIgnore]
        public bool countSpecified
        {
            get
            {
                return this.countFieldSpecified;
            }
            set
            {
                this.countFieldSpecified = value;
            }
        }

        [DefaultValue(true)]
        public bool selected
        {
            get
            {
                return this.selectedField;
            }
            set
            {
                this.selectedField = value;
            }
        }

        [DefaultValue(false)]
        public bool byPosition
        {
            get
            {
                return this.byPositionField;
            }
            set
            {
                this.byPositionField = value;
            }
        }

        [DefaultValue(false)]
        public bool relative
        {
            get
            {
                return this.relativeField;
            }
            set
            {
                this.relativeField = value;
            }
        }

        [DefaultValue(false)]
        public bool defaultSubtotal
        {
            get
            {
                return this.defaultSubtotalField;
            }
            set
            {
                this.defaultSubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool sumSubtotal
        {
            get
            {
                return this.sumSubtotalField;
            }
            set
            {
                this.sumSubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool countASubtotal
        {
            get
            {
                return this.countASubtotalField;
            }
            set
            {
                this.countASubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool avgSubtotal
        {
            get
            {
                return this.avgSubtotalField;
            }
            set
            {
                this.avgSubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool maxSubtotal
        {
            get
            {
                return this.maxSubtotalField;
            }
            set
            {
                this.maxSubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool minSubtotal
        {
            get
            {
                return this.minSubtotalField;
            }
            set
            {
                this.minSubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool productSubtotal
        {
            get
            {
                return this.productSubtotalField;
            }
            set
            {
                this.productSubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool countSubtotal
        {
            get
            {
                return this.countSubtotalField;
            }
            set
            {
                this.countSubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool stdDevSubtotal
        {
            get
            {
                return this.stdDevSubtotalField;
            }
            set
            {
                this.stdDevSubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool stdDevPSubtotal
        {
            get
            {
                return this.stdDevPSubtotalField;
            }
            set
            {
                this.stdDevPSubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool varSubtotal
        {
            get
            {
                return this.varSubtotalField;
            }
            set
            {
                this.varSubtotalField = value;
            }
        }

        [DefaultValue(false)]
        public bool varPSubtotal
        {
            get
            {
                return this.varPSubtotalField;
            }
            set
            {
                this.varPSubtotalField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Index
    {

        private uint vField;

        public uint v
        {
            get
            {
                return this.vField;
            }
            set
            {
                this.vField = value;
            }
        }
        public static CT_Index Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Index ctObj = new CT_Index();
            ctObj.v = XmlHelper.ReadUInt(node.Attributes["v"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "v", this.v);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    public enum ST_SheetViewType
    {
        normal,
        pageBreakPreview,
        pageLayout,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_SheetFormatPr
    {
        // all attributes are optional, except defaultRowHeight
        private uint baseColWidthField = 0;

        private double defaultColWidthField = 0.0;

        private double defaultRowHeightField = 0.0; // required

        private bool customHeightField;

        private bool zeroHeightField;

        private bool thickTopField;

        private bool thickBottomField;

        private byte outlineLevelRowField;

        private byte outlineLevelColField;
        private double dyDescentField;
        public CT_SheetFormatPr()
        {
            this.baseColWidth = 8;
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "8")]
        public uint baseColWidth
        {
            get
            {
                return this.baseColWidthField;
            }
            set
            {
                this.baseColWidthField = value;
            }
        }

        [XmlAttribute]
        public double defaultColWidth
        {
            get
            {
                return this.defaultColWidthField;
            }
            set
            {
                this.defaultColWidthField = value;
            }
        }

        [XmlAttribute]
        public double defaultRowHeight
        {
            get
            {
                return this.defaultRowHeightField;
            }
            set
            {
                this.defaultRowHeightField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool customHeight
        {
            get
            {
                return this.customHeightField;
            }
            set
            {
                this.customHeightField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool zeroHeight
        {
            get
            {
                return this.zeroHeightField;
            }
            set
            {
                this.zeroHeightField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(false)]
        public bool thickTop
        {
            get
            {
                return this.thickTopField;
            }
            set
            {
                this.thickTopField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool thickBottom
        {
            get
            {
                return this.thickBottomField;
            }
            set
            {
                this.thickBottomField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(typeof(byte), "0")]
        public byte outlineLevelRow
        {
            get
            {
                return this.outlineLevelRowField;
            }
            set
            {
                this.outlineLevelRowField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(typeof(byte), "0")]
        public byte outlineLevelCol
        {
            get
            {
                return this.outlineLevelColField;
            }
            set
            {
                this.outlineLevelColField = value;
            }
        }

        public static CT_SheetFormatPr Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SheetFormatPr ctObj = new CT_SheetFormatPr();
            ctObj.baseColWidth = XmlHelper.ReadUInt(node.Attributes["baseColWidth"]);
            ctObj.defaultColWidth = XmlHelper.ReadDouble(node.Attributes["defaultColWidth"]);
            ctObj.defaultRowHeight = XmlHelper.ReadDouble(node.Attributes["defaultRowHeight"]);
            ctObj.customHeight = XmlHelper.ReadBool(node.Attributes["customHeight"]);
            ctObj.zeroHeight = XmlHelper.ReadBool(node.Attributes["zeroHeight"]);
            ctObj.thickTop = XmlHelper.ReadBool(node.Attributes["thickTop"]);
            ctObj.outlineLevelRow = XmlHelper.ReadByte(node.Attributes["outlineLevelRow"]);
            ctObj.outlineLevelCol = XmlHelper.ReadByte(node.Attributes["outlineLevelCol"]);
            ctObj.thickBottom = XmlHelper.ReadBool(node.Attributes["thickBottom"]);
            ctObj.dyDescentField = XmlHelper.ReadDouble(node.Attributes["x14ac:dyDescent"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "baseColWidth", this.baseColWidth);
            XmlHelper.WriteAttribute(sw, "defaultColWidth", this.defaultColWidth);
            XmlHelper.WriteAttribute(sw, "defaultRowHeight", this.defaultRowHeight);
            XmlHelper.WriteAttribute(sw, "customHeight", this.customHeight, false);
            XmlHelper.WriteAttribute(sw, "zeroHeight", this.zeroHeight, false);
            XmlHelper.WriteAttribute(sw, "thickTop", this.thickTop, false);
            XmlHelper.WriteAttribute(sw, "thickBottom", this.thickBottom, false);
            XmlHelper.WriteAttribute(sw, "outlineLevelRow", this.outlineLevelRow);
            XmlHelper.WriteAttribute(sw, "outlineLevelCol", this.outlineLevelCol);
            XmlHelper.WriteAttribute(sw, "x14ac:dyDescent", this.dyDescentField, false);
            sw.Write("/>");
        }

    }
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CellFormula
    {

        private ST_CellFormulaType tField;

        private bool acaField;

        private string refField;

        private bool dt2DField;

        private bool dtrField;

        private bool del1Field;

        private bool del2Field;

        private string r1Field;

        private string r2Field;

        private bool caField;

        private uint siField;

        private bool siFieldSpecified;

        private bool bxField;

        private string valueField;

        public static CT_CellFormula Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CellFormula ctObj = new CT_CellFormula();
            if (node.Attributes["t"] != null)
                ctObj.t = (ST_CellFormulaType)Enum.Parse(typeof(ST_CellFormulaType), node.Attributes["t"].Value);
            else
                ctObj.t = ST_CellFormulaType.normal;
            ctObj.aca = XmlHelper.ReadBool(node.Attributes["aca"]);
            ctObj.@ref = XmlHelper.ReadString(node.Attributes["ref"]);
            ctObj.dt2D = XmlHelper.ReadBool(node.Attributes["dt2D"]);
            ctObj.dtr = XmlHelper.ReadBool(node.Attributes["dtr"]);
            ctObj.del1 = XmlHelper.ReadBool(node.Attributes["del1"]);
            ctObj.del2 = XmlHelper.ReadBool(node.Attributes["del2"]);
            ctObj.r1 = XmlHelper.ReadString(node.Attributes["r1"]);
            ctObj.r2 = XmlHelper.ReadString(node.Attributes["r2"]);
            ctObj.ca = XmlHelper.ReadBool(node.Attributes["ca"]);
            ctObj.si = XmlHelper.ReadUInt(node.Attributes["si"]);
            ctObj.bx = XmlHelper.ReadBool(node.Attributes["bx"]);
            ctObj.Value = node.InnerText.Replace("\r", "");
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            if (this.t != ST_CellFormulaType.normal)
                XmlHelper.WriteAttribute(sw, "t", this.t.ToString());
            XmlHelper.WriteAttribute(sw, "aca", this.aca, false);
            XmlHelper.WriteAttribute(sw, "ref", this.@ref);
            XmlHelper.WriteAttribute(sw, "dt2D", this.dt2D, false);
            XmlHelper.WriteAttribute(sw, "dtr", this.dtr, false);
            XmlHelper.WriteAttribute(sw, "del1", this.del1, false);
            XmlHelper.WriteAttribute(sw, "del2", this.del2, false);
            XmlHelper.WriteAttribute(sw, "r1", this.r1);
            XmlHelper.WriteAttribute(sw, "r2", this.r2);
            XmlHelper.WriteAttribute(sw, "ca", this.ca, false);
            if (this.t != ST_CellFormulaType.normal)
                XmlHelper.WriteAttribute(sw, "si", this.si, true);
            XmlHelper.WriteAttribute(sw, "bx", this.bx, false);
            if (!string.IsNullOrEmpty(this.valueField))
            {
                sw.Write(">");
                sw.Write(XmlHelper.EncodeXml(this.valueField).Replace("&quot;", "\""));
                sw.Write(string.Format("</{0}>", nodeName));
            }
            else
            {
                sw.Write("/>");
            }
        }
        public CT_CellFormula()
        {
            this.tField = ST_CellFormulaType.normal;
            this.acaField = false;
            this.dt2DField = false;
            this.dtrField = false;
            this.del1Field = false;
            this.del2Field = false;
            this.caField = false;
            this.bxField = false;
        }
        public bool isSetRef()
        {
            return this.refField != null;
        }
        public CT_CellFormula Copy()
        {
            CT_CellFormula obj = new CT_CellFormula();
            obj.acaField = this.acaField;
            obj.bxField = this.bxField;
            obj.caField = this.caField;
            obj.del1Field = this.del1Field;
            obj.del2Field = this.del2Field;
            obj.dt2DField = this.dt2DField;
            obj.dtrField = this.dtrField;
            obj.r1Field = this.r1Field;
            obj.r2Field = this.r2Field;
            obj.refField = this.refField;
            obj.siField = this.siField;
            obj.siFieldSpecified = this.siFieldSpecified;
            obj.tField = this.tField;
            obj.valueField = this.valueField;
            return obj;
        }
        [XmlAttribute]
        [DefaultValue(ST_CellFormulaType.normal)]
        public ST_CellFormulaType t
        {
            get
            {
                return this.tField;
            }
            set
            {
                this.tField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool aca
        {
            get
            {
                return this.acaField;
            }
            set
            {
                this.acaField = value;
            }
        }
        [XmlAttribute]
        public string @ref
        {
            get
            {
                return this.refField;
            }
            set
            {
                this.refField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool dt2D
        {
            get
            {
                return this.dt2DField;
            }
            set
            {
                this.dt2DField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool dtr
        {
            get
            {
                return this.dtrField;
            }
            set
            {
                this.dtrField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool del1
        {
            get
            {
                return this.del1Field;
            }
            set
            {
                this.del1Field = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool del2
        {
            get
            {
                return this.del2Field;
            }
            set
            {
                this.del2Field = value;
            }
        }
        [XmlAttribute]
        public string r1
        {
            get
            {
                return this.r1Field;
            }
            set
            {
                this.r1Field = value;
            }
        }
        [XmlAttribute]
        public string r2
        {
            get
            {
                return this.r2Field;
            }
            set
            {
                this.r2Field = value;
            }
        }

        [DefaultValue(false)]
        public bool ca
        {
            get
            {
                return this.caField;
            }
            set
            {
                this.caField = value;
            }
        }
        [XmlAttribute]
        public uint si
        {
            get
            {
                return this.siField;
            }
            set
            {
                this.siField = value;
            }
        }

        [XmlIgnore]
        public bool siSpecified
        {
            get
            {
                return this.siFieldSpecified;
            }
            set
            {
                this.siFieldSpecified = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool bx
        {
            get
            {
                return this.bxField;
            }
            set
            {
                this.bxField = value;
            }
        }

        [XmlText]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    public enum ST_CellFormulaType
    {
        normal,
        array,
        dataTable,
        shared,
    }
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]

    public enum ST_CellType
    {
        b,
        n,
        e,
        s,
        str,
        inlineStr,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_SheetCalcPr
    {

        private bool fullCalcOnLoadField;
        public static CT_SheetCalcPr Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SheetCalcPr ctObj = new CT_SheetCalcPr();
            ctObj.fullCalcOnLoad = XmlHelper.ReadBool(node.Attributes["fullCalcOnLoad"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "fullCalcOnLoad", this.fullCalcOnLoad);
            sw.Write("/>");
        }

        public CT_SheetCalcPr()
        {
            this.fullCalcOnLoadField = false;
        }

        [DefaultValue(false)]
        public bool fullCalcOnLoad
        {
            get
            {
                return this.fullCalcOnLoadField;
            }
            set
            {
                this.fullCalcOnLoadField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_SheetProtection
    {

        private string passwordField;

        private bool sheetField;

        private bool objectsField;

        private bool scenariosField;

        private bool formatCellsField;

        private bool formatColumnsField;

        private bool formatRowsField;

        private bool insertColumnsField;

        private bool insertRowsField;

        private bool insertHyperlinksField;

        private bool deleteColumnsField;

        private bool deleteRowsField;

        private bool selectLockedCellsField;

        private bool sortField;

        private bool autoFilterField;

        private bool pivotTablesField;

        private bool selectUnlockedCellsField;

        public CT_SheetProtection()
        {
            //this.sheetField = false;
            //this.objectsField = false;
            //this.scenariosField = false;
            this.formatCellsField = true;
            this.formatColumnsField = true;
            this.formatRowsField = true;
            this.insertColumnsField = true;
            this.insertRowsField = true;
            this.insertHyperlinksField = true;
            this.deleteColumnsField = true;
            this.deleteRowsField = true;
            this.selectLockedCellsField = false;
            this.sortField = true;
            this.autoFilterField = true;
            this.pivotTablesField = true;
            this.selectUnlockedCellsField = false;
        }
        //public bool IsSetSheet()
        //{
        //    return this.sheetField != null;
        //}

        //public bool IsSetObjects()
        //{
        //    return this.objectsField != null;
        //}
        //public bool IsSetScenarios()
        //{
        //    return this.scenariosField != null;
        //}
        public string algorithmName
        {
            get;
            set;
        }
        public string hashValue
        {
            get;
            set;
        }
        public string saltValue
        {
            get;
            set;
        }
        public string spinCount
        {
            get;
            set;
        }

        [XmlAttribute]
        public string password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool sheet
        {
            get
            {
                return this.sheetField;
            }
            set
            {
                this.sheetField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool objects
        {
            get
            {
                return this.objectsField;
            }
            set
            {
                this.objectsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool scenarios
        {
            get
            {
                return this.scenariosField;
            }
            set
            {
                this.scenariosField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool formatCells
        {
            get
            {
                return this.formatCellsField;
            }
            set
            {
                this.formatCellsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool formatColumns
        {
            get
            {
                return this.formatColumnsField;
            }
            set
            {
                this.formatColumnsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool formatRows
        {
            get
            {
                return this.formatRowsField;
            }
            set
            {
                this.formatRowsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool insertColumns
        {
            get
            {
                return this.insertColumnsField;
            }
            set
            {
                this.insertColumnsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool insertRows
        {
            get
            {
                return this.insertRowsField;
            }
            set
            {
                this.insertRowsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool insertHyperlinks
        {
            get
            {
                return this.insertHyperlinksField;
            }
            set
            {
                this.insertHyperlinksField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool deleteColumns
        {
            get
            {
                return this.deleteColumnsField;
            }
            set
            {
                this.deleteColumnsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool deleteRows
        {
            get
            {
                return this.deleteRowsField;
            }
            set
            {
                this.deleteRowsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool selectLockedCells
        {
            get
            {
                return this.selectLockedCellsField;
            }
            set
            {
                this.selectLockedCellsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool sort
        {
            get
            {
                return this.sortField;
            }
            set
            {
                this.sortField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool autoFilter
        {
            get
            {
                return this.autoFilterField;
            }
            set
            {
                this.autoFilterField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool pivotTables
        {
            get
            {
                return this.pivotTablesField;
            }
            set
            {
                this.pivotTablesField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool selectUnlockedCells
        {
            get
            {
                return this.selectUnlockedCellsField;
            }
            set
            {
                this.selectUnlockedCellsField = value;
            }
        }
        // default value of CT_SheetProtection BOOLEAN attribute, see OfficeOpenXML-XMLSchema\sml-sheet.xsd
        // | attribute           | default value |
        // |---------------------|---------------|
        // | sheet               |    false      |
        // | objects             |    false      |
        // | scenarios           |    false      |
        // | formatCells         |    true       |
        // | formatColumns       |    true       |
        // | formatRows          |    true       |
        // | insertColumns       |    true       |
        // | insertHyperlinks    |    true       |
        // | deleteColumns       |    true       |
        // | deleteRows          |    true       |
        // | selectLockedCells   |    false      |
        // | sort                |    true       |
        // | autoFilter          |    true       |
        // | pivotTables         |    true       |
        // | selectUnlockedCells |    false      |
        public static CT_SheetProtection Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SheetProtection ctObj = new CT_SheetProtection();
            ctObj.password = XmlHelper.ReadString(node.Attributes["password"]);
            ctObj.sheet = XmlHelper.ReadBool(node.Attributes["sheet"]);
            ctObj.objects = XmlHelper.ReadBool(node.Attributes["objects"]);
            ctObj.scenarios = XmlHelper.ReadBool(node.Attributes["scenarios"]);
            ctObj.formatCells = XmlHelper.ReadBool(node.Attributes["formatCells"], true);
            ctObj.formatColumns = XmlHelper.ReadBool(node.Attributes["formatColumns"], true);
            ctObj.formatRows = XmlHelper.ReadBool(node.Attributes["formatRows"], true);
            ctObj.insertColumns = XmlHelper.ReadBool(node.Attributes["insertColumns"], true);
            ctObj.insertRows = XmlHelper.ReadBool(node.Attributes["insertRows"], true);
            ctObj.insertHyperlinks = XmlHelper.ReadBool(node.Attributes["insertHyperlinks"], true);
            ctObj.deleteColumns = XmlHelper.ReadBool(node.Attributes["deleteColumns"], true);
            ctObj.deleteRows = XmlHelper.ReadBool(node.Attributes["deleteRows"], true);
            ctObj.selectLockedCells = XmlHelper.ReadBool(node.Attributes["selectLockedCells"]);
            ctObj.sort = XmlHelper.ReadBool(node.Attributes["sort"], true);
            ctObj.autoFilter = XmlHelper.ReadBool(node.Attributes["autoFilter"], true);
            ctObj.pivotTables = XmlHelper.ReadBool(node.Attributes["pivotTables"], true);
            ctObj.selectUnlockedCells = XmlHelper.ReadBool(node.Attributes["selectUnlockedCells"]);
            ctObj.algorithmName = XmlHelper.ReadString(node.Attributes["algorithmName"]);
            if (ctObj.algorithmName != null)
            {
                ctObj.hashValue = XmlHelper.ReadString(node.Attributes["hashValue"]);
                ctObj.saltValue = XmlHelper.ReadString(node.Attributes["saltValue"]);
                ctObj.spinCount = XmlHelper.ReadString(node.Attributes["spinCount"]);
            }
            return ctObj;
        }

        internal bool IsSetObjects()
        {
            return objects;
        }

        internal bool IsSetScenarios()
        {
            return scenarios;
        }

        internal bool IsSetSheet()
        {
            return sheet;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            if (this.algorithmName != null)
            {
                XmlHelper.WriteAttribute(sw, "algorithmName", this.algorithmName);
                XmlHelper.WriteAttribute(sw, "hashValue", this.hashValue);
                XmlHelper.WriteAttribute(sw, "saltValue", this.saltValue);
                XmlHelper.WriteAttribute(sw, "spinCount", this.spinCount);
            }

            XmlHelper.WriteAttribute(sw, "password", this.password);
            XmlHelper.WriteAttribute(sw, "sheet", this.sheet);
            XmlHelper.WriteAttribute(sw, "objects", this.objects);
            XmlHelper.WriteAttribute(sw, "scenarios", this.scenarios);
            if (!formatCells)
                XmlHelper.WriteAttribute(sw, "formatCells", this.formatCells);
            if (!formatColumns)
                XmlHelper.WriteAttribute(sw, "formatColumns", this.formatColumns);
            if (!formatRows)
                XmlHelper.WriteAttribute(sw, "formatRows", this.formatRows);
            if (!insertColumns)
                XmlHelper.WriteAttribute(sw, "insertColumns", this.insertColumns);
            if (!insertRows)
                XmlHelper.WriteAttribute(sw, "insertRows", this.insertRows);
            if (!insertHyperlinks)
                XmlHelper.WriteAttribute(sw, "insertHyperlinks", this.insertHyperlinks);
            if (!deleteColumns)
                XmlHelper.WriteAttribute(sw, "deleteColumns", this.deleteColumns);
            if (!deleteRows)
                XmlHelper.WriteAttribute(sw, "deleteRows", this.deleteRows);
            XmlHelper.WriteAttribute(sw, "selectLockedCells", this.selectLockedCells, false);
            if (!sort)
                XmlHelper.WriteAttribute(sw, "sort", this.sort);
            if (!autoFilter)
                XmlHelper.WriteAttribute(sw, "autoFilter", this.autoFilter);
            if (!pivotTables)
                XmlHelper.WriteAttribute(sw, "pivotTables", this.pivotTables);
            XmlHelper.WriteAttribute(sw, "selectUnlockedCells", this.selectUnlockedCells, false);
            sw.Write("/>");
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_ProtectedRange
    {

        private byte[] passwordField;

        private string sqrefField;

        private string nameField;

        private string securityDescriptorField;
        public static CT_ProtectedRange Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ProtectedRange ctObj = new CT_ProtectedRange();
            ctObj.password = XmlHelper.ReadBytes(node.Attributes["password"]);
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            ctObj.securityDescriptor = XmlHelper.ReadString(node.Attributes["securityDescriptor"]);
            ctObj.sqref = XmlHelper.ReadString(node.Attributes["sqref"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "password", this.password);
            XmlHelper.WriteAttribute(sw, "name", this.name);
            XmlHelper.WriteAttribute(sw, "securityDescriptor", this.securityDescriptor);
            if (this.sqref != null)
                XmlHelper.WriteAttribute(sw, "sqref", XmlHelper.EncodeXml(this.sqref));
            sw.Write("/>");
        }

        public CT_ProtectedRange()
        {
            //this.sqrefField = new List<string>();
        }

        public byte[] password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }

        public string sqref
        {
            get
            {
                return this.sqrefField;
            }
            set
            {
                this.sqrefField = value;
            }
        }

        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        public string securityDescriptor
        {
            get
            {
                return this.securityDescriptorField;
            }
            set
            {
                this.securityDescriptorField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Scenarios
    {

        private List<CT_Scenario> scenarioField;

        private uint currentField;

        private bool currentFieldSpecified;

        private uint showField;

        private bool showFieldSpecified;

        private string sqrefField;

        public CT_Scenarios()
        {
            //this.sqrefField = new List<string>();
            //this.scenarioField = new List<CT_Scenario>();
        }
        public static CT_Scenarios Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Scenarios ctObj = new CT_Scenarios();
            ctObj.current = XmlHelper.ReadUInt(node.Attributes["current"]);
            ctObj.show = XmlHelper.ReadUInt(node.Attributes["show"]);
            ctObj.scenario = new List<CT_Scenario>();
            ctObj.sqref = XmlHelper.ReadString(node.Attributes["sqref"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "scenario")
                    ctObj.scenario.Add(CT_Scenario.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "current", this.current);
            XmlHelper.WriteAttribute(sw, "show", this.show);
            XmlHelper.WriteAttribute(sw, "sqref", this.sqref);
            sw.Write(">");
            if (this.scenario != null)
            {
                foreach (CT_Scenario x in this.scenario)
                {
                    x.Write(sw, "scenario");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }
        [XmlElement]
        public List<CT_Scenario> scenario
        {
            get
            {
                return this.scenarioField;
            }
            set
            {
                this.scenarioField = value;
            }
        }
        [XmlAttribute]
        public uint current
        {
            get
            {
                return this.currentField;
            }
            set
            {
                this.currentField = value;
            }
        }

        [XmlIgnore]
        public bool currentSpecified
        {
            get
            {
                return this.currentFieldSpecified;
            }
            set
            {
                this.currentFieldSpecified = value;
            }
        }
        [XmlAttribute]
        public uint show
        {
            get
            {
                return this.showField;
            }
            set
            {
                this.showField = value;
            }
        }

        [XmlIgnore]
        public bool showSpecified
        {
            get
            {
                return this.showFieldSpecified;
            }
            set
            {
                this.showFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public string sqref
        {
            get
            {
                return this.sqrefField;
            }
            set
            {
                this.sqrefField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Scenario
    {

        private List<CT_InputCells> inputCellsField;

        private string nameField;

        private bool lockedField;

        private bool hiddenField;

        private uint countField;

        private bool countFieldSpecified;

        private string userField;

        private string commentField;

        public CT_Scenario()
        {
            //this.inputCellsField = new List<CT_InputCells>();
            this.lockedField = false;
            this.hiddenField = false;
        }

        public List<CT_InputCells> inputCells
        {
            get
            {
                return this.inputCellsField;
            }
            set
            {
                this.inputCellsField = value;
            }
        }

        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [DefaultValue(false)]
        public bool locked
        {
            get
            {
                return this.lockedField;
            }
            set
            {
                this.lockedField = value;
            }
        }

        [DefaultValue(false)]
        public bool hidden
        {
            get
            {
                return this.hiddenField;
            }
            set
            {
                this.hiddenField = value;
            }
        }

        public uint count
        {
            get
            {
                return this.countField;
            }
            set
            {
                this.countField = value;
            }
        }

        [XmlIgnore]
        public bool countSpecified
        {
            get
            {
                return this.countFieldSpecified;
            }
            set
            {
                this.countFieldSpecified = value;
            }
        }

        public string user
        {
            get
            {
                return this.userField;
            }
            set
            {
                this.userField = value;
            }
        }

        public string comment
        {
            get
            {
                return this.commentField;
            }
            set
            {
                this.commentField = value;
            }
        }

        public static CT_Scenario Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Scenario ctObj = new CT_Scenario();
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            ctObj.locked = XmlHelper.ReadBool(node.Attributes["locked"]);
            ctObj.hidden = XmlHelper.ReadBool(node.Attributes["hidden"]);
            ctObj.count = XmlHelper.ReadUInt(node.Attributes["count"]);
            ctObj.user = XmlHelper.ReadString(node.Attributes["user"]);
            ctObj.comment = XmlHelper.ReadString(node.Attributes["comment"]);
            ctObj.inputCells = new List<CT_InputCells>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "inputCells")
                    ctObj.inputCells.Add(CT_InputCells.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "name", this.name);
            XmlHelper.WriteAttribute(sw, "locked", this.locked);
            XmlHelper.WriteAttribute(sw, "hidden", this.hidden);
            XmlHelper.WriteAttribute(sw, "count", this.count);
            XmlHelper.WriteAttribute(sw, "user", this.user);
            XmlHelper.WriteAttribute(sw, "comment", this.comment);
            if (this.inputCells != null)
            {
                sw.Write(">");
                foreach (CT_InputCells x in this.inputCells)
                {
                    x.Write(sw, "inputCells");
                }
                sw.Write(string.Format("</{0}>", nodeName));
            }
            else
            {
                sw.Write("/>");
            }
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_InputCells
    {

        private string rField;

        private bool deletedField;

        private bool undoneField;

        private string valField;

        private uint numFmtIdField;

        private bool numFmtIdFieldSpecified;

        public CT_InputCells()
        {
            this.deletedField = false;
            this.undoneField = false;
        }

        public string r
        {
            get
            {
                return this.rField;
            }
            set
            {
                this.rField = value;
            }
        }

        [DefaultValue(false)]
        public bool deleted
        {
            get
            {
                return this.deletedField;
            }
            set
            {
                this.deletedField = value;
            }
        }

        [DefaultValue(false)]
        public bool undone
        {
            get
            {
                return this.undoneField;
            }
            set
            {
                this.undoneField = value;
            }
        }

        public string val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }

        public uint numFmtId
        {
            get
            {
                return this.numFmtIdField;
            }
            set
            {
                this.numFmtIdField = value;
            }
        }

        public static CT_InputCells Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_InputCells ctObj = new CT_InputCells();
            ctObj.r = XmlHelper.ReadString(node.Attributes["r"]);
            ctObj.deleted = XmlHelper.ReadBool(node.Attributes["deleted"]);
            ctObj.undone = XmlHelper.ReadBool(node.Attributes["undone"]);
            ctObj.val = XmlHelper.ReadString(node.Attributes["val"]);
            ctObj.numFmtId = XmlHelper.ReadUInt(node.Attributes["numFmtId"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "r", this.r);
            XmlHelper.WriteAttribute(sw, "deleted", this.deleted);
            XmlHelper.WriteAttribute(sw, "undone", this.undone);
            XmlHelper.WriteAttribute(sw, "val", this.val);
            XmlHelper.WriteAttribute(sw, "numFmtId", this.numFmtId, true);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_DataConsolidate
    {

        private CT_DataRefs dataRefsField;

        private ST_DataConsolidateFunction functionField;

        private bool leftLabelsField;

        private bool topLabelsField;

        private bool linkField;

        public CT_DataConsolidate()
        {
            this.dataRefsField = new CT_DataRefs();
            this.functionField = ST_DataConsolidateFunction.sum;
            this.leftLabelsField = false;
            this.topLabelsField = false;
            this.linkField = false;
        }

        public CT_DataRefs dataRefs
        {
            get
            {
                return this.dataRefsField;
            }
            set
            {
                this.dataRefsField = value;
            }
        }

        [DefaultValue(ST_DataConsolidateFunction.sum)]
        public ST_DataConsolidateFunction function
        {
            get
            {
                return this.functionField;
            }
            set
            {
                this.functionField = value;
            }
        }

        [DefaultValue(false)]
        public bool leftLabels
        {
            get
            {
                return this.leftLabelsField;
            }
            set
            {
                this.leftLabelsField = value;
            }
        }

        [DefaultValue(false)]
        public bool topLabels
        {
            get
            {
                return this.topLabelsField;
            }
            set
            {
                this.topLabelsField = value;
            }
        }

        [DefaultValue(false)]
        public bool link
        {
            get
            {
                return this.linkField;
            }
            set
            {
                this.linkField = value;
            }
        }

        public static CT_DataConsolidate Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DataConsolidate ctObj = new CT_DataConsolidate();
            if (node.Attributes["function"] != null)
                ctObj.function = (ST_DataConsolidateFunction)Enum.Parse(typeof(ST_DataConsolidateFunction), node.Attributes["function"].Value);
            ctObj.leftLabels = XmlHelper.ReadBool(node.Attributes["leftLabels"]);
            ctObj.topLabels = XmlHelper.ReadBool(node.Attributes["topLabels"]);
            ctObj.link = XmlHelper.ReadBool(node.Attributes["link"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "dataRefs")
                    ctObj.dataRefs = CT_DataRefs.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "function", this.function.ToString());
            XmlHelper.WriteAttribute(sw, "leftLabels", this.leftLabels);
            XmlHelper.WriteAttribute(sw, "topLabels", this.topLabels);
            XmlHelper.WriteAttribute(sw, "link", this.link);
            sw.Write(">");
            if (this.dataRefs != null)
                this.dataRefs.Write(sw, "dataRefs");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_DataRefs
    {

        private List<CT_DataRef> dataRefField;

        private uint countField;

        private bool countFieldSpecified;

        public CT_DataRefs()
        {
            this.dataRefField = new List<CT_DataRef>();
        }

        public List<CT_DataRef> dataRef
        {
            get
            {
                return this.dataRefField;
            }
            set
            {
                this.dataRefField = value;
            }
        }

        public uint count
        {
            get
            {
                return this.countField;
            }
            set
            {
                this.countField = value;
            }
        }

        [XmlIgnore]
        public bool countSpecified
        {
            get
            {
                return this.countFieldSpecified;
            }
            set
            {
                this.countFieldSpecified = value;
            }
        }

        public static CT_DataRefs Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DataRefs ctObj = new CT_DataRefs();
            ctObj.count = XmlHelper.ReadUInt(node.Attributes["count"]);
            ctObj.dataRef = new List<CT_DataRef>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "dataRef")
                    ctObj.dataRef.Add(CT_DataRef.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "count", this.count);
            sw.Write(">");
            if (this.dataRef != null)
            {
                foreach (CT_DataRef x in this.dataRef)
                {
                    x.Write(sw, "dataRef");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_DataRef
    {

        private string refField;

        private string nameField;

        private string sheetField;

        private string idField;

        public string @ref
        {
            get
            {
                return this.refField;
            }
            set
            {
                this.refField = value;
            }
        }

        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        public string sheet
        {
            get
            {
                return this.sheetField;
            }
            set
            {
                this.sheetField = value;
            }
        }

        // TODO is the following correct?
        [XmlAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        public static CT_DataRef Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DataRef ctObj = new CT_DataRef();
            ctObj.@ref = XmlHelper.ReadString(node.Attributes["ref"]);
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            ctObj.sheet = XmlHelper.ReadString(node.Attributes["sheet"]);
            ctObj.id = XmlHelper.ReadString(node.Attributes["id", PackageNamespaces.SCHEMA_RELATIONSHIPS]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "ref", this.@ref);
            XmlHelper.WriteAttribute(sw, "name", this.name);
            XmlHelper.WriteAttribute(sw, "sheet", this.sheet);
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType("customSheetView", Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CustomSheetView
    {
        // all elementes are optional

        private CT_Pane paneField = null;

        private CT_Selection selectionField = null;

        private CT_PageBreak rowBreaksField = null;

        private CT_PageBreak colBreaksField = null;

        private CT_PageMargins pageMarginsField = null;

        private CT_PrintOptions printOptionsField = null;

        private CT_PageSetup pageSetupField = null;

        private CT_HeaderFooter headerFooterField = null;

        private CT_AutoFilter autoFilterField = null;

        private CT_ExtensionList extLstField = null;

        // these are optional attributes except guid - TODO make them optional

        private string guidField = string.Empty; // 1..1

        private uint scaleField;

        private uint colorIdField;

        private bool showPageBreaksField;

        private bool showFormulasField;

        private bool showGridLinesField;

        private bool showRowColField;

        private bool outlineSymbolsField;

        private bool zeroValuesField;

        private bool fitToPageField;

        private bool printAreaField;

        private bool filterField;

        private bool showAutoFilterField;

        private bool hiddenRowsField;

        private bool hiddenColumnsField;

        private ST_SheetState stateField;

        private bool filterUniqueField;

        private ST_SheetViewType viewField;

        private bool showRulerField;

        private string topLeftCellField;

        //public CT_CustomSheetView()
        //{

        //    this.extLstField = new CT_ExtensionList();
        //    this.autoFilterField = new CT_AutoFilter();
        //    this.headerFooterField = new CT_HeaderFooter();
        //    this.pageSetupField = new CT_PageSetup();
        //    this.printOptionsField = new CT_PrintOptions();
        //    this.pageMarginsField = new CT_PageMargins();
        //    this.colBreaksField = new CT_PageBreak();
        //    this.rowBreaksField = new CT_PageBreak();
        //    this.selectionField = new CT_Selection();
        //    this.paneField = new CT_Pane();
        //    this.scaleField = ((uint)(100));
        //    this.colorIdField = ((uint)(64));
        //    this.showPageBreaksField = false;
        //    this.showFormulasField = false;
        //    this.showGridLinesField = true;
        //    this.showRowColField = true;
        //    this.outlineSymbolsField = true;
        //    this.zeroValuesField = true;
        //    this.fitToPageField = false;
        //    this.printAreaField = false;
        //    this.filterField = false;
        //    this.showAutoFilterField = false;
        //    this.hiddenRowsField = false;
        //    this.hiddenColumnsField = false;
        //    this.stateField = ST_SheetState.visible;
        //    this.filterUniqueField = false;
        //    this.viewField = ST_SheetViewType.normal;
        //    this.showRulerField = true;
        //}

        public CT_Pane pane
        {
            get
            {
                return this.paneField;
            }
            set
            {
                this.paneField = value;
            }
        }

        public CT_Selection selection
        {
            get
            {
                return this.selectionField;
            }
            set
            {
                this.selectionField = value;
            }
        }

        public CT_PageBreak rowBreaks
        {
            get
            {
                return this.rowBreaksField;
            }
            set
            {
                this.rowBreaksField = value;
            }
        }

        public CT_PageBreak colBreaks
        {
            get
            {
                return this.colBreaksField;
            }
            set
            {
                this.colBreaksField = value;
            }
        }

        public CT_PageMargins pageMargins
        {
            get
            {
                return this.pageMarginsField;
            }
            set
            {
                this.pageMarginsField = value;
            }
        }

        public CT_PrintOptions printOptions
        {
            get
            {
                return this.printOptionsField;
            }
            set
            {
                this.printOptionsField = value;
            }
        }

        public CT_PageSetup pageSetup
        {
            get
            {
                return this.pageSetupField;
            }
            set
            {
                this.pageSetupField = value;
            }
        }

        public CT_HeaderFooter headerFooter
        {
            get
            {
                return this.headerFooterField;
            }
            set
            {
                this.headerFooterField = value;
            }
        }

        public CT_AutoFilter autoFilter
        {
            get
            {
                return this.autoFilterField;
            }
            set
            {
                this.autoFilterField = value;
            }
        }

        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public string guid
        {
            get
            {
                return this.guidField;
            }
            set
            {
                this.guidField = value;
            }
        }

        [DefaultValue(typeof(uint), "100")]
        public uint scale
        {
            get
            {
                return this.scaleField;
            }
            set
            {
                this.scaleField = value;
            }
        }

        [DefaultValue(typeof(uint), "64")]
        public uint colorId
        {
            get
            {
                return this.colorIdField;
            }
            set
            {
                this.colorIdField = value;
            }
        }

        [DefaultValue(false)]
        public bool showPageBreaks
        {
            get
            {
                return this.showPageBreaksField;
            }
            set
            {
                this.showPageBreaksField = value;
            }
        }

        [DefaultValue(false)]
        public bool showFormulas
        {
            get
            {
                return this.showFormulasField;
            }
            set
            {
                this.showFormulasField = value;
            }
        }

        [DefaultValue(true)]
        public bool showGridLines
        {
            get
            {
                return this.showGridLinesField;
            }
            set
            {
                this.showGridLinesField = value;
            }
        }

        [DefaultValue(true)]
        public bool showRowCol
        {
            get
            {
                return this.showRowColField;
            }
            set
            {
                this.showRowColField = value;
            }
        }

        [DefaultValue(true)]
        public bool outlineSymbols
        {
            get
            {
                return this.outlineSymbolsField;
            }
            set
            {
                this.outlineSymbolsField = value;
            }
        }

        [DefaultValue(true)]
        public bool zeroValues
        {
            get
            {
                return this.zeroValuesField;
            }
            set
            {
                this.zeroValuesField = value;
            }
        }

        [DefaultValue(false)]
        public bool fitToPage
        {
            get
            {
                return this.fitToPageField;
            }
            set
            {
                this.fitToPageField = value;
            }
        }

        [DefaultValue(false)]
        public bool printArea
        {
            get
            {
                return this.printAreaField;
            }
            set
            {
                this.printAreaField = value;
            }
        }

        [DefaultValue(false)]
        public bool filter
        {
            get
            {
                return this.filterField;
            }
            set
            {
                this.filterField = value;
            }
        }

        [DefaultValue(false)]
        public bool showAutoFilter
        {
            get
            {
                return this.showAutoFilterField;
            }
            set
            {
                this.showAutoFilterField = value;
            }
        }

        [DefaultValue(false)]
        public bool hiddenRows
        {
            get
            {
                return this.hiddenRowsField;
            }
            set
            {
                this.hiddenRowsField = value;
            }
        }

        [DefaultValue(false)]
        public bool hiddenColumns
        {
            get
            {
                return this.hiddenColumnsField;
            }
            set
            {
                this.hiddenColumnsField = value;
            }
        }

        [DefaultValue(ST_SheetState.visible)]
        public ST_SheetState state
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

        [DefaultValue(false)]
        public bool filterUnique
        {
            get
            {
                return this.filterUniqueField;
            }
            set
            {
                this.filterUniqueField = value;
            }
        }

        [DefaultValue(ST_SheetViewType.normal)]
        public ST_SheetViewType view
        {
            get
            {
                return this.viewField;
            }
            set
            {
                this.viewField = value;
            }
        }

        [DefaultValue(true)]
        public bool showRuler
        {
            get
            {
                return this.showRulerField;
            }
            set
            {
                this.showRulerField = value;
            }
        }

        public string topLeftCell
        {
            get
            {
                return this.topLeftCellField;
            }
            set
            {
                this.topLeftCellField = value;
            }
        }

        public static CT_CustomSheetView Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CustomSheetView ctObj = new CT_CustomSheetView();
            ctObj.guid = XmlHelper.ReadString(node.Attributes["guid"]);
            ctObj.scale = XmlHelper.ReadUInt(node.Attributes["scale"]);
            ctObj.colorId = XmlHelper.ReadUInt(node.Attributes["colorId"]);
            ctObj.showPageBreaks = XmlHelper.ReadBool(node.Attributes["showPageBreaks"]);
            ctObj.showFormulas = XmlHelper.ReadBool(node.Attributes["showFormulas"]);
            if (node.Attributes["showGridLines"] == null)
                ctObj.showGridLines = true;
            else
                ctObj.showGridLines = XmlHelper.ReadBool(node.Attributes["showGridLines"]);

            ctObj.showRowCol = XmlHelper.ReadBool(node.Attributes["showRowCol"]);
            ctObj.outlineSymbols = XmlHelper.ReadBool(node.Attributes["outlineSymbols"]);
            ctObj.zeroValues = XmlHelper.ReadBool(node.Attributes["zeroValues"]);
            ctObj.fitToPage = XmlHelper.ReadBool(node.Attributes["fitToPage"]);
            ctObj.printArea = XmlHelper.ReadBool(node.Attributes["printArea"]);
            ctObj.filter = XmlHelper.ReadBool(node.Attributes["filter"]);
            ctObj.showAutoFilter = XmlHelper.ReadBool(node.Attributes["showAutoFilter"]);
            ctObj.hiddenRows = XmlHelper.ReadBool(node.Attributes["hiddenRows"]);
            ctObj.hiddenColumns = XmlHelper.ReadBool(node.Attributes["hiddenColumns"]);
            if (node.Attributes["state"] != null)
                ctObj.state = (ST_SheetState)Enum.Parse(typeof(ST_SheetState), node.Attributes["state"].Value);
            ctObj.filterUnique = XmlHelper.ReadBool(node.Attributes["filterUnique"]);
            if (node.Attributes["view"] != null)
                ctObj.view = (ST_SheetViewType)Enum.Parse(typeof(ST_SheetViewType), node.Attributes["view"].Value);
            ctObj.showRuler = XmlHelper.ReadBool(node.Attributes["showRuler"]);
            ctObj.topLeftCell = XmlHelper.ReadString(node.Attributes["topLeftCell"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "pane")
                    ctObj.pane = CT_Pane.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "selection")
                    ctObj.selection = CT_Selection.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "rowBreaks")
                    ctObj.rowBreaks = CT_PageBreak.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "colBreaks")
                    ctObj.colBreaks = CT_PageBreak.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pageMargins")
                    ctObj.pageMargins = CT_PageMargins.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "printOptions")
                    ctObj.printOptions = CT_PrintOptions.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pageSetup")
                    ctObj.pageSetup = CT_PageSetup.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "headerFooter")
                    ctObj.headerFooter = CT_HeaderFooter.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "autoFilter")
                    ctObj.autoFilter = CT_AutoFilter.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "guid", this.guid);
            XmlHelper.WriteAttribute(sw, "scale", this.scale);
            XmlHelper.WriteAttribute(sw, "colorId", this.colorId);
            XmlHelper.WriteAttribute(sw, "showPageBreaks", this.showPageBreaks, false);
            XmlHelper.WriteAttribute(sw, "showFormulas", this.showFormulas, false);
            XmlHelper.WriteAttribute(sw, "showGridLines", this.showGridLines, false);
            XmlHelper.WriteAttribute(sw, "showRowCol", this.showRowCol, false);
            XmlHelper.WriteAttribute(sw, "outlineSymbols", this.outlineSymbols);
            XmlHelper.WriteAttribute(sw, "zeroValues", this.zeroValues);
            XmlHelper.WriteAttribute(sw, "fitToPage", this.fitToPage, false);
            XmlHelper.WriteAttribute(sw, "printArea", this.printArea, false);
            XmlHelper.WriteAttribute(sw, "filter", this.filter, false);
            XmlHelper.WriteAttribute(sw, "showAutoFilter", this.showAutoFilter, false);
            XmlHelper.WriteAttribute(sw, "hiddenRows", this.hiddenRows, false);
            XmlHelper.WriteAttribute(sw, "hiddenColumns", this.hiddenColumns, false);
            XmlHelper.WriteAttribute(sw, "state", this.state.ToString());
            XmlHelper.WriteAttribute(sw, "filterUnique", this.filterUnique, false);
            XmlHelper.WriteAttribute(sw, "view", this.view.ToString());
            XmlHelper.WriteAttribute(sw, "showRuler", this.showRuler, false);
            XmlHelper.WriteAttribute(sw, "topLeftCell", this.topLeftCell);
            sw.Write(">");
            if (this.pane != null)
                this.pane.Write(sw, "pane");
            if (this.selection != null)
                this.selection.Write(sw, "selection");
            if (this.rowBreaks != null)
                this.rowBreaks.Write(sw, "rowBreaks");
            if (this.colBreaks != null)
                this.colBreaks.Write(sw, "colBreaks");
            if (this.pageMargins != null)
                this.pageMargins.Write(sw, "pageMargins");
            if (this.printOptions != null)
                this.printOptions.Write(sw, "printOptions");
            if (this.pageSetup != null)
                this.pageSetup.Write(sw, "pageSetup");
            if (this.headerFooter != null)
                this.headerFooter.Write(sw, "headerFooter");
            if (this.autoFilter != null)
                this.autoFilter.Write(sw, "autoFilter");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_PageBreak
    {

        private List<CT_Break> brkField;

        private uint countField;

        private uint manualBreakCountField;

        public CT_PageBreak()
        {
            this.brkField = new List<CT_Break>();
            this.countField = ((uint)(0));
            this.manualBreakCountField = ((uint)(0));
        }

        public int sizeOfBrkArray()
        {
            return this.brkField.Count;
        }
        public CT_Break AddNewBrk()
        {
            CT_Break newbreak = new CT_Break();
            this.brkField.Add(newbreak);
            return newbreak;
        }
        public void RemoveBrk(int index)
        {
            this.brkField.RemoveAt(index);
        }

        public List<CT_Break> brk
        {
            get
            {
                return this.brkField;
            }
            set
            {
                this.brkField = value;
            }
        }

        [DefaultValue(typeof(uint), "0")]
        public uint count
        {
            get
            {
                return this.countField;
            }
            set
            {
                this.countField = value;
            }
        }

        [DefaultValue(typeof(uint), "0")]
        public uint manualBreakCount
        {
            get
            {
                return this.manualBreakCountField;
            }
            set
            {
                this.manualBreakCountField = value;
            }
        }

        public static CT_PageBreak Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PageBreak ctObj = new CT_PageBreak();
            ctObj.count = XmlHelper.ReadUInt(node.Attributes["count"]);
            ctObj.manualBreakCount = XmlHelper.ReadUInt(node.Attributes["manualBreakCount"]);
            ctObj.brk = new List<CT_Break>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "brk")
                    ctObj.brk.Add(CT_Break.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "count", this.count);
            XmlHelper.WriteAttribute(sw, "manualBreakCount", this.manualBreakCount);
            sw.Write(">");
            if (this.brk != null)
            {
                foreach (CT_Break x in this.brk)
                {
                    x.Write(sw, "brk");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Break
    {

        private uint idField;

        private uint minField;

        private uint maxField;

        private bool manField;

        private bool ptField;

        public CT_Break()
        {
            this.idField = ((uint)(0));
            this.minField = ((uint)(0));
            this.maxField = ((uint)(0));
            this.manField = false;
            this.ptField = false;
        }

        [DefaultValue(typeof(uint), "0")]
        public uint id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        [DefaultValue(typeof(uint), "0")]
        public uint min
        {
            get
            {
                return this.minField;
            }
            set
            {
                this.minField = value;
            }
        }

        [DefaultValue(typeof(uint), "0")]
        public uint max
        {
            get
            {
                return this.maxField;
            }
            set
            {
                this.maxField = value;
            }
        }

        [DefaultValue(false)]
        public bool man
        {
            get
            {
                return this.manField;
            }
            set
            {
                this.manField = value;
            }
        }

        [DefaultValue(false)]
        public bool pt
        {
            get
            {
                return this.ptField;
            }
            set
            {
                this.ptField = value;
            }
        }

        public static CT_Break Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Break ctObj = new CT_Break();
            ctObj.id = XmlHelper.ReadUInt(node.Attributes["id"]);
            ctObj.min = XmlHelper.ReadUInt(node.Attributes["min"]);
            ctObj.max = XmlHelper.ReadUInt(node.Attributes["max"]);
            ctObj.man = XmlHelper.ReadBool(node.Attributes["man"]);
            ctObj.pt = XmlHelper.ReadBool(node.Attributes["pt"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "id", this.id);
            XmlHelper.WriteAttribute(sw, "min", this.min);
            XmlHelper.WriteAttribute(sw, "max", this.max);
            XmlHelper.WriteAttribute(sw, "man", this.man);
            XmlHelper.WriteAttribute(sw, "pt", this.pt);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_PageMargins
    {
        private double leftField = 0.0;

        private double rightField = 0.0;

        private double topField = 0.0;

        private double bottomField = 0.0;

        private double headerField = 0.0;

        private double footerField = 0.0;

        [XmlAttribute]
        public double left
        {
            get
            {
                return this.leftField;
            }
            set
            {
                this.leftField = value;
            }
        }
        [XmlAttribute]
        public double right
        {
            get
            {
                return this.rightField;
            }
            set
            {
                this.rightField = value;
            }
        }
        [XmlAttribute]
        public double top
        {
            get
            {
                return this.topField;
            }
            set
            {
                this.topField = value;
            }
        }
        [XmlAttribute]
        public double bottom
        {
            get
            {
                return this.bottomField;
            }
            set
            {
                this.bottomField = value;
            }
        }
        [XmlAttribute]
        public double header
        {
            get
            {
                return this.headerField;
            }
            set
            {
                this.headerField = value;
            }
        }
        [XmlAttribute]
        public double footer
        {
            get
            {
                return this.footerField;
            }
            set
            {
                this.footerField = value;
            }
        }

        public static CT_PageMargins Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PageMargins ctObj = new CT_PageMargins();
            ctObj.left = XmlHelper.ReadDouble(node.Attributes["left"]);
            ctObj.right = XmlHelper.ReadDouble(node.Attributes["right"]);
            ctObj.top = XmlHelper.ReadDouble(node.Attributes["top"]);
            ctObj.bottom = XmlHelper.ReadDouble(node.Attributes["bottom"]);
            ctObj.header = XmlHelper.ReadDouble(node.Attributes["header"]);
            ctObj.footer = XmlHelper.ReadDouble(node.Attributes["footer"]);
            return ctObj;
        }
        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "left", this.left, true);
            XmlHelper.WriteAttribute(sw, "right", this.right, true);
            XmlHelper.WriteAttribute(sw, "top", this.top, true);
            XmlHelper.WriteAttribute(sw, "bottom", this.bottom, true);
            XmlHelper.WriteAttribute(sw, "header", this.header, true);
            XmlHelper.WriteAttribute(sw, "footer", this.footer, true);
            sw.Write("/>");
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_PrintOptions
    {

        private bool horizontalCenteredField;

        private bool verticalCenteredField;

        private bool headingsField;

        private bool gridLinesField;

        private bool gridLinesSetField;
        public static CT_PrintOptions Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PrintOptions ctObj = new CT_PrintOptions();
            ctObj.horizontalCentered = XmlHelper.ReadBool(node.Attributes["horizontalCentered"]);
            ctObj.verticalCentered = XmlHelper.ReadBool(node.Attributes["verticalCentered"]);
            ctObj.headings = XmlHelper.ReadBool(node.Attributes["headings"]);
            ctObj.gridLines = XmlHelper.ReadBool(node.Attributes["gridLines"]);
            ctObj.gridLinesSet = XmlHelper.ReadBool(node.Attributes["gridLinesSet"], true);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "horizontalCentered", this.horizontalCentered);
            XmlHelper.WriteAttribute(sw, "verticalCentered", this.verticalCentered);
            XmlHelper.WriteAttribute(sw, "headings", this.headings, false);
            XmlHelper.WriteAttribute(sw, "gridLines", this.gridLines, false);
            if (!gridLinesSet)
                XmlHelper.WriteAttribute(sw, "gridLinesSet", this.gridLinesSet);
            sw.Write("/>");
        }

        public CT_PrintOptions()
        {
            this.horizontalCenteredField = false;
            this.verticalCenteredField = false;
            this.headingsField = false;
            this.gridLinesField = false;
            this.gridLinesSetField = true;
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool horizontalCentered
        {
            get
            {
                return this.horizontalCenteredField;
            }
            set
            {
                this.horizontalCenteredField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool verticalCentered
        {
            get
            {
                return this.verticalCenteredField;
            }
            set
            {
                this.verticalCenteredField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool headings
        {
            get
            {
                return this.headingsField;
            }
            set
            {
                this.headingsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool gridLines
        {
            get
            {
                return this.gridLinesField;
            }
            set
            {
                this.gridLinesField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool gridLinesSet
        {
            get
            {
                return this.gridLinesSetField;
            }
            set
            {
                this.gridLinesSetField = value;
            }
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_PageSetup
    {

        private uint paperSizeField;

        private uint scaleField;

        private uint firstPageNumberField;

        private uint fitToWidthField;

        private uint fitToHeightField;

        private ST_PageOrder pageOrderField;

        private ST_Orientation orientationField;

        private bool usePrinterDefaultsField;

        private bool blackAndWhiteField;

        private bool draftField;

        private ST_CellComments cellCommentsField;

        private bool useFirstPageNumberField;

        private ST_PrintError errorsField;

        private uint horizontalDpiField;

        private uint verticalDpiField;

        private uint copiesField;

        private string idField;

        public CT_PageSetup()
        {
            this.paperSizeField = (uint)1;
            this.scaleField = (uint)100;
            this.firstPageNumberField = (uint)1;
            this.fitToWidthField = (uint)1;
            this.fitToHeightField = (uint)1;
            this.pageOrderField = ST_PageOrder.downThenOver;
            this.orientationField = ST_Orientation.@default;
            this.usePrinterDefaultsField = true;
            this.blackAndWhiteField = false;
            this.draftField = false;
            this.cellCommentsField = ST_CellComments.none;
            this.useFirstPageNumberField = false;
            this.errorsField = ST_PrintError.displayed;
            this.horizontalDpiField = (uint)600;
            this.verticalDpiField = (uint)600;
            this.copiesField = (uint)1;
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "1")]
        public uint paperSize
        {
            get
            {
                return this.paperSizeField;
            }
            set
            {
                this.paperSizeField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "100")]
        public uint scale
        {
            get
            {
                return this.scaleField;
            }
            set
            {
                this.scaleField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "1")]
        public uint firstPageNumber
        {
            get
            {
                return this.firstPageNumberField;
            }
            set
            {
                this.firstPageNumberField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "1")]
        public uint fitToWidth
        {
            get
            {
                return this.fitToWidthField;
            }
            set
            {
                this.fitToWidthField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "1")]
        public uint fitToHeight
        {
            get
            {
                return this.fitToHeightField;
            }
            set
            {
                this.fitToHeightField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_PageOrder.downThenOver)]
        public ST_PageOrder pageOrder
        {
            get
            {
                return this.pageOrderField;
            }
            set
            {
                this.pageOrderField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_Orientation.@default)]
        public ST_Orientation orientation
        {
            get
            {
                return this.orientationField;
            }
            set
            {
                this.orientationField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool usePrinterDefaults
        {
            get
            {
                return this.usePrinterDefaultsField;
            }
            set
            {
                this.usePrinterDefaultsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool blackAndWhite
        {
            get
            {
                return this.blackAndWhiteField;
            }
            set
            {
                this.blackAndWhiteField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool draft
        {
            get
            {
                return this.draftField;
            }
            set
            {
                this.draftField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_CellComments.none)]
        public ST_CellComments cellComments
        {
            get
            {
                return this.cellCommentsField;
            }
            set
            {
                this.cellCommentsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool useFirstPageNumber
        {
            get
            {
                return this.useFirstPageNumberField;
            }
            set
            {
                this.useFirstPageNumberField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_PrintError.displayed)]
        public ST_PrintError errors
        {
            get
            {
                return this.errorsField;
            }
            set
            {
                this.errorsField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "600")]
        public uint horizontalDpi
        {
            get
            {
                return this.horizontalDpiField;
            }
            set
            {
                this.horizontalDpiField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "600")]
        public uint verticalDpi
        {
            get
            {
                return this.verticalDpiField;
            }
            set
            {
                this.verticalDpiField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(typeof(uint), "1")]
        public uint copies
        {
            get
            {
                return this.copiesField;
            }
            set
            {
                this.copiesField = value;
            }
        }
        [XmlAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        public static CT_PageSetup Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PageSetup ctObj = new CT_PageSetup();
            ctObj.paperSize = XmlHelper.ReadUInt(node.Attributes["paperSize"], 1);
            ctObj.scale = XmlHelper.ReadUInt(node.Attributes["scale"], 100);
            ctObj.firstPageNumber = XmlHelper.ReadUInt(node.Attributes["firstPageNumber"], 1);
            ctObj.fitToWidth = XmlHelper.ReadUInt(node.Attributes["fitToWidth"], 1);
            ctObj.fitToHeight = XmlHelper.ReadUInt(node.Attributes["fitToHeight"], 1);
            if (node.Attributes["pageOrder"] != null)
                ctObj.pageOrder = (ST_PageOrder)Enum.Parse(typeof(ST_PageOrder), node.Attributes["pageOrder"].Value);
            if (node.Attributes["orientation"] != null)
                ctObj.orientation = (ST_Orientation)Enum.Parse(typeof(ST_Orientation), node.Attributes["orientation"].Value);
            ctObj.usePrinterDefaults = XmlHelper.ReadBool(node.Attributes["usePrinterDefaults"], true);
            ctObj.blackAndWhite = XmlHelper.ReadBool(node.Attributes["blackAndWhite"]);
            ctObj.draft = XmlHelper.ReadBool(node.Attributes["draft"]);
            if (node.Attributes["cellComments"] != null)
                ctObj.cellComments = (ST_CellComments)Enum.Parse(typeof(ST_CellComments), node.Attributes["cellComments"].Value);
            ctObj.useFirstPageNumber = XmlHelper.ReadBool(node.Attributes["useFirstPageNumber"]);
            if (node.Attributes["errors"] != null)
                ctObj.errors = (ST_PrintError)Enum.Parse(typeof(ST_PrintError), node.Attributes["errors"].Value);
            ctObj.horizontalDpi = XmlHelper.ReadUInt(node.Attributes["horizontalDpi"], 600);
            ctObj.verticalDpi = XmlHelper.ReadUInt(node.Attributes["verticalDpi"], 600);
            ctObj.copies = XmlHelper.ReadUInt(node.Attributes["copies"], 1);
            ctObj.id = XmlHelper.ReadString(node.Attributes["id", PackageNamespaces.SCHEMA_RELATIONSHIPS]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "paperSize", this.paperSize, 1);
            XmlHelper.WriteAttribute(sw, "scale", this.scale, 100);
            XmlHelper.WriteAttribute(sw, "firstPageNumber", this.firstPageNumber, 1);
            XmlHelper.WriteAttribute(sw, "fitToWidth", this.fitToWidth, 1);
            XmlHelper.WriteAttribute(sw, "fitToHeight", this.fitToHeight, 1);
            if (pageOrder != ST_PageOrder.downThenOver)
                XmlHelper.WriteAttribute(sw, "pageOrder", this.pageOrder.ToString());
            XmlHelper.WriteAttribute(sw, "orientation", this.orientation.ToString());
            if (!this.usePrinterDefaults)
                XmlHelper.WriteAttribute(sw, "usePrinterDefaults", this.usePrinterDefaults);
            XmlHelper.WriteAttribute(sw, "blackAndWhite", this.blackAndWhite, false);
            XmlHelper.WriteAttribute(sw, "draft", this.draft, false);
            if (this.cellComments != ST_CellComments.none)
                XmlHelper.WriteAttribute(sw, "cellComments", this.cellComments.ToString());
            XmlHelper.WriteAttribute(sw, "useFirstPageNumber", this.useFirstPageNumber, false);
            if (errors != ST_PrintError.displayed)
                XmlHelper.WriteAttribute(sw, "errors", this.errors.ToString());
            XmlHelper.WriteAttribute(sw, "horizontalDpi", this.horizontalDpi, 600);
            XmlHelper.WriteAttribute(sw, "verticalDpi", this.verticalDpi, 600);
            XmlHelper.WriteAttribute(sw, "copies", this.copies, 1);
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write("/>");
        }

    }

    public enum ST_PageOrder : int
    {
        downThenOver = 1,
        overThenDown = 2,
    }

    public enum ST_Orientation : int
    {
        @default = 1,
        portrait = 2,
        landscape = 3,
    }

    public enum ST_CellComments : int
    {
        none = 1,
        asDisplayed = 2,
        atEnd = 3,
    }

    public enum ST_PrintError
    {
        displayed,
        blank,
        dash,
        NA,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_HeaderFooter
    {

        private string oddHeaderField;

        private string oddFooterField;

        private string evenHeaderField;

        private string evenFooterField;

        private string firstHeaderField;

        private string firstFooterField;

        private bool differentOddEvenField;

        private bool differentFirstField;

        private bool scaleWithDocField;

        private bool alignWithMarginsField;

        public CT_HeaderFooter()
        {
            this.differentOddEvenField = false;
            this.differentFirstField = false;
            this.scaleWithDocField = true;
            this.alignWithMarginsField = true;
        }
        [XmlElement]
        public string oddHeader
        {
            get
            {
                return this.oddHeaderField;
            }
            set
            {
                this.oddHeaderField = value;
            }
        }
        [XmlElement]
        public string oddFooter
        {
            get
            {
                return this.oddFooterField;
            }
            set
            {
                this.oddFooterField = value;
            }
        }
        [XmlElement]
        public string evenHeader
        {
            get
            {
                return this.evenHeaderField;
            }
            set
            {
                this.evenHeaderField = value;
            }
        }
        [XmlElement]
        public string evenFooter
        {
            get
            {
                return this.evenFooterField;
            }
            set
            {
                this.evenFooterField = value;
            }
        }
        [XmlElement]
        public string firstHeader
        {
            get
            {
                return this.firstHeaderField;
            }
            set
            {
                this.firstHeaderField = value;
            }
        }
        [XmlElement]
        public string firstFooter
        {
            get
            {
                return this.firstFooterField;
            }
            set
            {
                this.firstFooterField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool differentOddEven
        {
            get
            {
                return this.differentOddEvenField;
            }
            set
            {
                this.differentOddEvenField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool differentFirst
        {
            get
            {
                return this.differentFirstField;
            }
            set
            {
                this.differentFirstField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool scaleWithDoc
        {
            get
            {
                return this.scaleWithDocField;
            }
            set
            {
                this.scaleWithDocField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool alignWithMargins
        {
            get
            {
                return this.alignWithMarginsField;
            }
            set
            {
                this.alignWithMarginsField = value;
            }
        }
        public static CT_HeaderFooter Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_HeaderFooter ctObj = new CT_HeaderFooter();
            ctObj.differentOddEven = XmlHelper.ReadBool(node.Attributes["differentOddEven"]);
            ctObj.differentFirst = XmlHelper.ReadBool(node.Attributes["differentFirst"]);
            if (node.Attributes["scaleWithDoc"] != null)
                ctObj.scaleWithDoc = XmlHelper.ReadBool(node.Attributes["scaleWithDoc"]);
            if (node.Attributes["alignWithMargins"] != null)
                ctObj.alignWithMargins = XmlHelper.ReadBool(node.Attributes["alignWithMargins"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "oddHeader")
                    ctObj.oddHeader = childNode.InnerText;
                else if (childNode.LocalName == "oddFooter")
                    ctObj.oddFooter = childNode.InnerText;
                else if (childNode.LocalName == "evenHeader")
                    ctObj.evenHeader = childNode.InnerText;
                else if (childNode.LocalName == "evenFooter")
                    ctObj.evenFooter = childNode.InnerText;
                else if (childNode.LocalName == "firstHeader")
                    ctObj.firstHeader = childNode.InnerText;
                else if (childNode.LocalName == "firstFooter")
                    ctObj.firstFooter = childNode.InnerText;
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            if (differentOddEven)
                XmlHelper.WriteAttribute(sw, "differentOddEven", this.differentOddEven);
            if (differentFirst)
                XmlHelper.WriteAttribute(sw, "differentFirst", this.differentFirst);
            if (!scaleWithDoc)
                XmlHelper.WriteAttribute(sw, "scaleWithDoc", this.scaleWithDoc);
            if (!alignWithMargins)
                XmlHelper.WriteAttribute(sw, "alignWithMargins", this.alignWithMargins);
            if (this.oddHeader == null && this.oddFooter == null && this.evenHeader == null && this.firstHeader == null && this.firstFooter == null)
            {
                sw.Write("/>");
                return;
            }
            sw.Write(">");
            if (this.oddHeader != null)
                sw.Write(string.Format("<oddHeader><![CDATA[{0}]]></oddHeader>", this.oddHeader));
            if (this.oddFooter != null)
                sw.Write(string.Format("<oddFooter><![CDATA[{0}]]></oddFooter>", this.oddFooter));
            if (this.evenHeader != null)
                sw.Write(string.Format("<evenHeader><![CDATA[{0}]]></evenHeader>", this.evenHeader));
            if (this.evenFooter != null)
                sw.Write(string.Format("<evenFooter><![CDATA[{0}]]></evenFooter>", this.evenFooter));
            if (this.firstHeader != null)
                sw.Write(string.Format("<firstHeader><![CDATA[{0}]]></firstHeader>", this.firstHeader));
            if (this.firstFooter != null)
                sw.Write(string.Format("<firstFooter><![CDATA[{0}]]></firstFooter>", this.firstFooter));
            sw.Write(string.Format("</{0}>", nodeName));
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_ConditionalFormatting
    {

        private List<CT_CfRule> cfRuleField;

        private CT_ExtensionList extLstField;

        private bool pivotField;

        private string sqrefField;
        public static CT_ConditionalFormatting Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ConditionalFormatting ctObj = new CT_ConditionalFormatting();
            ctObj.pivot = XmlHelper.ReadBool(node.Attributes["pivot"]);
            ctObj.sqref = XmlHelper.ReadString(node.Attributes["sqref"]);
            ctObj.cfRule = new List<CT_CfRule>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "cfRule")
                    ctObj.cfRule.Add(CT_CfRule.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            if (pivot)
                XmlHelper.WriteAttribute(sw, "pivot", this.pivot);
            XmlHelper.WriteAttribute(sw, "sqref", this.sqref);
            sw.Write(">");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            if (this.cfRule != null)
            {
                foreach (CT_CfRule x in this.cfRule)
                {
                    x.Write(sw, "cfRule");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }
        public CT_ConditionalFormatting()
        {
            //this.cfRuleField = new List<CT_CfRule>();
            //this.extLstField = new CT_ExtensionList();
            this.pivotField = false;
            //this.sqrefField = new List<string>();
        }
        public int sizeOfCfRuleArray()
        {
            if (cfRule == null)
                return 0;
            return cfRule.Count;
        }
        //public CT_ConditionalFormatting Copy()
        //{
        //    throw new NotImplementedException();
        //}
        public void Set(CT_ConditionalFormatting obj)
        {
            this.cfRuleField = obj.cfRuleField;
            this.extLstField = obj.extLstField;
            this.pivotField = obj.pivotField;
            this.sqrefField = obj.sqrefField;
        }
        public CT_CfRule GetCfRuleArray(int index)
        {
            return cfRule[index];
        }
        public CT_CfRule AddNewCfRule()
        {
            if (this.cfRule == null)
                this.cfRule = new List<CT_CfRule>();
            CT_CfRule rule = new CT_CfRule();
            this.cfRule.Add(rule);
            return rule;
        }
        [XmlElement]
        public List<CT_CfRule> cfRule
        {
            get
            {
                return this.cfRuleField;
            }
            set
            {
                this.cfRuleField = value;
            }
        }
        [XmlElement]
        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool pivot
        {
            get
            {
                return this.pivotField;
            }
            set
            {
                this.pivotField = value;
            }
        }
        [XmlAttribute]
        public string sqref
        {
            get
            {
                return this.sqrefField;
            }
            set
            {
                this.sqrefField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CfRule
    {

        private List<string> formulaField;

        private CT_ColorScale colorScaleField;

        private CT_DataBar dataBarField;

        private CT_IconSet iconSetField;

        private CT_ExtensionList extLstField;

        private ST_CfType typeField;

        private bool typeFieldSpecified;

        private uint dxfIdField;

        private bool dxfIdFieldSpecified;

        private int priorityField;

        private bool stopIfTrueField;

        private bool aboveAverageField;

        private bool percentField;

        private bool bottomField;

        private ST_ConditionalFormattingOperator? operatorField;

        private bool operatorFieldSpecified;

        private string textField;

        private ST_TimePeriod? timePeriodField;

        private bool timePeriodFieldSpecified;

        private uint rankField;

        private bool rankFieldSpecified;

        private int stdDevField;

        private bool stdDevFieldSpecified;

        private bool equalAverageField;

        public CT_CfRule()
        {
            //this.extLstField = new CT_ExtensionList();
            //this.iconSetField = new CT_IconSet();
            //this.dataBarField = new CT_DataBar();
            //this.colorScaleField = new CT_ColorScale();
            //this.formulaField = new List<string>();
            this.dxfIdSpecified = false;
            this.stopIfTrueField = false;
            this.aboveAverageField = true;
            this.percentField = false;
            this.bottomField = false;
            this.equalAverageField = false;
        }
        public static CT_CfRule Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CfRule ctObj = new CT_CfRule();
            if (node.Attributes["type"] != null)
                ctObj.type = (ST_CfType)Enum.Parse(typeof(ST_CfType), node.Attributes["type"].Value);
            if (node.Attributes["dxfId"] != null)
            {
                ctObj.dxfId = XmlHelper.ReadUInt(node.Attributes["dxfId"]);
                ctObj.dxfIdFieldSpecified = true;
            }
            ctObj.priority = XmlHelper.ReadInt(node.Attributes["priority"]);
            ctObj.stopIfTrue = XmlHelper.ReadBool(node.Attributes["stopIfTrue"]);
            if (node.Attributes["aboveAverage"] != null)
                ctObj.aboveAverage = XmlHelper.ReadBool(node.Attributes["aboveAverage"]);
            ctObj.percent = XmlHelper.ReadBool(node.Attributes["percent"]);
            ctObj.bottom = XmlHelper.ReadBool(node.Attributes["bottom"]);
            if (node.Attributes["operator"] != null)
                ctObj.@operator = (ST_ConditionalFormattingOperator)Enum.Parse(typeof(ST_ConditionalFormattingOperator), node.Attributes["operator"].Value);
            ctObj.text = XmlHelper.ReadString(node.Attributes["text"]);
            if (node.Attributes["timePeriod"] != null)
                ctObj.timePeriod = (ST_TimePeriod)Enum.Parse(typeof(ST_TimePeriod), node.Attributes["timePeriod"].Value);
            ctObj.rank = XmlHelper.ReadUInt(node.Attributes["rank"]);
            ctObj.stdDev = XmlHelper.ReadInt(node.Attributes["stdDev"]);
            ctObj.equalAverage = XmlHelper.ReadBool(node.Attributes["equalAverage"]);
            ctObj.formula = new List<String>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "colorScale")
                    ctObj.colorScale = CT_ColorScale.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "dataBar")
                    ctObj.dataBar = CT_DataBar.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "iconSet")
                    ctObj.iconSet = CT_IconSet.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "formula")
                    ctObj.formula.Add(childNode.InnerText);
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "type", this.type.ToString());
            if (dxfIdSpecified)
                XmlHelper.WriteAttribute(sw, "dxfId", this.dxfId, true);
            XmlHelper.WriteAttribute(sw, "priority", this.priority, true);
            if (this.stopIfTrue)
                XmlHelper.WriteAttribute(sw, "stopIfTrue", this.stopIfTrue);
            if (this.aboveAverage)
                XmlHelper.WriteAttribute(sw, "aboveAverage", this.aboveAverage, true);
            if (this.percent)
                XmlHelper.WriteAttribute(sw, "percent", this.percent);
            if (this.bottom)
                XmlHelper.WriteAttribute(sw, "bottom", this.bottom);
            if (this.@operator != null)
                XmlHelper.WriteAttribute(sw, "operator", this.@operator.ToString());
            XmlHelper.WriteAttribute(sw, "text", this.text);
            if (this.timePeriodField != null)
                XmlHelper.WriteAttribute(sw, "timePeriod", this.timePeriod.ToString());
            XmlHelper.WriteAttribute(sw, "rank", this.rank);
            XmlHelper.WriteAttribute(sw, "stdDev", this.stdDev);
            if (equalAverageField)
                XmlHelper.WriteAttribute(sw, "equalAverage", this.equalAverage);
            sw.Write(">");
            if (this.colorScale != null)
                this.colorScale.Write(sw, "colorScale");
            if (this.dataBar != null)
                this.dataBar.Write(sw, "dataBar");
            if (this.iconSet != null)
                this.iconSet.Write(sw, "iconSet");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            if (this.formula != null)
            {
                foreach (String x in this.formula)
                {
                    sw.Write(string.Format("<formula>{0}</formula>", XmlHelper.EncodeXml(x)));
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }
        public bool IsSetDxfId()
        {
            return this.dxfIdFieldSpecified;
        }
        public void AddFormula(string formula)
        {
            if (this.formula == null)
                this.formula = new List<string>();
            this.formula.Add(formula);
        }

        public void Set(CT_CfRule src)
        {
            this.formula = src.formula;
            this.stopIfTrue = src.stopIfTrue;
            this.bottom = src.bottom;
            this.percent = src.percent;
            this.dxfId = src.dxfId;
            this.priority = src.priority;
            this.@operator = src.@operator;
            this.type = src.type;
            this.equalAverage = src.equalAverage;
            this.aboveAverage = src.aboveAverage;
            this.colorScale = src.colorScale;
            this.dataBar = src.dataBar;
            this.iconSet = src.iconSet;
            this.extLst = src.extLst;
        }
        public int SizeOfFormulaArray()
        {
            return formula.Count;
        }
        public String GetFormulaArray(int index)
        {
            return formula[index];
        }

        public CT_IconSet AddNewIconSet()
        {
            var ret = new CT_IconSet();
            this.iconSet = ret;
            return ret;
        }

        public bool IsSetIconSet()
        {
            return this.iconSetField != null;
        }

        public bool IsSetColorScale()
        {
            return this.colorScale != null;
        }

        public CT_ColorScale AddNewColorScale()
        {
            this.colorScale = new CT_ColorScale();
            return this.colorScale;
        }

        public bool IsSetDataBar()
        {
            return dataBar != null;
        }

        public CT_DataBar AddNewDataBar()
        {
            this.dataBar = new CT_DataBar();
            return dataBar;
        }

        [XmlElement]
        public List<string> formula
        {
            get
            {
                return this.formulaField;
            }
            set
            {
                this.formulaField = value;
            }
        }
        [XmlElement]
        public CT_ColorScale colorScale
        {
            get
            {
                return this.colorScaleField;
            }
            set
            {
                this.colorScaleField = value;
            }
        }
        [XmlElement]
        public CT_DataBar dataBar
        {
            get
            {
                return this.dataBarField;
            }
            set
            {
                this.dataBarField = value;
            }
        }
        [XmlElement]
        public CT_IconSet iconSet
        {
            get
            {
                return this.iconSetField;
            }
            set
            {
                this.iconSetField = value;
            }
        }
        [XmlElement]
        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
        [XmlAttribute]
        public ST_CfType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        [XmlIgnore]
        public bool typeSpecified
        {
            get
            {
                return this.typeFieldSpecified;
            }
            set
            {
                this.typeFieldSpecified = value;
            }
        }
        [XmlAttribute]
        public uint dxfId
        {
            get
            {
                return this.dxfIdField;
            }
            set
            {
                this.dxfIdField = value;
                this.dxfIdFieldSpecified = true;
            }
        }

        [XmlIgnore]
        public bool dxfIdSpecified
        {
            get
            {
                return this.dxfIdFieldSpecified;
            }
            set
            {
                this.dxfIdFieldSpecified = value;
            }
        }
        [XmlAttribute]
        public int priority
        {
            get
            {
                return this.priorityField;
            }
            set
            {
                this.priorityField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool stopIfTrue
        {
            get
            {
                return this.stopIfTrueField;
            }
            set
            {
                this.stopIfTrueField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool aboveAverage
        {
            get
            {
                return this.aboveAverageField;
            }
            set
            {
                this.aboveAverageField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool percent
        {
            get
            {
                return this.percentField;
            }
            set
            {
                this.percentField = value;
            }
        }

        [DefaultValue(false)]
        public bool bottom
        {
            get
            {
                return this.bottomField;
            }
            set
            {
                this.bottomField = value;
            }
        }
        [XmlAttribute]
        public ST_ConditionalFormattingOperator? @operator
        {
            get
            {
                return this.operatorField;
            }
            set
            {
                this.operatorField = value;
            }
        }

        [XmlIgnore]
        public bool operatorSpecified
        {
            get
            {
                return this.operatorFieldSpecified;
            }
            set
            {
                this.operatorFieldSpecified = value;
            }
        }
        [XmlAttribute]
        public string text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
        [XmlAttribute]
        public ST_TimePeriod? timePeriod
        {
            get
            {
                return this.timePeriodField;
            }
            set
            {
                this.timePeriodField = value;
            }
        }

        [XmlIgnore]
        public bool timePeriodSpecified
        {
            get
            {
                return this.timePeriodFieldSpecified;
            }
            set
            {
                this.timePeriodFieldSpecified = value;
            }
        }
        [XmlAttribute]
        public uint rank
        {
            get
            {
                return this.rankField;
            }
            set
            {
                this.rankField = value;
            }
        }

        [XmlIgnore]
        public bool rankSpecified
        {
            get
            {
                return this.rankFieldSpecified;
            }
            set
            {
                this.rankFieldSpecified = value;
            }
        }
        [XmlAttribute]
        public int stdDev
        {
            get
            {
                return this.stdDevField;
            }
            set
            {
                this.stdDevField = value;
            }
        }

        [XmlIgnore]
        public bool stdDevSpecified
        {
            get
            {
                return this.stdDevFieldSpecified;
            }
            set
            {
                this.stdDevFieldSpecified = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool equalAverage
        {
            get
            {
                return this.equalAverageField;
            }
            set
            {
                this.equalAverageField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_ColorScale
    {

        private List<CT_Cfvo> cfvoField;

        private List<CT_Color> colorField;

        public CT_ColorScale()
        {
            this.colorField = new List<CT_Color>();
            this.cfvoField = new List<CT_Cfvo>();
        }

        public List<CT_Cfvo> cfvo
        {
            get
            {
                return this.cfvoField;
            }
            set
            {
                this.cfvoField = value;
            }
        }

        public List<CT_Color> color
        {
            get
            {
                return this.colorField;
            }
            set
            {
                this.colorField = value;
            }
        }

        public static CT_ColorScale Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ColorScale ctObj = new CT_ColorScale();
            ctObj.cfvo = new List<CT_Cfvo>();
            ctObj.color = new List<CT_Color>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "cfvo")
                    ctObj.cfvo.Add(CT_Cfvo.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "color")
                    ctObj.color.Add(CT_Color.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        public CT_Cfvo AddNewCfvo()
        {
            CT_Cfvo cfvox = new CT_Cfvo();
            cfvo.Add(cfvox);
            return cfvox;
        }

        public CT_Color AddNewColor()
        {
            CT_Color colorx = new CT_Color();
            color.Add(colorx);
            return colorx;
        }

        public void RemoveCfvo(int p)
        {
            this.cfvo.RemoveAt(p);
        }

        public void RemoveColor(int p)
        {
            this.color.RemoveAt(p);
        }

        public int SizeOfCfvoArray()
        {
            return cfvo == null ? 0 : cfvo.Count;
        }

        public int SizeOfColorArray()
        {
            return color == null ? 0 : color.Count;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.cfvo != null)
            {
                foreach (CT_Cfvo x in this.cfvo)
                {
                    x.Write(sw, "cfvo");
                }
            }
            if (this.color != null)
            {
                foreach (CT_Color x in this.color)
                {
                    x.Write(sw, "color");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Cfvo
    {

        private CT_ExtensionList extLstField;

        private ST_CfvoType typeField;

        private string valField;

        private bool gteField;

        public CT_Cfvo()
        {
            //this.extLstField = new CT_ExtensionList();
            this.gteField = true;
        }

        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        public ST_CfvoType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        public string val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }

        [DefaultValue(true)]
        public bool gte
        {
            get
            {
                return this.gteField;
            }
            set
            {
                this.gteField = value;
            }
        }

        public static CT_Cfvo Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Cfvo ctObj = new CT_Cfvo();
            if (node.Attributes["type"] != null)
                ctObj.type = (ST_CfvoType)Enum.Parse(typeof(ST_CfvoType), node.Attributes["type"].Value);
            ctObj.val = XmlHelper.ReadString(node.Attributes["val"]);
            ctObj.gte = XmlHelper.ReadBool(node.Attributes["gte"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }

        public bool IsSetVal()
        {
            return !string.IsNullOrEmpty(this.val);
        }

        public void UnsetVal()
        {
            this.val = string.Empty;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "type", this.type.ToString());
            XmlHelper.WriteAttribute(sw, "val", this.val);
            if (this.gte)
                XmlHelper.WriteAttribute(sw, "gte", this.gte);

            if (this.extLst != null)
            {
                sw.Write(">");
                this.extLst.Write(sw, "extLst");
                sw.Write(string.Format("</{0}>", nodeName));
            }
            else
            {
                sw.Write("/>");
            }
        }

    }

    public enum ST_CfvoType
    {
        num,
        percent,
        max,
        min,
        formula,
        percentile,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_DataBar
    {

        private List<CT_Cfvo> cfvoField;

        private CT_Color colorField;

        private uint minLengthField;

        private uint maxLengthField;

        private bool showValueField;

        public CT_DataBar()
        {
            //this.colorField = new CT_Color();
            //this.cfvoField = new List<CT_Cfvo>();
            this.minLengthField = ((uint)(10));
            this.maxLengthField = ((uint)(90));
            this.showValueField = true;
        }

        public List<CT_Cfvo> cfvo
        {
            get
            {
                return this.cfvoField;
            }
            set
            {
                this.cfvoField = value;
            }
        }

        public CT_Color color
        {
            get
            {
                return this.colorField;
            }
            set
            {
                this.colorField = value;
            }
        }

        [DefaultValue(typeof(uint), "10")]
        public uint minLength
        {
            get
            {
                return this.minLengthField;
            }
            set
            {
                this.minLengthField = value;
            }
        }

        [DefaultValue(typeof(uint), "90")]
        public uint maxLength
        {
            get
            {
                return this.maxLengthField;
            }
            set
            {
                this.maxLengthField = value;
            }
        }

        [DefaultValue(true)]
        public bool showValue
        {
            get
            {
                return this.showValueField;
            }
            set
            {
                this.showValueField = value;
            }
        }

        public static CT_DataBar Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DataBar ctObj = new CT_DataBar();
            ctObj.minLength = XmlHelper.ReadUInt(node.Attributes["minLength"]);
            ctObj.maxLength = XmlHelper.ReadUInt(node.Attributes["maxLength"]);
            if (node.Attributes["showValue"] == null)
                ctObj.showValue = true;
            else
                ctObj.showValue = XmlHelper.ReadBool(node.Attributes["showValue"]);

            ctObj.cfvo = new List<CT_Cfvo>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "color")
                    ctObj.color = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "cfvo")
                    ctObj.cfvo.Add(CT_Cfvo.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        public CT_Cfvo AddNewCfvo()
        {
            CT_Cfvo val = new CT_Cfvo();
            if (cfvo == null)
                cfvo = new List<CT_Cfvo>();
            cfvo.Add(val);
            return val;
        }

        public bool IsSetShowValue()
        {
            return this.showValueField;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "minLength", this.minLength);
            XmlHelper.WriteAttribute(sw, "maxLength", this.maxLength);
            if (showValue)
                XmlHelper.WriteAttribute(sw, "showValue", this.showValue);
            sw.Write(">");
            if (this.cfvo != null)
            {
                foreach (CT_Cfvo x in this.cfvo)
                {
                    x.Write(sw, "cfvo");
                }
            }
            if (this.color != null)
                this.color.Write(sw, "color");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_IconSet
    {

        private List<CT_Cfvo> cfvoField;

        private ST_IconSetType iconSetField;

        private bool showValueField;
        private bool showValueFieldSpecified;

        private bool percentField;

        private bool reverseField;

        public CT_IconSet()
        {
            //this.cfvoField = new List<CT_Cfvo>();
            this.iconSetField = ST_IconSetType.Item3TrafficLights1;
            this.showValueField = true;
            this.percentField = true;
            this.reverseField = false;
        }
        [XmlElement]
        public List<CT_Cfvo> cfvo
        {
            get
            {
                return this.cfvoField;
            }
            set
            {
                this.cfvoField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue(ST_IconSetType.Item3TrafficLights1)]
        public ST_IconSetType iconSet
        {
            get
            {
                return this.iconSetField;
            }
            set
            {
                this.iconSetField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool showValue
        {
            get
            {
                return this.showValueField;
            }
            set
            {
                this.showValueField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(true)]
        public bool percent
        {
            get
            {
                return this.percentField;
            }
            set
            {
                this.percentField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool reverse
        {
            get
            {
                return this.reverseField;
            }
            set
            {
                this.reverseField = value;
            }
        }

        public static CT_IconSet Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_IconSet ctObj = new CT_IconSet();
            if (node.Attributes["iconSet"] != null)
                ctObj.iconSet = (ST_IconSetType)Enum.Parse(typeof(ST_IconSetType), "Item" + node.Attributes["iconSet"].Value);
            ctObj.showValue = XmlHelper.ReadBool(node.Attributes["showValue"], true);
            if (!ctObj.showValue)
                ctObj.showValueFieldSpecified = true;
            ctObj.percent = XmlHelper.ReadBool(node.Attributes["percent"], true);
            ctObj.reverse = XmlHelper.ReadBool(node.Attributes["reverse"]);
            ctObj.cfvo = new List<CT_Cfvo>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "cfvo")
                    ctObj.cfvo.Add(CT_Cfvo.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        public CT_Cfvo AddNewCfvo()
        {
            if (cfvoField == null)
                cfvoField = new List<CT_Cfvo>();

            var ret = new CT_Cfvo();
            cfvoField.Add(ret);
            return ret;
        }

        public bool IsSetShowValue()
        {
            return this.showValueFieldSpecified;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            if (this.iconSet != ST_IconSetType.Item3TrafficLights1)
                XmlHelper.WriteAttribute(sw, "iconSet", this.iconSet.ToString().Replace("Item", ""));
            if (!showValue)
                XmlHelper.WriteAttribute(sw, "showValue", this.showValue);
            if (!percent)
                XmlHelper.WriteAttribute(sw, "percent", this.percent);
            if (reverse)
                XmlHelper.WriteAttribute(sw, "reverse", this.reverse);
            sw.Write(">");
            if (this.cfvo != null)
            {
                foreach (CT_Cfvo x in this.cfvo)
                {
                    x.Write(sw, "cfvo");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }
    }

    public enum ST_CfType
    {
        expression,
        cellIs,
        colorScale,
        dataBar,
        iconSet,
        top10,
        uniqueValues,
        duplicateValues,
        containsText,
        notContainsText,
        beginsWith,
        endsWith,
        containsBlanks,
        notContainsBlanks,
        containsErrors,
        notContainsErrors,
        timePeriod,
        aboveAverage,
    }

    public enum ST_ConditionalFormattingOperator
    {
        lessThan,
        lessThanOrEqual,
        equal,
        notEqual,
        greaterThanOrEqual,
        greaterThan,
        between,
        notBetween,
        containsText,
        notContains,
        beginsWith,
        endsWith,
    }

    public enum ST_TimePeriod
    {
        today,
        yesterday,
        tomorrow,
        last7Days,
        thisMonth,
        lastMonth,
        nextMonth,
        thisWeek,
        lastWeek,
        nextWeek,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main", IsNullable = true)]
    public class CT_DataValidations
    {

        private List<CT_DataValidation> dataValidationField;

        private bool disablePromptsField;

        private uint xWindowField;

        private bool xWindowFieldSpecified;

        private uint yWindowField;

        private bool yWindowFieldSpecified;

        private uint countField;

        private bool countFieldSpecified;

        public CT_DataValidations()
        {
            //this.dataValidationField = new List<CT_DataValidation>();
            this.disablePromptsField = false;
        }
        public static CT_DataValidations Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DataValidations ctObj = new CT_DataValidations();
            ctObj.disablePrompts = XmlHelper.ReadBool(node.Attributes["disablePrompts"]);
            ctObj.xWindow = XmlHelper.ReadUInt(node.Attributes["xWindow"]);
            ctObj.yWindow = XmlHelper.ReadUInt(node.Attributes["yWindow"]);
            ctObj.count = XmlHelper.ReadUInt(node.Attributes["count"]);
            ctObj.dataValidation = new List<CT_DataValidation>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "dataValidation")
                    ctObj.dataValidation.Add(CT_DataValidation.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "disablePrompts", this.disablePrompts);
            XmlHelper.WriteAttribute(sw, "xWindow", this.xWindow);
            XmlHelper.WriteAttribute(sw, "yWindow", this.yWindow);
            XmlHelper.WriteAttribute(sw, "count", this.count);
            sw.Write(">");
            if (this.dataValidation != null)
            {
                foreach (CT_DataValidation x in this.dataValidation)
                {
                    x.Write(sw, "dataValidation");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        [XmlElement("dataValidation", Order = 0)]
        public List<CT_DataValidation> dataValidation
        {
            get
            {
                return this.dataValidationField;
            }
            set
            {
                this.dataValidationField = value;
            }
        }

        [DefaultValue(false)]
        [XmlAttribute]
        public bool disablePrompts
        {
            get
            {
                return this.disablePromptsField;
            }
            set
            {
                this.disablePromptsField = value;
            }
        }
        [XmlAttribute]
        public uint xWindow
        {
            get
            {
                return this.xWindowField;
            }
            set
            {
                this.xWindowField = value;
            }
        }

        [XmlIgnore]
        public bool xWindowSpecified
        {
            get
            {
                return this.xWindowFieldSpecified;
            }
            set
            {
                this.xWindowFieldSpecified = value;
            }
        }
        [XmlAttribute]
        public uint yWindow
        {
            get
            {
                return this.yWindowField;
            }
            set
            {
                this.yWindowField = value;
            }
        }

        [XmlIgnore]
        public bool yWindowSpecified
        {
            get
            {
                return this.yWindowFieldSpecified;
            }
            set
            {
                this.yWindowFieldSpecified = value;
            }
        }
        [XmlAttribute]
        public uint count
        {
            get
            {
                return this.countField;
            }
            set
            {
                this.countField = value;
            }
        }

        [XmlIgnore]
        public bool countSpecified
        {
            get
            {
                return this.countFieldSpecified;
            }
            set
            {
                this.countFieldSpecified = value;
            }
        }
        public int sizeOfDataValidationArray()
        {
            return (int)this.countField;
        }
        public CT_DataValidation AddNewDataValidation()
        {
            if (this.dataValidationField == null)
                this.dataValidationField = new List<CT_DataValidation>();
            CT_DataValidation dv = new CT_DataValidation();
            this.dataValidationField.Add(dv);
            this.countField++;
            return dv;
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main", IsNullable = true)]
    public class CT_DataValidation
    {

        private string formula1Field;

        private string formula2Field;

        private ST_DataValidationType typeField;

        private ST_DataValidationErrorStyle errorStyleField;

        private ST_DataValidationImeMode imeModeField;

        private ST_DataValidationOperator operatorField;

        private bool allowBlankField;

        private bool showDropDownField;

        private bool showInputMessageField;

        private bool showErrorMessageField;

        private string errorTitleField;

        private string errorField;

        private string promptTitleField;

        private string promptField;

        private string sqrefField;
        public static CT_DataValidation Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_DataValidation ctObj = new CT_DataValidation();
            if (node.Attributes["type"] != null)
                ctObj.type = (ST_DataValidationType)Enum.Parse(typeof(ST_DataValidationType), node.Attributes["type"].Value);
            if (node.Attributes["errorStyle"] != null)
                ctObj.errorStyle = (ST_DataValidationErrorStyle)Enum.Parse(typeof(ST_DataValidationErrorStyle), node.Attributes["errorStyle"].Value);
            if (node.Attributes["imeMode"] != null)
                ctObj.imeMode = (ST_DataValidationImeMode)Enum.Parse(typeof(ST_DataValidationImeMode), node.Attributes["imeMode"].Value);
            if (node.Attributes["operator"] != null)
                ctObj.@operator = (ST_DataValidationOperator)Enum.Parse(typeof(ST_DataValidationOperator), node.Attributes["operator"].Value);
            ctObj.allowBlank = XmlHelper.ReadBool(node.Attributes["allowBlank"]);
            ctObj.showDropDown = XmlHelper.ReadBool(node.Attributes["showDropDown"]);
            ctObj.showInputMessage = XmlHelper.ReadBool(node.Attributes["showInputMessage"]);
            ctObj.showErrorMessage = XmlHelper.ReadBool(node.Attributes["showErrorMessage"]);
            ctObj.errorTitle = XmlHelper.ReadString(node.Attributes["errorTitle"]);
            ctObj.error = XmlHelper.ReadString(node.Attributes["error"]);
            ctObj.promptTitle = XmlHelper.ReadString(node.Attributes["promptTitle"]);
            ctObj.prompt = XmlHelper.ReadString(node.Attributes["prompt"]);
            ctObj.sqref = XmlHelper.ReadString(node.Attributes["sqref"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "formula1")
                    ctObj.formula1 = childNode.InnerText;
                else if (childNode.LocalName == "formula2")
                    ctObj.formula2 = childNode.InnerText;
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "type", this.type.ToString());
            XmlHelper.WriteAttribute(sw, "errorStyle", this.errorStyle.ToString());
            XmlHelper.WriteAttribute(sw, "imeMode", this.imeMode.ToString());
            XmlHelper.WriteAttribute(sw, "operator", this.@operator.ToString());
            XmlHelper.WriteAttribute(sw, "allowBlank", this.allowBlank);
            XmlHelper.WriteAttribute(sw, "showDropDown", this.showDropDown);
            XmlHelper.WriteAttribute(sw, "showInputMessage", this.showInputMessage);
            XmlHelper.WriteAttribute(sw, "showErrorMessage", this.showErrorMessage);
            XmlHelper.WriteAttribute(sw, "errorTitle", this.errorTitle);
            XmlHelper.WriteAttribute(sw, "error", this.error);
            XmlHelper.WriteAttribute(sw, "promptTitle", this.promptTitle);
            XmlHelper.WriteAttribute(sw, "prompt", this.prompt);
            XmlHelper.WriteAttribute(sw, "sqref", this.sqref);
            sw.Write(">");
            if (this.formula1 != null)
                sw.Write(string.Format("<formula1><![CDATA[{0}]]></formula1>", this.formula1));
            if (this.formula2 != null)
                sw.Write(string.Format("<formula2><![CDATA[{0}]]></formula2>", this.formula2));

            sw.Write(string.Format("</{0}>", nodeName));
        }

        public CT_DataValidation()
        {
            //this.sqrefField = new List<string>();
            this.typeField = ST_DataValidationType.none;
            this.errorStyleField = ST_DataValidationErrorStyle.stop;
            this.imeModeField = ST_DataValidationImeMode.noControl;
            this.operatorField = ST_DataValidationOperator.between;
            this.allowBlankField = false;
            this.showDropDownField = false;
            this.showInputMessageField = false;
            this.showErrorMessageField = false;
        }
        public void Set(CT_DataValidation obj)
        {
            formula1Field = obj.formula1Field;
            formula2Field = obj.formula2Field;
            typeField = obj.typeField;
            errorStyleField = obj.errorStyleField;
            imeModeField = obj.imeModeField;
            operatorField = obj.operatorField;
            allowBlankField = obj.allowBlankField;
            showDropDownField = obj.showDropDownField;
            showInputMessageField = obj.showInputMessageField;
            showErrorMessageField = obj.showErrorMessageField;
            errorTitleField = obj.errorTitleField;
            errorField = obj.errorField;
            promptTitleField = obj.promptTitleField;
            promptField = obj.promptField;
            sqrefField = obj.sqrefField;
        }
        [XmlElement(Order = 0)]
        public string formula1
        {
            get
            {
                return this.formula1Field;
            }
            set
            {
                this.formula1Field = value;
            }
        }
        [XmlElement(Order = 1)]
        public string formula2
        {
            get
            {
                return this.formula2Field;
            }
            set
            {
                this.formula2Field = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_DataValidationType.none)]
        public ST_DataValidationType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_DataValidationErrorStyle.stop)]
        public ST_DataValidationErrorStyle errorStyle
        {
            get
            {
                return this.errorStyleField;
            }
            set
            {
                this.errorStyleField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_DataValidationImeMode.noControl)]
        public ST_DataValidationImeMode imeMode
        {
            get
            {
                return this.imeModeField;
            }
            set
            {
                this.imeModeField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(ST_DataValidationOperator.between)]
        public ST_DataValidationOperator @operator
        {
            get
            {
                return this.operatorField;
            }
            set
            {
                this.operatorField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool allowBlank
        {
            get
            {
                return this.allowBlankField;
            }
            set
            {
                this.allowBlankField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool showDropDown
        {
            get
            {
                return this.showDropDownField;
            }
            set
            {
                this.showDropDownField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool showInputMessage
        {
            get
            {
                return this.showInputMessageField;
            }
            set
            {
                this.showInputMessageField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool showErrorMessage
        {
            get
            {
                return this.showErrorMessageField;
            }
            set
            {
                this.showErrorMessageField = value;
            }
        }
        [XmlAttribute]
        public string errorTitle
        {
            get
            {
                return this.errorTitleField;
            }
            set
            {
                this.errorTitleField = value;
            }
        }
        [XmlAttribute]
        public string error
        {
            get
            {
                return this.errorField;
            }
            set
            {
                this.errorField = value;
            }
        }
        [XmlAttribute]
        public string promptTitle
        {
            get
            {
                return this.promptTitleField;
            }
            set
            {
                this.promptTitleField = value;
            }
        }
        [XmlAttribute]
        public string prompt
        {
            get
            {
                return this.promptField;
            }
            set
            {
                this.promptField = value;
            }
        }
        [XmlAttribute]
        public string sqref
        {
            get
            {
                return this.sqrefField;
            }
            set
            {
                this.sqrefField = value;
            }
        }
    }

    public enum ST_DataValidationType
    {
        none,
        whole,
        @decimal,
        list,
        date,
        time,
        textLength,
        custom,
    }

    public enum ST_DataValidationErrorStyle
    {
        stop,
        warning,
        information,
    }

    public enum ST_DataValidationImeMode
    {
        noControl,
        off,
        on,
        disabled,
        hiragana,
        fullKatakana,
        halfKatakana,
        fullAlpha,
        halfAlpha,
        fullHangul,
        halfHangul,
    }

    public enum ST_DataValidationOperator
    {
        between,
        notBetween,
        equal,
        notEqual,
        lessThan,
        lessThanOrEqual,
        greaterThan,
        greaterThanOrEqual,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CustomProperty
    {

        private string nameField;

        private string idField;

        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        // TODO is the following correct?
        [XmlAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        public static CT_CustomProperty Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CustomProperty ctObj = new CT_CustomProperty();
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            ctObj.id = XmlHelper.ReadString(node.Attributes["id", PackageNamespaces.SCHEMA_RELATIONSHIPS]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "name", this.name);
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CellWatch
    {

        private string rField;

        public string r
        {
            get
            {
                return this.rField;
            }
            set
            {
                this.rField = value;
            }
        }

        public static CT_CellWatch Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CellWatch ctObj = new CT_CellWatch();
            ctObj.r = XmlHelper.ReadString(node.Attributes["r"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "r", this.r);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_IgnoredErrors
    {

        private List<CT_IgnoredError> ignoredErrorField;

        private CT_ExtensionList extLstField;

        public CT_IgnoredErrors()
        {
            //this.extLstField = new CT_ExtensionList();
            //this.ignoredErrorField = new List<CT_IgnoredError>();
        }

        public static CT_IgnoredErrors Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_IgnoredErrors ctObj = new CT_IgnoredErrors();
            ctObj.ignoredError = new List<CT_IgnoredError>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "ignoredError")
                    ctObj.ignoredError.Add(CT_IgnoredError.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            if (this.ignoredError != null)
            {
                foreach (CT_IgnoredError x in this.ignoredError)
                {
                    x.Write(sw, "ignoredError");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        public CT_IgnoredError AddNewIgnoredError()
        {
            if (this.ignoredError == null)
            {
                this.ignoredError = new List<CT_IgnoredError>();
            }
            CT_IgnoredError ie = new CT_IgnoredError();
            ignoredError.Add(ie);
            return ie;
        }
        internal CT_IgnoredError GetIgnoredErrorArray(int v)
        {
            if (this.ignoredError == null)
            {
                return null;
            }
            return ignoredErrorField[v];
        }
        public List<CT_IgnoredError> ignoredError
        {
            get
            {
                return this.ignoredErrorField;
            }
            set
            {
                this.ignoredErrorField = value;
            }
        }

        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_IgnoredError
    {

        private List<string> sqrefField;

        private bool evalErrorField;

        private bool twoDigitTextYearField;

        private bool numberStoredAsTextField;

        private bool formulaField;

        private bool formulaRangeField;

        private bool unlockedFormulaField;

        private bool emptyCellReferenceField;

        private bool listDataValidationField;

        private bool calculatedColumnField;

        public CT_IgnoredError()
        {
            this.sqrefField = new List<string>();
            this.evalErrorField = false;
            this.twoDigitTextYearField = false;
            this.numberStoredAsTextField = false;
            this.formulaField = false;
            this.formulaRangeField = false;
            this.unlockedFormulaField = false;
            this.emptyCellReferenceField = false;
            this.listDataValidationField = false;
            this.calculatedColumnField = false;
        }
        public static CT_IgnoredError Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_IgnoredError ctObj = new CT_IgnoredError();
            ctObj.evalError = XmlHelper.ReadBool(node.Attributes["evalError"]);
            ctObj.twoDigitTextYear = XmlHelper.ReadBool(node.Attributes["twoDigitTextYear"]);
            ctObj.numberStoredAsText = XmlHelper.ReadBool(node.Attributes["numberStoredAsText"]);
            ctObj.formula = XmlHelper.ReadBool(node.Attributes["formula"]);
            ctObj.formulaRange = XmlHelper.ReadBool(node.Attributes["formulaRange"]);
            ctObj.unlockedFormula = XmlHelper.ReadBool(node.Attributes["unlockedFormula"]);
            ctObj.emptyCellReference = XmlHelper.ReadBool(node.Attributes["emptyCellReference"]);
            ctObj.listDataValidation = XmlHelper.ReadBool(node.Attributes["listDataValidation"]);
            ctObj.calculatedColumn = XmlHelper.ReadBool(node.Attributes["calculatedColumn"]);
            string sqref = XmlHelper.ReadString(node.Attributes["sqref"]);
            if (sqref != null)
            {
                //sqref use whitespace to split the cell reference, eg."B25:B37 C25:C37 D25:D37"
                ctObj.sqref.AddRange(sqref.Split(' '));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "sqref", string.Join(" ", this.sqref));
            XmlHelper.WriteAttribute(sw, "evalError", this.evalError, false);
            XmlHelper.WriteAttribute(sw, "twoDigitTextYear", this.twoDigitTextYear, false);
            XmlHelper.WriteAttribute(sw, "numberStoredAsText", this.numberStoredAsText, false);
            XmlHelper.WriteAttribute(sw, "formula", this.formula, false);
            XmlHelper.WriteAttribute(sw, "formulaRange", this.formulaRange, false);
            XmlHelper.WriteAttribute(sw, "unlockedFormula", this.unlockedFormula, false);
            XmlHelper.WriteAttribute(sw, "emptyCellReference", this.emptyCellReference, false);
            XmlHelper.WriteAttribute(sw, "listDataValidation", this.listDataValidation, false);
            XmlHelper.WriteAttribute(sw, "calculatedColumn", this.calculatedColumn, false);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }
        [XmlAttribute]
        public List<string> sqref
        {
            get
            {
                return this.sqrefField;
            }
            set
            {
                this.sqrefField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool evalError
        {
            get
            {
                return this.evalErrorField;
            }
            set
            {
                this.evalErrorField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool twoDigitTextYear
        {
            get
            {
                return this.twoDigitTextYearField;
            }
            set
            {
                this.twoDigitTextYearField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool numberStoredAsText
        {
            get
            {
                return this.numberStoredAsTextField;
            }
            set
            {
                this.numberStoredAsTextField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool formula
        {
            get
            {
                return this.formulaField;
            }
            set
            {
                this.formulaField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool formulaRange
        {
            get
            {
                return this.formulaRangeField;
            }
            set
            {
                this.formulaRangeField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool unlockedFormula
        {
            get
            {
                return this.unlockedFormulaField;
            }
            set
            {
                this.unlockedFormulaField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool emptyCellReference
        {
            get
            {
                return this.emptyCellReferenceField;
            }
            set
            {
                this.emptyCellReferenceField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool listDataValidation
        {
            get
            {
                return this.listDataValidationField;
            }
            set
            {
                this.listDataValidationField = value;
            }
        }
        [XmlAttribute]
        [DefaultValue(false)]
        public bool calculatedColumn
        {
            get
            {
                return this.calculatedColumnField;
            }
            set
            {
                this.calculatedColumnField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CellSmartTags
    {

        private List<CT_CellSmartTag> cellSmartTagField;

        private string rField;

        public CT_CellSmartTags()
        {
            this.cellSmartTagField = new List<CT_CellSmartTag>();
        }

        public List<CT_CellSmartTag> cellSmartTag
        {
            get
            {
                return this.cellSmartTagField;
            }
            set
            {
                this.cellSmartTagField = value;
            }
        }

        public string r
        {
            get
            {
                return this.rField;
            }
            set
            {
                this.rField = value;
            }
        }

        public static CT_CellSmartTags Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CellSmartTags ctObj = new CT_CellSmartTags();
            ctObj.r = XmlHelper.ReadString(node.Attributes["r"]);
            ctObj.cellSmartTag = new List<CT_CellSmartTag>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "cellSmartTag")
                    ctObj.cellSmartTag.Add(CT_CellSmartTag.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "r", this.r);
            sw.Write(">");
            if (this.cellSmartTag != null)
            {
                foreach (CT_CellSmartTag x in this.cellSmartTag)
                {
                    x.Write(sw, "cellSmartTag");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CellSmartTag
    {

        private List<CT_CellSmartTagPr> cellSmartTagPrField;

        private uint typeField;

        private bool deletedField;

        private bool xmlBasedField;

        public CT_CellSmartTag()
        {
            this.cellSmartTagPrField = new List<CT_CellSmartTagPr>();
            this.deletedField = false;
            this.xmlBasedField = false;
        }

        public List<CT_CellSmartTagPr> cellSmartTagPr
        {
            get
            {
                return this.cellSmartTagPrField;
            }
            set
            {
                this.cellSmartTagPrField = value;
            }
        }

        public uint type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        [DefaultValue(false)]
        public bool deleted
        {
            get
            {
                return this.deletedField;
            }
            set
            {
                this.deletedField = value;
            }
        }

        [DefaultValue(false)]
        public bool xmlBased
        {
            get
            {
                return this.xmlBasedField;
            }
            set
            {
                this.xmlBasedField = value;
            }
        }

        public static CT_CellSmartTag Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CellSmartTag ctObj = new CT_CellSmartTag();
            ctObj.type = XmlHelper.ReadUInt(node.Attributes["type"]);
            ctObj.deleted = XmlHelper.ReadBool(node.Attributes["deleted"]);
            ctObj.xmlBased = XmlHelper.ReadBool(node.Attributes["xmlBased"]);
            ctObj.cellSmartTagPr = new List<CT_CellSmartTagPr>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "cellSmartTagPr")
                    ctObj.cellSmartTagPr.Add(CT_CellSmartTagPr.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "type", this.type);
            XmlHelper.WriteAttribute(sw, "deleted", this.deleted);
            XmlHelper.WriteAttribute(sw, "xmlBased", this.xmlBased);
            sw.Write(">");
            if (this.cellSmartTagPr != null)
            {
                foreach (CT_CellSmartTagPr x in this.cellSmartTagPr)
                {
                    x.Write(sw, "cellSmartTagPr");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CellSmartTagPr
    {

        private string keyField;

        private string valField;

        public string key
        {
            get
            {
                return this.keyField;
            }
            set
            {
                this.keyField = value;
            }
        }

        public string val
        {
            get
            {
                return this.valField;
            }
            set
            {
                this.valField = value;
            }
        }

        public static CT_CellSmartTagPr Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CellSmartTagPr ctObj = new CT_CellSmartTagPr();
            ctObj.key = XmlHelper.ReadString(node.Attributes["key"]);
            ctObj.val = XmlHelper.ReadString(node.Attributes["val"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "key", this.key);
            XmlHelper.WriteAttribute(sw, "val", this.val);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_OleObject
    {

        private string progIdField;

        private ST_DvAspect dvAspectField;

        private string linkField;

        private ST_OleUpdate oleUpdateField;

        private bool oleUpdateFieldSpecified;

        private bool autoLoadField;

        private uint shapeIdField;

        private string idField;

        public CT_OleObject()
        {
            this.dvAspectField = ST_DvAspect.DVASPECT_CONTENT;
            this.autoLoadField = false;
        }

        public string progId
        {
            get
            {
                return this.progIdField;
            }
            set
            {
                this.progIdField = value;
            }
        }

        [DefaultValue(ST_DvAspect.DVASPECT_CONTENT)]
        public ST_DvAspect dvAspect
        {
            get
            {
                return this.dvAspectField;
            }
            set
            {
                this.dvAspectField = value;
            }
        }

        public string link
        {
            get
            {
                return this.linkField;
            }
            set
            {
                this.linkField = value;
            }
        }

        public ST_OleUpdate oleUpdate
        {
            get
            {
                return this.oleUpdateField;
            }
            set
            {
                this.oleUpdateField = value;
            }
        }

        [XmlIgnore]
        public bool oleUpdateSpecified
        {
            get
            {
                return this.oleUpdateFieldSpecified;
            }
            set
            {
                this.oleUpdateFieldSpecified = value;
            }
        }

        [DefaultValue(false)]
        public bool autoLoad
        {
            get
            {
                return this.autoLoadField;
            }
            set
            {
                this.autoLoadField = value;
            }
        }

        public uint shapeId
        {
            get
            {
                return this.shapeIdField;
            }
            set
            {
                this.shapeIdField = value;
            }
        }

        // TODO is the following correct?
        [XmlAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        public static CT_OleObject Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_OleObject ctObj = new CT_OleObject();
            ctObj.progId = XmlHelper.ReadString(node.Attributes["progId"]);
            if (node.Attributes["dvAspect"] != null)
                ctObj.dvAspect = (ST_DvAspect)Enum.Parse(typeof(ST_DvAspect), node.Attributes["dvAspect"].Value);
            ctObj.link = XmlHelper.ReadString(node.Attributes["link"]);
            if (node.Attributes["oleUpdate"] != null)
                ctObj.oleUpdate = (ST_OleUpdate)Enum.Parse(typeof(ST_OleUpdate), node.Attributes["oleUpdate"].Value);
            ctObj.autoLoad = XmlHelper.ReadBool(node.Attributes["autoLoad"]);
            ctObj.shapeId = XmlHelper.ReadUInt(node.Attributes["shapeId"]);
            ctObj.id = XmlHelper.ReadString(node.Attributes["id", PackageNamespaces.SCHEMA_RELATIONSHIPS]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "progId", this.progId);
            XmlHelper.WriteAttribute(sw, "dvAspect", this.dvAspect.ToString());
            XmlHelper.WriteAttribute(sw, "link", this.link);
            XmlHelper.WriteAttribute(sw, "oleUpdate", this.oleUpdate.ToString());
            XmlHelper.WriteAttribute(sw, "autoLoad", this.autoLoad);
            XmlHelper.WriteAttribute(sw, "shapeId", this.shapeId);
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    public enum ST_DvAspect
    {
        DVASPECT_CONTENT,
        DVASPECT_ICON,
    }

    public enum ST_OleUpdate
    {
        OLEUPDATE_ALWAYS,
        OLEUPDATE_ONCALL,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Control
    {

        private uint shapeIdField;

        private string idField;

        private string nameField;

        public uint shapeId
        {
            get
            {
                return this.shapeIdField;
            }
            set
            {
                this.shapeIdField = value;
            }
        }

        // TODO is the following correct?
        [XmlAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        public static CT_Control Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Control ctObj = new CT_Control();
            ctObj.shapeId = XmlHelper.ReadUInt(node.Attributes["shapeId"]);
            ctObj.id = XmlHelper.ReadString(node.Attributes["id", PackageNamespaces.SCHEMA_RELATIONSHIPS]);
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "shapeId", this.shapeId);
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            XmlHelper.WriteAttribute(sw, "name", this.name);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_WebPublishItems
    {

        private List<CT_WebPublishItem> webPublishItemField;

        private uint countField;

        private bool countFieldSpecified;

        public CT_WebPublishItems()
        {
            //this.webPublishItemField = new List<CT_WebPublishItem>();
        }
        public static CT_WebPublishItems Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_WebPublishItems ctObj = new CT_WebPublishItems();
            if (node.Attributes["count"] != null)
                ctObj.count = XmlHelper.ReadUInt(node.Attributes["count"]);
            ctObj.webPublishItem = new List<CT_WebPublishItem>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "webPublishItem")
                    ctObj.webPublishItem.Add(CT_WebPublishItem.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }
        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "count", this.count, true);
            sw.Write(">");
            if (this.webPublishItem != null)
            {
                foreach (CT_WebPublishItem x in this.webPublishItem)
                {
                    x.Write(sw, "webPublishItem");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }
        public List<CT_WebPublishItem> webPublishItem
        {
            get
            {
                return this.webPublishItemField;
            }
            set
            {
                this.webPublishItemField = value;
            }
        }

        public uint count
        {
            get
            {
                return this.countField;
            }
            set
            {
                this.countField = value;
            }
        }

        [XmlIgnore]
        public bool countSpecified
        {
            get
            {
                return this.countFieldSpecified;
            }
            set
            {
                this.countFieldSpecified = value;
            }
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_WebPublishItem
    {

        private uint idField;

        private string divIdField;

        private ST_WebSourceType sourceTypeField;

        private string sourceRefField;

        private string sourceObjectField;

        private string destinationFileField;

        private string titleField;

        private bool autoRepublishField;

        public CT_WebPublishItem()
        {
            this.autoRepublishField = false;
        }
        public static CT_WebPublishItem Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_WebPublishItem ctObj = new CT_WebPublishItem();
            if (node.Attributes["id"] != null)
                ctObj.id = XmlHelper.ReadUInt(node.Attributes["id"]);
            ctObj.divId = XmlHelper.ReadString(node.Attributes["divId"]);
            if (node.Attributes["sourceType"] != null)
                ctObj.sourceType = (ST_WebSourceType)Enum.Parse(typeof(ST_WebSourceType), node.Attributes["sourceType"].Value);
            ctObj.sourceRef = XmlHelper.ReadString(node.Attributes["sourceRef"]);
            ctObj.sourceObject = XmlHelper.ReadString(node.Attributes["sourceObject"]);
            ctObj.destinationFile = XmlHelper.ReadString(node.Attributes["destinationFile"]);
            ctObj.title = XmlHelper.ReadString(node.Attributes["title"]);
            if (node.Attributes["autoRepublish"] != null)
                ctObj.autoRepublish = XmlHelper.ReadBool(node.Attributes["autoRepublish"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "id", this.id);
            XmlHelper.WriteAttribute(sw, "divId", this.divId);
            XmlHelper.WriteAttribute(sw, "sourceType", this.sourceType.ToString());
            XmlHelper.WriteAttribute(sw, "sourceRef", this.sourceRef);
            XmlHelper.WriteAttribute(sw, "sourceObject", this.sourceObject);
            XmlHelper.WriteAttribute(sw, "destinationFile", this.destinationFile);
            XmlHelper.WriteAttribute(sw, "title", this.title);
            if (autoRepublish)
                XmlHelper.WriteAttribute(sw, "autoRepublish", this.autoRepublish);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }
        public uint id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        public string divId
        {
            get
            {
                return this.divIdField;
            }
            set
            {
                this.divIdField = value;
            }
        }

        public ST_WebSourceType sourceType
        {
            get
            {
                return this.sourceTypeField;
            }
            set
            {
                this.sourceTypeField = value;
            }
        }

        public string sourceRef
        {
            get
            {
                return this.sourceRefField;
            }
            set
            {
                this.sourceRefField = value;
            }
        }

        public string sourceObject
        {
            get
            {
                return this.sourceObjectField;
            }
            set
            {
                this.sourceObjectField = value;
            }
        }

        public string destinationFile
        {
            get
            {
                return this.destinationFileField;
            }
            set
            {
                this.destinationFileField = value;
            }
        }

        public string title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        [DefaultValue(false)]
        public bool autoRepublish
        {
            get
            {
                return this.autoRepublishField;
            }
            set
            {
                this.autoRepublishField = value;
            }
        }
    }

    public enum ST_WebSourceType
    {
        sheet,
        printArea,
        autoFilter,
        range,
        chart,
        pivotTable,
        query,
        label,
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_TableParts
    {

        private List<CT_TablePart> tablePartField;

        private uint countField;

        private bool countFieldSpecified;

        public CT_TableParts()
        {
            this.tablePartField = new List<CT_TablePart>();
        }

        public CT_TablePart AddNewTablePart()
        {
            CT_TablePart tp = new CT_TablePart();
            this.tablePart.Add(tp);
            return tp;
        }
        [XmlElement]
        public List<CT_TablePart> tablePart
        {
            get
            {
                return this.tablePartField;
            }
            set
            {
                this.tablePartField = value;
            }
        }
        [XmlAttribute]
        public uint count
        {
            get
            {
                return this.countField;
            }
            set
            {
                this.countField = value;
            }
        }

        [XmlIgnore]
        public bool countSpecified
        {
            get
            {
                return this.countFieldSpecified;
            }
            set
            {
                this.countFieldSpecified = value;
            }
        }

        public static CT_TableParts Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TableParts ctObj = new CT_TableParts();
            ctObj.count = XmlHelper.ReadUInt(node.Attributes["count"]);
            ctObj.tablePart = new List<CT_TablePart>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "tablePart")
                    ctObj.tablePart.Add(CT_TablePart.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "count", this.count);
            sw.Write(">");
            if (this.tablePart != null)
            {
                foreach (CT_TablePart x in this.tablePart)
                {
                    x.Write(sw, "tablePart");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_TablePart
    {

        private string idField;

        // TODO is the following correct?
        [XmlAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        public static CT_TablePart Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_TablePart ctObj = new CT_TablePart();
            ctObj.id = XmlHelper.ReadString(node.Attributes["id", PackageNamespaces.SCHEMA_RELATIONSHIPS]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    [XmlRoot("chartsheet", Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main", IsNullable = false)]
    public class CT_Chartsheet
    {
        private CT_ChartsheetPr sheetPrField;

        private CT_ChartsheetViews sheetViewsField;

        private CT_ChartsheetProtection sheetProtectionField;

        private CT_CustomChartsheetViews customSheetViewsField;

        private CT_PageMargins pageMarginsField;

        private CT_CsPageSetup pageSetupField;

        private CT_HeaderFooter headerFooterField;

        private CT_Drawing drawingField;

        private CT_LegacyDrawing legacyDrawingField;

        private CT_LegacyDrawing legacyDrawingHFField;

        private CT_SheetBackgroundPicture pictureField;

        private CT_WebPublishItems webPublishItemsField;

        private CT_ExtensionList extLstField;

        public CT_Chartsheet()
        {
        }
        public static CT_Chartsheet Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Chartsheet ctObj = new CT_Chartsheet();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "sheetPr")
                    ctObj.sheetPr = CT_ChartsheetPr.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sheetViews")
                    ctObj.sheetViews = CT_ChartsheetViews.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sheetProtection")
                    ctObj.sheetProtection = CT_ChartsheetProtection.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "customSheetViews")
                    ctObj.customSheetViews = CT_CustomChartsheetViews.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pageMargins")
                    ctObj.pageMargins = CT_PageMargins.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pageSetup")
                    ctObj.pageSetup = CT_CsPageSetup.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "headerFooter")
                    ctObj.headerFooter = CT_HeaderFooter.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "drawing")
                    ctObj.drawing = CT_Drawing.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "legacyDrawing")
                    ctObj.legacyDrawing = CT_LegacyDrawing.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "legacyDrawingHF")
                    ctObj.legacyDrawingHF = CT_LegacyDrawing.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "picture")
                    ctObj.picture = CT_SheetBackgroundPicture.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "webPublishItems")
                    ctObj.webPublishItems = CT_WebPublishItems.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }

        internal void Write(Stream stream)
        {
            using (StreamWriter sw = new StreamWriter(stream))
            {
                sw.Write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>");
                sw.Write("<chartsheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"");
                sw.Write(" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"");
                sw.Write(">");
                if (this.sheetPr != null)
                    this.sheetPr.Write(sw, "sheetPr");
                if (this.sheetViews != null)
                    this.sheetViews.Write(sw, "sheetViews");
                if (this.sheetProtection != null)
                    this.sheetProtection.Write(sw, "sheetProtection");
                if (this.customSheetViews != null)
                    this.customSheetViews.Write(sw, "customSheetViews");
                if (this.pageMargins != null)
                    this.pageMargins.Write(sw, "pageMargins");
                if (this.pageSetup != null)
                    this.pageSetup.Write(sw, "pageSetup");
                if (this.headerFooter != null)
                    this.headerFooter.Write(sw, "headerFooter");
                if (this.drawing != null)
                    this.drawing.Write(sw, "drawing");
                if (this.legacyDrawing != null)
                    this.legacyDrawing.Write(sw, "legacyDrawing");
                if (this.legacyDrawingHF != null)
                    this.legacyDrawingHF.Write(sw, "legacyDrawingHF");
                if (this.picture != null)
                    this.picture.Write(sw, "picture");
                if (this.webPublishItems != null)
                    this.webPublishItems.Write(sw, "webPublishItems");
                if (this.extLst != null)
                    this.extLst.Write(sw, "extLst");
                sw.Write("</chartsheet>");
            }
        }

        [XmlElement]
        public CT_ChartsheetPr sheetPr
        {
            get
            {
                return this.sheetPrField;
            }
            set
            {
                this.sheetPrField = value;
            }
        }
        [XmlElement]
        public CT_ChartsheetViews sheetViews
        {
            get
            {
                return this.sheetViewsField;
            }
            set
            {
                this.sheetViewsField = value;
            }
        }
        [XmlElement]
        public CT_ChartsheetProtection sheetProtection
        {
            get
            {
                return this.sheetProtectionField;
            }
            set
            {
                this.sheetProtectionField = value;
            }
        }
        [XmlElement]
        public CT_CustomChartsheetViews customSheetViews
        {
            get
            {
                return this.customSheetViewsField;
            }
            set
            {
                this.customSheetViewsField = value;
            }
        }
        [XmlElement]
        public CT_PageMargins pageMargins
        {
            get
            {
                return this.pageMarginsField;
            }
            set
            {
                this.pageMarginsField = value;
            }
        }
        [XmlElement]
        public CT_CsPageSetup pageSetup
        {
            get
            {
                return this.pageSetupField;
            }
            set
            {
                this.pageSetupField = value;
            }
        }
        [XmlElement]
        public CT_HeaderFooter headerFooter
        {
            get
            {
                return this.headerFooterField;
            }
            set
            {
                this.headerFooterField = value;
            }
        }
        [XmlElement]
        public CT_Drawing drawing
        {
            get
            {
                return this.drawingField;
            }
            set
            {
                this.drawingField = value;
            }
        }
        [XmlElement]
        public CT_LegacyDrawing legacyDrawing
        {
            get
            {
                return this.legacyDrawingField;
            }
            set
            {
                this.legacyDrawingField = value;
            }
        }
        [XmlElement]
        public CT_LegacyDrawing legacyDrawingHF
        {
            get
            {
                return this.legacyDrawingHFField;
            }
            set
            {
                this.legacyDrawingHFField = value;
            }
        }
        [XmlElement]
        public CT_SheetBackgroundPicture picture
        {
            get
            {
                return this.pictureField;
            }
            set
            {
                this.pictureField = value;
            }
        }
        [XmlElement]
        public CT_WebPublishItems webPublishItems
        {
            get
            {
                return this.webPublishItemsField;
            }
            set
            {
                this.webPublishItemsField = value;
            }
        }
        [XmlElement]
        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_ChartsheetPr
    {

        private CT_Color tabColorField;

        private bool publishedField;

        private string codeNameField;

        public CT_ChartsheetPr()
        {
            //this.tabColorField = new CT_Color();
            this.publishedField = true;
        }
        public static CT_ChartsheetPr Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ChartsheetPr ctObj = new CT_ChartsheetPr();
            if (node.Attributes["published"] != null)
                ctObj.published = XmlHelper.ReadBool(node.Attributes["published"]);
            ctObj.codeName = XmlHelper.ReadString(node.Attributes["codeName"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "tabColor")
                    ctObj.tabColor = CT_Color.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            if (!published)
                XmlHelper.WriteAttribute(sw, "published", this.published);
            XmlHelper.WriteAttribute(sw, "codeName", this.codeName);
            sw.Write(">");
            if (this.tabColor != null)
                this.tabColor.Write(sw, "tabColor");
            sw.Write(string.Format("</{0}>", nodeName));
        }

        public CT_Color tabColor
        {
            get
            {
                return this.tabColorField;
            }
            set
            {
                this.tabColorField = value;
            }
        }

        [DefaultValue(true)]
        public bool published
        {
            get
            {
                return this.publishedField;
            }
            set
            {
                this.publishedField = value;
            }
        }

        public string codeName
        {
            get
            {
                return this.codeNameField;
            }
            set
            {
                this.codeNameField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_ChartsheetViews
    {

        private List<CT_ChartsheetView> sheetViewField;

        private CT_ExtensionList extLstField;

        public CT_ChartsheetViews()
        {
            //this.extLstField = new CT_ExtensionList();
            //this.sheetViewField = new List<CT_ChartsheetView>();
        }
        public static CT_ChartsheetViews Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ChartsheetViews ctObj = new CT_ChartsheetViews();
            ctObj.sheetView = new List<CT_ChartsheetView>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sheetView")
                    ctObj.sheetView.Add(CT_ChartsheetView.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            if (this.sheetView != null)
            {
                foreach (CT_ChartsheetView x in this.sheetView)
                {
                    x.Write(sw, "sheetView");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        public List<CT_ChartsheetView> sheetView
        {
            get
            {
                return this.sheetViewField;
            }
            set
            {
                this.sheetViewField = value;
            }
        }

        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_ChartsheetView
    {

        private CT_ExtensionList extLstField;

        private bool tabSelectedField;

        private uint zoomScaleField;

        private uint workbookViewIdField;

        private bool zoomToFitField;

        public CT_ChartsheetView()
        {
            //this.extLstField = new CT_ExtensionList();
            this.tabSelectedField = false;
            this.zoomScaleField = ((uint)(100));
            this.zoomToFitField = false;
        }

        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        [DefaultValue(false)]
        public bool tabSelected
        {
            get
            {
                return this.tabSelectedField;
            }
            set
            {
                this.tabSelectedField = value;
            }
        }

        [DefaultValue(typeof(uint), "100")]
        public uint zoomScale
        {
            get
            {
                return this.zoomScaleField;
            }
            set
            {
                this.zoomScaleField = value;
            }
        }

        public uint workbookViewId
        {
            get
            {
                return this.workbookViewIdField;
            }
            set
            {
                this.workbookViewIdField = value;
            }
        }

        [DefaultValue(false)]
        public bool zoomToFit
        {
            get
            {
                return this.zoomToFitField;
            }
            set
            {
                this.zoomToFitField = value;
            }
        }
        public static CT_ChartsheetView Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ChartsheetView ctObj = new CT_ChartsheetView();
            if (node.Attributes["tabSelected"] != null)
                ctObj.tabSelected = XmlHelper.ReadBool(node.Attributes["tabSelected"]);
            if (node.Attributes["zoomScale"] != null)
                ctObj.zoomScale = XmlHelper.ReadUInt(node.Attributes["zoomScale"]);
            if (node.Attributes["workbookViewId"] != null)
                ctObj.workbookViewId = XmlHelper.ReadUInt(node.Attributes["workbookViewId"]);
            if (node.Attributes["zoomToFit"] != null)
                ctObj.zoomToFit = XmlHelper.ReadBool(node.Attributes["zoomToFit"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_ExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            if (tabSelected)
                XmlHelper.WriteAttribute(sw, "tabSelected", this.tabSelected);
            if (zoomScale != 100)
                XmlHelper.WriteAttribute(sw, "zoomScale", this.zoomScale);
            XmlHelper.WriteAttribute(sw, "workbookViewId", this.workbookViewId);
            if (zoomToFit)
                XmlHelper.WriteAttribute(sw, "zoomToFit", this.zoomToFit);
            sw.Write(">");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_ChartsheetProtection
    {

        private byte[] passwordField;

        private bool contentField;

        private bool objectsField;

        public CT_ChartsheetProtection()
        {
            this.contentField = false;
            this.objectsField = false;
        }

        public byte[] password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }

        [DefaultValue(false)]
        public bool content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentField = value;
            }
        }

        [DefaultValue(false)]
        public bool objects
        {
            get
            {
                return this.objectsField;
            }
            set
            {
                this.objectsField = value;
            }
        }
        public static CT_ChartsheetProtection Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ChartsheetProtection ctObj = new CT_ChartsheetProtection();
            if (node.Attributes["password"] != null)
                ctObj.password = XmlHelper.ReadBytes(node.Attributes["password"]);
            if (node.Attributes["content"] != null)
                ctObj.content = XmlHelper.ReadBool(node.Attributes["content"]);
            if (node.Attributes["objects"] != null)
                ctObj.objects = XmlHelper.ReadBool(node.Attributes["objects"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "password", this.password);
            if (content)
                XmlHelper.WriteAttribute(sw, "content", this.content);
            if (objects)
                XmlHelper.WriteAttribute(sw, "objects", this.objects);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CustomChartsheetView
    {

        private CT_PageMargins pageMarginsField;

        private CT_CsPageSetup pageSetupField;

        private CT_HeaderFooter headerFooterField;

        private string guidField;

        private uint scaleField;

        private ST_SheetState stateField;

        private bool zoomToFitField;

        public CT_CustomChartsheetView()
        {
            //this.headerFooterField = new CT_HeaderFooter();
            //this.pageSetupField = new CT_CsPageSetup();
            //this.pageMarginsField = new CT_PageMargins();
            this.scaleField = ((uint)(100));
            this.stateField = ST_SheetState.visible;
            this.zoomToFitField = false;
        }

        public CT_PageMargins pageMargins
        {
            get
            {
                return this.pageMarginsField;
            }
            set
            {
                this.pageMarginsField = value;
            }
        }

        public CT_CsPageSetup pageSetup
        {
            get
            {
                return this.pageSetupField;
            }
            set
            {
                this.pageSetupField = value;
            }
        }

        public CT_HeaderFooter headerFooter
        {
            get
            {
                return this.headerFooterField;
            }
            set
            {
                this.headerFooterField = value;
            }
        }

        public string guid
        {
            get
            {
                return this.guidField;
            }
            set
            {
                this.guidField = value;
            }
        }

        [DefaultValue(typeof(uint), "100")]
        public uint scale
        {
            get
            {
                return this.scaleField;
            }
            set
            {
                this.scaleField = value;
            }
        }

        [DefaultValue(ST_SheetState.visible)]
        public ST_SheetState state
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

        [DefaultValue(false)]
        public bool zoomToFit
        {
            get
            {
                return this.zoomToFitField;
            }
            set
            {
                this.zoomToFitField = value;
            }
        }
        public static CT_CustomChartsheetView Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CustomChartsheetView ctObj = new CT_CustomChartsheetView();
            ctObj.guid = XmlHelper.ReadString(node.Attributes["guid"]);
            if (node.Attributes["scale"] != null)
                ctObj.scale = XmlHelper.ReadUInt(node.Attributes["scale"]);
            if (node.Attributes["state"] != null)
                ctObj.state = (ST_SheetState)Enum.Parse(typeof(ST_SheetState), node.Attributes["state"].Value);
            if (node.Attributes["zoomToFit"] != null)
                ctObj.zoomToFit = XmlHelper.ReadBool(node.Attributes["zoomToFit"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "pageMargins")
                    ctObj.pageMargins = CT_PageMargins.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "pageSetup")
                    ctObj.pageSetup = CT_CsPageSetup.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "headerFooter")
                    ctObj.headerFooter = CT_HeaderFooter.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));

            XmlHelper.WriteAttribute(sw, "guid", this.guid);
            if (this.scale != 100)
                XmlHelper.WriteAttribute(sw, "scale", this.scale);
            if (this.state != ST_SheetState.visible)
                XmlHelper.WriteAttribute(sw, "state", this.state.ToString());
            if (this.zoomToFit)
                XmlHelper.WriteAttribute(sw, "zoomToFit", this.zoomToFit);
            sw.Write(">");
            if (this.pageMargins != null)
                this.pageMargins.Write(sw, "pageMargins");
            if (this.pageSetup != null)
                this.pageSetup.Write(sw, "pageSetup");
            if (this.headerFooter != null)
                this.headerFooter.Write(sw, "headerFooter");
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CsPageSetup
    {

        private uint paperSizeField;

        private uint firstPageNumberField;

        private ST_Orientation orientationField;

        private bool usePrinterDefaultsField;

        private bool blackAndWhiteField;

        private bool draftField;

        private bool useFirstPageNumberField;

        private uint horizontalDpiField;

        private uint verticalDpiField;

        private uint copiesField;

        private string idField;

        public CT_CsPageSetup()
        {
            this.paperSizeField = ((uint)(1));
            this.firstPageNumberField = ((uint)(1));
            this.orientationField = ST_Orientation.@default;
            this.usePrinterDefaultsField = true;
            this.blackAndWhiteField = false;
            this.draftField = false;
            this.useFirstPageNumberField = false;
            this.horizontalDpiField = ((uint)(600));
            this.verticalDpiField = ((uint)(600));
            this.copiesField = ((uint)(1));
        }
        public static CT_CsPageSetup Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CsPageSetup ctObj = new CT_CsPageSetup();
            if (node.Attributes["paperSize"] != null)
                ctObj.paperSize = XmlHelper.ReadUInt(node.Attributes["paperSize"]);
            if (node.Attributes["firstPageNumber"] != null)
                ctObj.firstPageNumber = XmlHelper.ReadUInt(node.Attributes["firstPageNumber"]);
            if (node.Attributes["orientation"] != null)
                ctObj.orientation = (ST_Orientation)Enum.Parse(typeof(ST_Orientation), node.Attributes["orientation"].Value);
            if (node.Attributes["usePrinterDefaults"] != null)
                ctObj.usePrinterDefaults = XmlHelper.ReadBool(node.Attributes["usePrinterDefaults"]);
            if (node.Attributes["blackAndWhite"] != null)
                ctObj.blackAndWhite = XmlHelper.ReadBool(node.Attributes["blackAndWhite"]);

            if (node.Attributes["draft"] != null)
                ctObj.draft = XmlHelper.ReadBool(node.Attributes["draft"]);
            if (node.Attributes["useFirstPageNumber"] != null)
                ctObj.useFirstPageNumber = XmlHelper.ReadBool(node.Attributes["useFirstPageNumber"]);
            if (node.Attributes["horizontalDpi"] != null)
                ctObj.horizontalDpi = XmlHelper.ReadUInt(node.Attributes["horizontalDpi"]);
            if (node.Attributes["verticalDpi"] != null)
                ctObj.verticalDpi = XmlHelper.ReadUInt(node.Attributes["verticalDpi"]);
            if (node.Attributes["copies"] != null)
                ctObj.copies = XmlHelper.ReadUInt(node.Attributes["copies"]);
            ctObj.id = XmlHelper.ReadString(node.Attributes["r:id"]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            if (paperSize != 1)
                XmlHelper.WriteAttribute(sw, "paperSize", this.paperSize);
            if (paperSize != 1)
                XmlHelper.WriteAttribute(sw, "firstPageNumber", this.firstPageNumber);
            if (orientation != ST_Orientation.@default)
                XmlHelper.WriteAttribute(sw, "orientation", this.orientation.ToString());
            if (!usePrinterDefaults)
                XmlHelper.WriteAttribute(sw, "usePrinterDefaults", this.usePrinterDefaults);
            if (blackAndWhite)
                XmlHelper.WriteAttribute(sw, "blackAndWhite", this.blackAndWhite);
            if (draft)
                XmlHelper.WriteAttribute(sw, "draft", this.draft);
            if (useFirstPageNumber)
                XmlHelper.WriteAttribute(sw, "useFirstPageNumber", this.useFirstPageNumber);
            if (horizontalDpi != 600)
                XmlHelper.WriteAttribute(sw, "horizontalDpi", this.horizontalDpi);
            if (verticalDpi != 600)
                XmlHelper.WriteAttribute(sw, "verticalDpi", this.verticalDpi);
            if (this.copies != 1)
                XmlHelper.WriteAttribute(sw, "copies", this.copies);
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }

        [DefaultValue(typeof(uint), "1")]
        public uint paperSize
        {
            get
            {
                return this.paperSizeField;
            }
            set
            {
                this.paperSizeField = value;
            }
        }

        [DefaultValue(typeof(uint), "1")]
        public uint firstPageNumber
        {
            get
            {
                return this.firstPageNumberField;
            }
            set
            {
                this.firstPageNumberField = value;
            }
        }

        [DefaultValue(ST_Orientation.@default)]
        public ST_Orientation orientation
        {
            get
            {
                return this.orientationField;
            }
            set
            {
                this.orientationField = value;
            }
        }

        [DefaultValue(true)]
        public bool usePrinterDefaults
        {
            get
            {
                return this.usePrinterDefaultsField;
            }
            set
            {
                this.usePrinterDefaultsField = value;
            }
        }

        [DefaultValue(false)]
        public bool blackAndWhite
        {
            get
            {
                return this.blackAndWhiteField;
            }
            set
            {
                this.blackAndWhiteField = value;
            }
        }

        [DefaultValue(false)]
        public bool draft
        {
            get
            {
                return this.draftField;
            }
            set
            {
                this.draftField = value;
            }
        }

        [DefaultValue(false)]
        public bool useFirstPageNumber
        {
            get
            {
                return this.useFirstPageNumberField;
            }
            set
            {
                this.useFirstPageNumberField = value;
            }
        }

        [DefaultValue(typeof(uint), "600")]
        public uint horizontalDpi
        {
            get
            {
                return this.horizontalDpiField;
            }
            set
            {
                this.horizontalDpiField = value;
            }
        }

        [DefaultValue(typeof(uint), "600")]
        public uint verticalDpi
        {
            get
            {
                return this.verticalDpiField;
            }
            set
            {
                this.verticalDpiField = value;
            }
        }

        [DefaultValue(typeof(uint), "1")]
        public uint copies
        {
            get
            {
                return this.copiesField;
            }
            set
            {
                this.copiesField = value;
            }
        }

        // TODO is the following correct?
        [XmlAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Drawing
    {
        private string idField = string.Empty;

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get { return this.idField; }
            set { this.idField = value; }
        }

        public static CT_Drawing Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Drawing ctObj = new CT_Drawing();
            ctObj.id = XmlHelper.ReadString(node.Attributes["id", PackageNamespaces.SCHEMA_RELATIONSHIPS]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write(">");
            sw.Write(string.Format("</{0}>", nodeName));
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_LegacyDrawing
    {
        private string idField = string.Empty;
        public static CT_LegacyDrawing Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_LegacyDrawing ctObj = new CT_LegacyDrawing();
            ctObj.id = XmlHelper.ReadString(node.Attributes["id", PackageNamespaces.SCHEMA_RELATIONSHIPS]);
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "r:id", this.id);
            sw.Write("/>");
        }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://schemas.openxmlformats.org/officeDocument/2006/relationships")]
        public string id
        {
            get { return this.idField; }
            set { this.idField = value; }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Dialogsheet
    {
        // all elements of this sequence are 0..1

        private CT_SheetPr sheetPrField = null;

        private CT_SheetViews sheetViewsField = null;

        private CT_SheetFormatPr sheetFormatPrField = null;

        private CT_SheetProtection sheetProtectionField = null;

        private List<CT_CustomSheetView> customSheetViewsField = null;

        private CT_PrintOptions printOptionsField = null;

        private CT_PageMargins pageMarginsField = null;

        private CT_PageSetup pageSetupField = null;

        private CT_HeaderFooter headerFooterField = null;

        private OpenXmlFormats.Spreadsheet.CT_Drawing drawingField = null; // there are 4 CT_Drawing!

        private OpenXmlFormats.Spreadsheet.CT_LegacyDrawing legacyDrawingField = null;

        private CT_LegacyDrawing legacyDrawingHFField = null;

        private List<CT_OleObject> oleObjectsField = null;

        private CT_ExtensionList extLstField = null;
        public CT_SheetPr sheetPr
        {
            get
            {
                return this.sheetPrField;
            }
            set
            {
                this.sheetPrField = value;
            }
        }

        public CT_SheetViews sheetViews
        {
            get
            {
                return this.sheetViewsField;
            }
            set
            {
                this.sheetViewsField = value;
            }
        }

        public CT_SheetFormatPr sheetFormatPr
        {
            get
            {
                return this.sheetFormatPrField;
            }
            set
            {
                this.sheetFormatPrField = value;
            }
        }

        public CT_SheetProtection sheetProtection
        {
            get
            {
                return this.sheetProtectionField;
            }
            set
            {
                this.sheetProtectionField = value;
            }
        }

        [XmlArray(Order = 4)]
        [XmlArrayItem("customSheetView", IsNullable = false)]
        public List<CT_CustomSheetView> customSheetViews
        {
            get
            {
                return this.customSheetViewsField;
            }
            set
            {
                this.customSheetViewsField = value;
            }
        }

        public CT_PrintOptions printOptions
        {
            get
            {
                return this.printOptionsField;
            }
            set
            {
                this.printOptionsField = value;
            }
        }

        public CT_PageMargins pageMargins
        {
            get
            {
                return this.pageMarginsField;
            }
            set
            {
                this.pageMarginsField = value;
            }
        }

        public CT_PageSetup pageSetup
        {
            get
            {
                return this.pageSetupField;
            }
            set
            {
                this.pageSetupField = value;
            }
        }

        public CT_HeaderFooter headerFooter
        {
            get
            {
                return this.headerFooterField;
            }
            set
            {
                this.headerFooterField = value;
            }
        }

        public CT_Drawing drawing
        {
            get
            {
                return this.drawingField;
            }
            set
            {
                this.drawingField = value;
            }
        }

        public CT_LegacyDrawing legacyDrawing
        {
            get
            {
                return this.legacyDrawingField;
            }
            set
            {
                this.legacyDrawingField = value;
            }
        }

        public CT_LegacyDrawing legacyDrawingHF
        {
            get
            {
                return this.legacyDrawingHFField;
            }
            set
            {
                this.legacyDrawingHFField = value;
            }
        }

        [XmlArray(Order = 12)]
        [XmlArrayItem("oleObject", IsNullable = false)]
        public List<CT_OleObject> oleObjects
        {
            get
            {
                return this.oleObjectsField;
            }
            set
            {
                this.oleObjectsField = value;
            }
        }

        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Macrosheet
    {

        private CT_SheetPr sheetPrField;

        private CT_SheetDimension dimensionField;

        private CT_SheetViews sheetViewsField;

        private CT_SheetFormatPr sheetFormatPrField;

        private List<CT_Col> colsField;

        private List<CT_Row> sheetDataField;

        private CT_SheetProtection sheetProtectionField;

        private CT_AutoFilter autoFilterField;

        private CT_SortState sortStateField;

        private CT_DataConsolidate dataConsolidateField;

        private List<CT_CustomSheetView> customSheetViewsField;

        private CT_PhoneticPr phoneticPrField;

        private List<CT_ConditionalFormatting> conditionalFormattingField;

        private CT_PrintOptions printOptionsField;

        private CT_PageMargins pageMarginsField;

        private CT_PageSetup pageSetupField;

        private CT_HeaderFooter headerFooterField;

        private CT_PageBreak rowBreaksField;

        private CT_PageBreak colBreaksField;

        private List<CT_CustomProperty> customPropertiesField;

        private CT_Drawing drawingField;

        private CT_LegacyDrawing legacyDrawingField;

        private CT_LegacyDrawing legacyDrawingHFField;

        private CT_SheetBackgroundPicture pictureField;

        private List<CT_OleObject> oleObjectsField;

        private CT_ExtensionList extLstField;

        public CT_Macrosheet()
        {
            this.extLstField = new CT_ExtensionList();
            this.oleObjectsField = new List<CT_OleObject>();
            this.pictureField = new CT_SheetBackgroundPicture();
            this.legacyDrawingHFField = new CT_LegacyDrawing();
            this.legacyDrawingField = new CT_LegacyDrawing();
            this.drawingField = new CT_Drawing();
            this.customPropertiesField = new List<CT_CustomProperty>();
            this.colBreaksField = new CT_PageBreak();
            this.rowBreaksField = new CT_PageBreak();
            this.headerFooterField = new CT_HeaderFooter();
            this.pageSetupField = new CT_PageSetup();
            this.pageMarginsField = new CT_PageMargins();
            this.printOptionsField = new CT_PrintOptions();
            this.conditionalFormattingField = new List<CT_ConditionalFormatting>();
            this.phoneticPrField = new CT_PhoneticPr();
            this.customSheetViewsField = new List<CT_CustomSheetView>();
            this.dataConsolidateField = new CT_DataConsolidate();
            this.sortStateField = new CT_SortState();
            this.autoFilterField = new CT_AutoFilter();
            this.sheetProtectionField = new CT_SheetProtection();
            this.sheetDataField = new List<CT_Row>();
            this.colsField = new List<CT_Col>();
            this.sheetFormatPrField = new CT_SheetFormatPr();
            this.sheetViewsField = new CT_SheetViews();
            this.dimensionField = new CT_SheetDimension();
            this.sheetPrField = new CT_SheetPr();
        }

        public CT_SheetPr sheetPr
        {
            get
            {
                return this.sheetPrField;
            }
            set
            {
                this.sheetPrField = value;
            }
        }

        public CT_SheetDimension dimension
        {
            get
            {
                return this.dimensionField;
            }
            set
            {
                this.dimensionField = value;
            }
        }

        public CT_SheetViews sheetViews
        {
            get
            {
                return this.sheetViewsField;
            }
            set
            {
                this.sheetViewsField = value;
            }
        }

        public CT_SheetFormatPr sheetFormatPr
        {
            get
            {
                return this.sheetFormatPrField;
            }
            set
            {
                this.sheetFormatPrField = value;
            }
        }

        [XmlArray(Order = 4)]
        [XmlArrayItem("col", typeof(CT_Col), IsNullable = false)]
        public List<CT_Col> cols
        {
            get
            {
                return this.colsField;
            }
            set
            {
                this.colsField = value;
            }
        }

        [XmlArray(Order = 5)]
        [XmlArrayItem("row", IsNullable = false)]
        public List<CT_Row> sheetData
        {
            get
            {
                return this.sheetDataField;
            }
            set
            {
                this.sheetDataField = value;
            }
        }

        public CT_SheetProtection sheetProtection
        {
            get
            {
                return this.sheetProtectionField;
            }
            set
            {
                this.sheetProtectionField = value;
            }
        }

        public CT_AutoFilter autoFilter
        {
            get
            {
                return this.autoFilterField;
            }
            set
            {
                this.autoFilterField = value;
            }
        }

        public CT_SortState sortState
        {
            get
            {
                return this.sortStateField;
            }
            set
            {
                this.sortStateField = value;
            }
        }

        public CT_DataConsolidate dataConsolidate
        {
            get
            {
                return this.dataConsolidateField;
            }
            set
            {
                this.dataConsolidateField = value;
            }
        }

        [XmlArray(Order = 10)]
        [XmlArrayItem("customSheetView", IsNullable = false)]
        public List<CT_CustomSheetView> customSheetViews
        {
            get
            {
                return this.customSheetViewsField;
            }
            set
            {
                this.customSheetViewsField = value;
            }
        }

        public CT_PhoneticPr phoneticPr
        {
            get
            {
                return this.phoneticPrField;
            }
            set
            {
                this.phoneticPrField = value;
            }
        }

        public List<CT_ConditionalFormatting> conditionalFormatting
        {
            get
            {
                return this.conditionalFormattingField;
            }
            set
            {
                this.conditionalFormattingField = value;
            }
        }

        public CT_PrintOptions printOptions
        {
            get
            {
                return this.printOptionsField;
            }
            set
            {
                this.printOptionsField = value;
            }
        }

        public CT_PageMargins pageMargins
        {
            get
            {
                return this.pageMarginsField;
            }
            set
            {
                this.pageMarginsField = value;
            }
        }

        public CT_PageSetup pageSetup
        {
            get
            {
                return this.pageSetupField;
            }
            set
            {
                this.pageSetupField = value;
            }
        }

        public CT_HeaderFooter headerFooter
        {
            get
            {
                return this.headerFooterField;
            }
            set
            {
                this.headerFooterField = value;
            }
        }

        public CT_PageBreak rowBreaks
        {
            get
            {
                return this.rowBreaksField;
            }
            set
            {
                this.rowBreaksField = value;
            }
        }

        public CT_PageBreak colBreaks
        {
            get
            {
                return this.colBreaksField;
            }
            set
            {
                this.colBreaksField = value;
            }
        }

        [XmlArray(Order = 19)]
        [XmlArrayItem("customPr", IsNullable = false)]
        public List<CT_CustomProperty> customProperties
        {
            get
            {
                return this.customPropertiesField;
            }
            set
            {
                this.customPropertiesField = value;
            }
        }

        public CT_Drawing drawing
        {
            get
            {
                return this.drawingField;
            }
            set
            {
                this.drawingField = value;
            }
        }

        public CT_LegacyDrawing legacyDrawing
        {
            get
            {
                return this.legacyDrawingField;
            }
            set
            {
                this.legacyDrawingField = value;
            }
        }

        public CT_LegacyDrawing legacyDrawingHF
        {
            get
            {
                return this.legacyDrawingHFField;
            }
            set
            {
                this.legacyDrawingHFField = value;
            }
        }

        public CT_SheetBackgroundPicture picture
        {
            get
            {
                return this.pictureField;
            }
            set
            {
                this.pictureField = value;
            }
        }

        [XmlArray(Order = 24)]
        [XmlArrayItem("oleObject", IsNullable = false)]
        public List<CT_OleObject> oleObjects
        {
            get
            {
                return this.oleObjectsField;
            }
            set
            {
                this.oleObjectsField = value;
            }
        }

        public CT_ExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_SmartTags
    {

        private List<CT_CellSmartTags> cellSmartTagsField;

        public CT_SmartTags()
        {
            this.cellSmartTagsField = new List<CT_CellSmartTags>();
        }

        public List<CT_CellSmartTags> cellSmartTags
        {
            get
            {
                return this.cellSmartTagsField;
            }
            set
            {
                this.cellSmartTagsField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CustomSheetViews
    {
        public static CT_CustomSheetViews Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CustomSheetViews ctObj = new CT_CustomSheetViews();
            ctObj.customSheetView = new List<CT_CustomSheetView>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "customSheetView")
                    ctObj.customSheetView.Add(CT_CustomSheetView.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.customSheetView != null)
            {
                foreach (CT_CustomSheetView x in this.customSheetView)
                {
                    x.Write(sw, "customSheetView");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        private List<CT_CustomSheetView> customSheetViewField;

        public CT_CustomSheetViews()
        {
            //this.customSheetViewField = new List<CT_CustomSheetView>();
        }

        public List<CT_CustomSheetView> customSheetView
        {
            get
            {
                return this.customSheetViewField;
            }
            set
            {
                this.customSheetViewField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Hyperlinks
    {

        private List<CT_Hyperlink> hyperlinkField = new List<CT_Hyperlink>(); // requiried

        //public CT_Hyperlinks()
        //{
        //    this.hyperlinkField = new List<CT_Hyperlink>();
        //}

        public static CT_Hyperlinks Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Hyperlinks ctObj = new CT_Hyperlinks();
            ctObj.hyperlink = new List<CT_Hyperlink>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "hyperlink")
                    ctObj.hyperlink.Add(CT_Hyperlink.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.hyperlink != null)
            {
                foreach (CT_Hyperlink x in this.hyperlink)
                {
                    x.Write(sw, "hyperlink");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }
        public void SetHyperlinkArray(CT_Hyperlink[] array)
        {
            hyperlinkField = new List<CT_Hyperlink>(array);
        }
        [XmlElement("hyperlink", IsNullable = false)]
        public List<CT_Hyperlink> hyperlink
        {
            get
            {
                return this.hyperlinkField;
            }
            set
            {
                this.hyperlinkField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_ProtectedRanges
    {

        private List<CT_ProtectedRange> protectedRangeField;
        public static CT_ProtectedRanges Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ProtectedRanges ctObj = new CT_ProtectedRanges();
            ctObj.protectedRange = new List<CT_ProtectedRange>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "protectedRange")
                    ctObj.protectedRange.Add(CT_ProtectedRange.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.protectedRange != null)
            {
                foreach (CT_ProtectedRange x in this.protectedRange)
                {
                    x.Write(sw, "protectedRange");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        public CT_ProtectedRanges()
        {
            //this.protectedRangeField = new List<CT_ProtectedRange>();
        }

        public List<CT_ProtectedRange> protectedRange
        {
            get
            {
                return this.protectedRangeField;
            }
            set
            {
                this.protectedRangeField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CellWatches
    {
        public static CT_CellWatches Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CellWatches ctObj = new CT_CellWatches();
            ctObj.cellWatch = new List<CT_CellWatch>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "cellWatch")
                    ctObj.cellWatch.Add(CT_CellWatch.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.cellWatch != null)
            {
                foreach (CT_CellWatch x in this.cellWatch)
                {
                    x.Write(sw, "cellWatch");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        private List<CT_CellWatch> cellWatchField;

        public CT_CellWatches()
        {
            //this.cellWatchField = new List<CT_CellWatch>();
        }

        public List<CT_CellWatch> cellWatch
        {
            get
            {
                return this.cellWatchField;
            }
            set
            {
                this.cellWatchField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CustomChartsheetViews
    {

        private List<CT_CustomChartsheetView> customSheetViewField;

        public CT_CustomChartsheetViews()
        {
            //this.customSheetViewField = new List<CT_CustomChartsheetView>();
        }

        public List<CT_CustomChartsheetView> customSheetView
        {
            get
            {
                return this.customSheetViewField;
            }
            set
            {
                this.customSheetViewField = value;
            }
        }
        public static CT_CustomChartsheetViews Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CustomChartsheetViews ctObj = new CT_CustomChartsheetViews();
            ctObj.customSheetView = new List<CT_CustomChartsheetView>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "customSheetView")
                    ctObj.customSheetView.Add(CT_CustomChartsheetView.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.customSheetView != null)
            {
                foreach (CT_CustomChartsheetView x in this.customSheetView)
                {
                    x.Write(sw, "customSheetView");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_CustomProperties
    {

        private List<CT_CustomProperty> customPrField;
        public static CT_CustomProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CustomProperties ctObj = new CT_CustomProperties();
            ctObj.customPr = new List<CT_CustomProperty>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "customPr")
                    ctObj.customPr.Add(CT_CustomProperty.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.customPr != null)
            {
                foreach (CT_CustomProperty x in this.customPr)
                {
                    x.Write(sw, "customPr");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        public CT_CustomProperties()
        {
            //this.customPrField = new List<CT_CustomProperty>();
        }

        public List<CT_CustomProperty> customPr
        {
            get
            {
                return this.customPrField;
            }
            set
            {
                this.customPrField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_OleObjects
    {
        public static CT_OleObjects Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_OleObjects ctObj = new CT_OleObjects();
            ctObj.oleObject = new List<CT_OleObject>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "oleObject")
                    ctObj.oleObject.Add(CT_OleObject.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.oleObject != null)
            {
                foreach (CT_OleObject x in this.oleObject)
                {
                    x.Write(sw, "oleObject");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        private List<CT_OleObject> oleObjectField;

        public CT_OleObjects()
        {
            //this.oleObjectField = new List<CT_OleObject>();
        }

        public List<CT_OleObject> oleObject
        {
            get
            {
                return this.oleObjectField;
            }
            set
            {
                this.oleObjectField = value;
            }
        }
    }

    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/spreadsheetml/2006/main")]
    public class CT_Controls
    {
        public static CT_Controls Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Controls ctObj = new CT_Controls();
            ctObj.control = new List<CT_Control>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "control")
                    ctObj.control.Add(CT_Control.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<{0}", nodeName));
            sw.Write(">");
            if (this.control != null)
            {
                foreach (CT_Control x in this.control)
                {
                    x.Write(sw, "control");
                }
            }
            sw.Write(string.Format("</{0}>", nodeName));
        }

        private List<CT_Control> controlField;

        public CT_Controls()
        {
            //this.controlField = new List<CT_Control>();
        }

        public List<CT_Control> control
        {
            get
            {
                return this.controlField;
            }
            set
            {
                this.controlField = value;
            }
        }
    }
}
