// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>NPOI.OpenXmlFormats.Dml</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace NPOI.OpenXmlFormats.Dml
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    using System.Xml;
    using NPOI.OpenXml4Net.Util;
    using System.IO;
    using NPOI.OpenXmlFormats.Vml;

    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_ColorScheme
    {

        private CT_Color dk1Field;

        private CT_Color lt1Field;

        private CT_Color dk2Field;

        private CT_Color lt2Field;

        private CT_Color accent1Field;

        private CT_Color accent2Field;

        private CT_Color accent3Field;

        private CT_Color accent4Field;

        private CT_Color accent5Field;

        private CT_Color accent6Field;

        private CT_Color hlinkField;

        private CT_Color folHlinkField;

        private CT_OfficeArtExtensionList extLstField;

        private string nameField;

        public CT_ColorScheme()
        {
        }
        public static CT_ColorScheme Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_ColorScheme ctObj = new CT_ColorScheme();
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "dk1")
                    ctObj.dk1 = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "lt1")
                    ctObj.lt1 = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "dk2")
                    ctObj.dk2 = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "lt2")
                    ctObj.lt2 = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "accent1")
                    ctObj.accent1 = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "accent2")
                    ctObj.accent2 = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "accent3")
                    ctObj.accent3 = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "accent4")
                    ctObj.accent4 = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "accent5")
                    ctObj.accent5 = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "accent6")
                    ctObj.accent6 = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "hlink")
                    ctObj.hlink = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "folHlink")
                    ctObj.folHlink = CT_Color.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_OfficeArtExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "name", this.name);
            sw.Write(">");
            if (this.dk1 != null)
                this.dk1.Write(sw, "dk1");
            if (this.lt1 != null)
                this.lt1.Write(sw, "lt1");
            if (this.dk2 != null)
                this.dk2.Write(sw, "dk2");
            if (this.lt2 != null)
                this.lt2.Write(sw, "lt2");
            if (this.accent1 != null)
                this.accent1.Write(sw, "accent1");
            if (this.accent2 != null)
                this.accent2.Write(sw, "accent2");
            if (this.accent3 != null)
                this.accent3.Write(sw, "accent3");
            if (this.accent4 != null)
                this.accent4.Write(sw, "accent4");
            if (this.accent5 != null)
                this.accent5.Write(sw, "accent5");
            if (this.accent6 != null)
                this.accent6.Write(sw, "accent6");
            if (this.hlink != null)
                this.hlink.Write(sw, "hlink");
            if (this.folHlink != null)
                this.folHlink.Write(sw, "folHlink");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        [XmlElement(Order = 0)]
        public CT_Color dk1
        {
            get
            {
                return this.dk1Field;
            }
            set
            {
                this.dk1Field = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_Color lt1
        {
            get
            {
                return this.lt1Field;
            }
            set
            {
                this.lt1Field = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Color dk2
        {
            get
            {
                return this.dk2Field;
            }
            set
            {
                this.dk2Field = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Color lt2
        {
            get
            {
                return this.lt2Field;
            }
            set
            {
                this.lt2Field = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_Color accent1
        {
            get
            {
                return this.accent1Field;
            }
            set
            {
                this.accent1Field = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_Color accent2
        {
            get
            {
                return this.accent2Field;
            }
            set
            {
                this.accent2Field = value;
            }
        }

        [XmlElement(Order = 6)]
        public CT_Color accent3
        {
            get
            {
                return this.accent3Field;
            }
            set
            {
                this.accent3Field = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_Color accent4
        {
            get
            {
                return this.accent4Field;
            }
            set
            {
                this.accent4Field = value;
            }
        }

        [XmlElement(Order = 8)]
        public CT_Color accent5
        {
            get
            {
                return this.accent5Field;
            }
            set
            {
                this.accent5Field = value;
            }
        }

        [XmlElement(Order = 9)]
        public CT_Color accent6
        {
            get
            {
                return this.accent6Field;
            }
            set
            {
                this.accent6Field = value;
            }
        }

        [XmlElement(Order = 10)]
        public CT_Color hlink
        {
            get
            {
                return this.hlinkField;
            }
            set
            {
                this.hlinkField = value;
            }
        }

        [XmlElement(Order = 11)]
        public CT_Color folHlink
        {
            get
            {
                return this.folHlinkField;
            }
            set
            {
                this.folHlinkField = value;
            }
        }

        [XmlElement(Order = 12)]
        public CT_OfficeArtExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        [XmlAttribute]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_CustomColor
    {

        private CT_ScRgbColor scrgbClrField;

        private CT_SRgbColor srgbClrField;

        private CT_HslColor hslClrField;

        private CT_SystemColor sysClrField;

        private CT_SchemeColor schemeClrField;

        private CT_PresetColor prstClrField;

        private string nameField;
        public static CT_CustomColor Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_CustomColor ctObj = new CT_CustomColor();
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "scrgbClr")
                    ctObj.scrgbClr = CT_ScRgbColor.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "srgbClr")
                    ctObj.srgbClr = CT_SRgbColor.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "hslClr")
                    ctObj.hslClr = CT_HslColor.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sysClr")
                    ctObj.sysClr = CT_SystemColor.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "schemeClr")
                    ctObj.schemeClr = CT_SchemeColor.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "prstClr")
                    ctObj.prstClr = CT_PresetColor.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "name", this.name);
            sw.Write(">");
            if (this.scrgbClr != null)
                this.scrgbClr.Write(sw, "scrgbClr");
            if (this.srgbClr != null)
                this.srgbClr.Write(sw, "srgbClr");
            if (this.hslClr != null)
                this.hslClr.Write(sw, "hslClr");
            if (this.sysClr != null)
                this.sysClr.Write(sw, "sysClr");
            if (this.schemeClr != null)
                this.schemeClr.Write(sw, "schemeClr");
            if (this.prstClr != null)
                this.prstClr.Write(sw, "prstClr");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        public CT_CustomColor()
        {
            //this.prstClrField = new CT_PresetColor();
            //this.schemeClrField = new CT_SchemeColor();
            //this.sysClrField = new CT_SystemColor();
            //this.hslClrField = new CT_HslColor();
            //this.srgbClrField = new CT_SRgbColor();
            //this.scrgbClrField = new CT_ScRgbColor();
            //this.nameField = "";
        }

        [XmlElement(Order = 0)]
        public CT_ScRgbColor scrgbClr
        {
            get
            {
                return this.scrgbClrField;
            }
            set
            {
                this.scrgbClrField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_SRgbColor srgbClr
        {
            get
            {
                return this.srgbClrField;
            }
            set
            {
                this.srgbClrField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_HslColor hslClr
        {
            get
            {
                return this.hslClrField;
            }
            set
            {
                this.hslClrField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_SystemColor sysClr
        {
            get
            {
                return this.sysClrField;
            }
            set
            {
                this.sysClrField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_SchemeColor schemeClr
        {
            get
            {
                return this.schemeClrField;
            }
            set
            {
                this.schemeClrField = value;
            }
        }

        [XmlElement(Order = 5)]
        public CT_PresetColor prstClr
        {
            get
            {
                return this.prstClrField;
            }
            set
            {
                this.prstClrField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue("")]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_SupplementalFont
    {

        private string scriptField;

        private string typefaceField;
        public static CT_SupplementalFont Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_SupplementalFont ctObj = new CT_SupplementalFont();
            ctObj.script = XmlHelper.ReadString(node.Attributes["script"]);
            ctObj.typeface = XmlHelper.ReadString(node.Attributes["typeface"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "script", this.script);
            XmlHelper.WriteAttribute(sw, "typeface", this.typeface, true);
            sw.Write("/>");
        }

        [XmlAttribute]
        public string script
        {
            get
            {
                return this.scriptField;
            }
            set
            {
                this.scriptField = value;
            }
        }

        [XmlAttribute]
        public string typeface
        {
            get
            {
                return this.typefaceField;
            }
            set
            {
                this.typefaceField = value;
            }
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_CustomColorList
    {

        private List<CT_CustomColor> custClrField;

        public CT_CustomColorList()
        {
            this.custClrField = new List<CT_CustomColor>();
        }

        [XmlElement("custClr", Order = 0)]
        public List<CT_CustomColor> custClr
        {
            get
            {
                return this.custClrField;
            }
            set
            {
                this.custClrField = value;
            }
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_FontCollection
    {

        private CT_TextFont latinField;

        private CT_TextFont eaField;

        private CT_TextFont csField;

        private List<CT_SupplementalFont> fontField;

        private CT_OfficeArtExtensionList extLstField;
        public static CT_FontCollection Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_FontCollection ctObj = new CT_FontCollection();
            ctObj.font = new List<CT_SupplementalFont>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "latin")
                    ctObj.latin = CT_TextFont.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "ea")
                    ctObj.ea = CT_TextFont.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "cs")
                    ctObj.cs = CT_TextFont.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_OfficeArtExtensionList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "font")
                    ctObj.font.Add(CT_SupplementalFont.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            sw.Write(">");
            if (this.latin != null)
                this.latin.Write(sw, "latin");
            if (this.ea != null)
                this.ea.Write(sw, "ea");
            if (this.cs != null)
                this.cs.Write(sw, "cs");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            if (this.font != null)
            {
                foreach (CT_SupplementalFont x in this.font)
                {
                    x.Write(sw, "font");
                }
            }
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        public CT_FontCollection()
        {
            //this.extLstField = new CT_OfficeArtExtensionList();
            //this.fontField = new List<CT_SupplementalFont>();
            //this.csField = new CT_TextFont();
            //this.eaField = new CT_TextFont();
            //this.latinField = new CT_TextFont();
        }

        [XmlElement(Order = 0)]
        public CT_TextFont latin
        {
            get
            {
                return this.latinField;
            }
            set
            {
                this.latinField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_TextFont ea
        {
            get
            {
                return this.eaField;
            }
            set
            {
                this.eaField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_TextFont cs
        {
            get
            {
                return this.csField;
            }
            set
            {
                this.csField = value;
            }
        }

        [XmlElement("font", Order = 3)]
        public List<CT_SupplementalFont> font
        {
            get
            {
                return this.fontField;
            }
            set
            {
                this.fontField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_OfficeArtExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }



    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_EffectStyleItem
    {

        private CT_EffectList effectLstField;

        private CT_EffectContainer effectDagField;

        private CT_Scene3D scene3dField;

        private CT_Shape3D sp3dField;
        public static CT_EffectStyleItem Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_EffectStyleItem ctObj = new CT_EffectStyleItem();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "effectLst")
                    ctObj.effectLst = CT_EffectList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "effectDag")
                    ctObj.effectDag = CT_EffectContainer.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "scene3d")
                    ctObj.scene3d = CT_Scene3D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "sp3d")
                    ctObj.sp3d = CT_Shape3D.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            sw.Write(">");
            if (this.effectLst != null)
                this.effectLst.Write(sw, "effectLst");
            if (this.effectDag != null)
                this.effectDag.Write(sw, "effectDag");
            if (this.scene3d != null)
                this.scene3d.Write(sw, "scene3d");
            if (this.sp3d != null)
                this.sp3d.Write(sw, "sp3d");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        public CT_EffectStyleItem()
        {
            //this.sp3dField = new CT_Shape3D();
            //this.scene3dField = new CT_Scene3D();
            //this.effectDagField = new CT_EffectContainer();
            //this.effectLstField = new CT_EffectList();
        }

        [XmlElement(Order = 0)]
        public CT_EffectList effectLst
        {
            get
            {
                return this.effectLstField;
            }
            set
            {
                this.effectLstField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_EffectContainer effectDag
        {
            get
            {
                return this.effectDagField;
            }
            set
            {
                this.effectDagField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_Scene3D scene3d
        {
            get
            {
                return this.scene3dField;
            }
            set
            {
                this.scene3dField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_Shape3D sp3d
        {
            get
            {
                return this.sp3dField;
            }
            set
            {
                this.sp3dField = value;
            }
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_FontScheme
    {

        private CT_FontCollection majorFontField;

        private CT_FontCollection minorFontField;

        private CT_OfficeArtExtensionList extLstField;

        private string nameField;
        public static CT_FontScheme Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_FontScheme ctObj = new CT_FontScheme();
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "majorFont")
                    ctObj.majorFont = CT_FontCollection.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "minorFont")
                    ctObj.minorFont = CT_FontCollection.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_OfficeArtExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "name", this.name);
            sw.Write(">");
            if (this.majorFont != null)
                this.majorFont.Write(sw, "majorFont");
            if (this.minorFont != null)
                this.minorFont.Write(sw, "minorFont");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        public CT_FontScheme()
        {
            //this.extLstField = new CT_OfficeArtExtensionList();
            //this.minorFontField = new CT_FontCollection();
            //this.majorFontField = new CT_FontCollection();
        }

        [XmlElement(Order = 0)]
        public CT_FontCollection majorFont
        {
            get
            {
                return this.majorFontField;
            }
            set
            {
                this.majorFontField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_FontCollection minorFont
        {
            get
            {
                return this.minorFontField;
            }
            set
            {
                this.minorFontField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_OfficeArtExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }

        [XmlAttribute]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_FillStyleList
    {
        
        public CT_FillStyleList()
        {
        }
        public static CT_FillStyleList Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_FillStyleList ctObj = new CT_FillStyleList();
            ctObj.blipFill = new List<CT_BlipFillProperties>();
            ctObj.gradFill = new List<CT_GradientFillProperties>();
            ctObj.grpFill = new List<CT_GroupFillProperties>();
            ctObj.noFill = new List<CT_NoFillProperties>();
            ctObj.pattFill = new List<CT_PatternFillProperties>();
            ctObj.solidFill = new List<CT_SolidColorFillProperties>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "solidFill")
                    ctObj.solidFill.Add(CT_SolidColorFillProperties.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "blipFill")
                    ctObj.blipFill.Add(CT_BlipFillProperties.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "gradFill")
                    ctObj.gradFill.Add(CT_GradientFillProperties.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "grpFill")
                    ctObj.grpFill.Add(new CT_GroupFillProperties());
                else if (childNode.LocalName == "noFill")
                    ctObj.noFill.Add(new CT_NoFillProperties());
                else if (childNode.LocalName == "pattFill")
                    ctObj.pattFill.Add(CT_PatternFillProperties.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            sw.Write(">");
            if (this.blipFill != null)
            {
                foreach (CT_BlipFillProperties x in this.blipFill)
                {
                    x.Write(sw, "a:blipFill");
                }
            }
            if (this.solidFill != null)
            {
                foreach (CT_SolidColorFillProperties x in this.solidFill)
                {
                    x.Write(sw, "solidFill");
                }
            }
            if (this.gradFill != null)
            {
                foreach (CT_GradientFillProperties x in this.gradFill)
                {
                    x.Write(sw, "gradFill");
                }
            }
            if (this.grpFill != null)
            {
                foreach (CT_GroupFillProperties x in this.grpFill)
                {
                    sw.Write("<a:grpFill/>");
                }
            }
            if (this.noFill != null)
            {
                foreach (CT_NoFillProperties x in this.noFill)
                {
                    sw.Write("<a:noFill/>");
                }
            }
            if (this.pattFill != null)
            {
                foreach (CT_PatternFillProperties x in this.pattFill)
                {
                    x.Write(sw, "pattFill");
                }
            }
            sw.Write(string.Format("</a:{0}>", nodeName));
        }




        List<CT_BlipFillProperties> blipFillField;
        public List<CT_BlipFillProperties> blipFill
        {
            get
            {
                return blipFillField;
            }
            set
            {
                blipFillField = value;
            }
        }
        List<CT_GradientFillProperties> gradFillField;
        public List<CT_GradientFillProperties> gradFill
        {
            get
            {
                return gradFillField;
            }
            set
            {
                gradFillField = value;
            }
        }
        List<CT_GroupFillProperties> grpFillField;
        public List<CT_GroupFillProperties> grpFill
        {
            get
            {
                return grpFillField;
            }
            set
            {
                grpFillField = value;
            }
        }
        List<CT_NoFillProperties> noFillField;
        public List<CT_NoFillProperties> noFill
        {
            get
            {
                return noFillField;
            }
            set
            {
                noFillField = value;
            }
        }
        List<CT_PatternFillProperties> pattFillField;
        public List<CT_PatternFillProperties> pattFill
        {
            get
            {
                return pattFillField;
            }
            set
            {
                pattFillField = value;
            }
        }
        List<CT_SolidColorFillProperties> solidFillField;
        public List<CT_SolidColorFillProperties> solidFill
        {
            get
            {
                return solidFillField;
            }
            set
            {
                solidFillField = value;
            }
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_LineStyleList
    {

        private List<CT_LineProperties> lnField;

        public CT_LineStyleList()
        {
            this.lnField = new List<CT_LineProperties>();
        }
        public static CT_LineStyleList Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_LineStyleList ctObj = new CT_LineStyleList();
            ctObj.ln = new List<CT_LineProperties>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                ctObj.ln.Add(CT_LineProperties.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }

        [XmlElement("ln", Order = 0)]
        public List<CT_LineProperties> ln
        {
            get
            {
                return this.lnField;
            }
            set
            {
                this.lnField = value;
            }
        }
        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}>", nodeName));
            if (this.ln.Count>0)
            {
                foreach (CT_LineProperties x in this.ln)
                {
                    x.Write(sw, "ln");
                }
            }
            sw.Write(string.Format("</a:{0}>", nodeName));
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_EffectStyleList
    {

        private List<CT_EffectStyleItem> effectStyleField;

        public CT_EffectStyleList()
        {
            this.effectStyleField = new List<CT_EffectStyleItem>();
        }

        [XmlElement("effectStyle", Order = 0)]
        public List<CT_EffectStyleItem> effectStyle
        {
            get
            {
                return this.effectStyleField;
            }
            set
            {
                this.effectStyleField = value;
            }
        }

        public static CT_EffectStyleList Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_EffectStyleList ctObj = new CT_EffectStyleList();
            ctObj.effectStyle = new List<CT_EffectStyleItem>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                ctObj.effectStyle.Add(CT_EffectStyleItem.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }
        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}>", nodeName));
            if (this.effectStyle.Count > 0)
            {
                foreach (CT_EffectStyleItem x in this.effectStyle)
                {
                    x.Write(sw, "effectStyle");
                }
            }
            sw.Write(string.Format("</a:{0}>", nodeName));
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_BackgroundFillStyleList
    {
        public static CT_BackgroundFillStyleList Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_BackgroundFillStyleList ctObj = new CT_BackgroundFillStyleList();
            ctObj.blipFill = new List<CT_BlipFillProperties>();
            ctObj.gradFill = new List<CT_GradientFillProperties>();
            ctObj.grpFill = new List<CT_GroupFillProperties>();
            ctObj.noFill = new List<CT_NoFillProperties>();
            ctObj.pattFill = new List<CT_PatternFillProperties>();
            ctObj.solidFill = new List<CT_SolidColorFillProperties>();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "blipFill")
                    ctObj.blipFill.Add(CT_BlipFillProperties.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "gradFill")
                    ctObj.gradFill.Add(CT_GradientFillProperties.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "grpFill")
                    ctObj.grpFill.Add(new CT_GroupFillProperties());
                else if (childNode.LocalName == "noFill")
                    ctObj.noFill.Add(new CT_NoFillProperties());
                else if (childNode.LocalName == "pattFill")
                    ctObj.pattFill.Add(CT_PatternFillProperties.Parse(childNode, namespaceManager));
                else if (childNode.LocalName == "solidFill")
                    ctObj.solidFill.Add(CT_SolidColorFillProperties.Parse(childNode, namespaceManager));
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            sw.Write(">");
            if (this.solidFill != null)
            {
                foreach (CT_SolidColorFillProperties x in this.solidFill)
                {
                    x.Write(sw, "solidFill");
                }
            }
            if (this.gradFill != null)
            {
                foreach (CT_GradientFillProperties x in this.gradFill)
                {
                    x.Write(sw, "gradFill");
                }
            }
            if (this.blipFill != null)
            {
                foreach (CT_BlipFillProperties x in this.blipFill)
                {
                    x.Write(sw, "a:blipFill");
                }
            }
            if (this.grpFill != null)
            {
                foreach (CT_GroupFillProperties x in this.grpFill)
                {
                    sw.Write("<a:grpFill/>");
                }
            }
            if (this.noFill != null)
            {
                foreach (CT_NoFillProperties x in this.noFill)
                {
                    sw.Write("<noFill/>");
                }
            }
            if (this.pattFill != null)
            {
                foreach (CT_PatternFillProperties x in this.pattFill)
                {
                    x.Write(sw, "pattFill");
                }
            }
            sw.Write(string.Format("</a:{0}>", nodeName));
        }



        public CT_BackgroundFillStyleList()
        {
            //this.itemsField = new List<object>();
        }
        List<CT_BlipFillProperties> blipFillField;
        public List<CT_BlipFillProperties> blipFill
        {
            get 
            {
                return blipFillField;
            }
            set {
                blipFillField = value;
            }
        }
        List<CT_GradientFillProperties> gradFillField;
        public List<CT_GradientFillProperties> gradFill
        {
            get
            {
                return gradFillField;
            }
            set
            {
                gradFillField = value;
            }
        }
        List<CT_GroupFillProperties> grpFillField;
        public List<CT_GroupFillProperties> grpFill
        {
            get
            {
                return grpFillField;
            }
            set
            {
                grpFillField = value;
            }
        }
        List<CT_NoFillProperties> noFillField;
        public List<CT_NoFillProperties> noFill
        {
            get
            {
                return noFillField;
            }
            set
            {
                noFillField = value;
            }
        }
        List<CT_PatternFillProperties> pattFillField;
        public List<CT_PatternFillProperties> pattFill
        {
            get
            {
                return pattFillField;
            }
            set
            {
                pattFillField = value;
            }
        }
        List<CT_SolidColorFillProperties> solidFillField;
        public List<CT_SolidColorFillProperties> solidFill
        {
            get
            {
                return solidFillField;
            }
            set
            {
                solidFillField = value;
            }
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_StyleMatrix
    {

        private CT_FillStyleList fillStyleLstField;

        private CT_LineStyleList lnStyleLstField;

        private CT_EffectStyleList effectStyleLstField;

        private CT_BackgroundFillStyleList bgFillStyleLstField;

        private string nameField;
        public static CT_StyleMatrix Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_StyleMatrix ctObj = new CT_StyleMatrix();
            ctObj.name = XmlHelper.ReadString(node.Attributes["name"]);
            
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "fillStyleLst")
                    ctObj.fillStyleLst = CT_FillStyleList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "bgFillStyleLst")
                    ctObj.bgFillStyleLst = CT_BackgroundFillStyleList.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "lnStyleLst")
                {
                    ctObj.lnStyleLst = CT_LineStyleList.Parse(childNode, namespaceManager);
                }
                else if (childNode.LocalName == "effectStyleLst")
                {
                    ctObj.effectStyleLst= CT_EffectStyleList.Parse(childNode, namespaceManager);
                }
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "name", this.name);
            sw.Write(">");
            if (this.fillStyleLst != null)
                this.fillStyleLst.Write(sw, "fillStyleLst");
            if (this.lnStyleLst != null)
            {
                this.lnStyleLst.Write(sw, "lnStyleLst");
            }
            if (this.effectStyleLst != null)
            {
                this.effectStyleLst.Write(sw, "effectStyleLst");
            }
            if (this.bgFillStyleLst != null)
                this.bgFillStyleLst.Write(sw, "bgFillStyleLst");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        public CT_StyleMatrix()
        {
            this.nameField = "";
        }

        [XmlElement(Order = 0)]
        public CT_FillStyleList fillStyleLst
        {
            get
            {
                return this.fillStyleLstField;
            }
            set
            {
                this.fillStyleLstField = value;
            }
        }

        [XmlArray(Order = 1)]
        [XmlArrayItem("ln", IsNullable = false)]
        public CT_LineStyleList lnStyleLst
        {
            get
            {
                return this.lnStyleLstField;
            }
            set
            {
                this.lnStyleLstField = value;
            }
        }

        [XmlArray(Order = 2)]
        [XmlArrayItem("effectStyle", IsNullable = false)]
        public CT_EffectStyleList effectStyleLst
        {
            get
            {
                return this.effectStyleLstField;
            }
            set
            {
                this.effectStyleLstField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_BackgroundFillStyleList bgFillStyleLst
        {
            get
            {
                return this.bgFillStyleLstField;
            }
            set
            {
                this.bgFillStyleLstField = value;
            }
        }

        [XmlAttribute]
        [DefaultValue("")]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }


    [Serializable]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", IsNullable = true)]
    public class CT_BaseStyles
    {

        private CT_ColorScheme clrSchemeField;

        private CT_FontScheme fontSchemeField;

        private CT_StyleMatrix fmtSchemeField;

        private CT_OfficeArtExtensionList extLstField;
        public static CT_BaseStyles Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_BaseStyles ctObj = new CT_BaseStyles();
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "clrScheme")
                    ctObj.clrScheme = CT_ColorScheme.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "fontScheme")
                    ctObj.fontScheme = CT_FontScheme.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "fmtScheme")
                    ctObj.fmtScheme = CT_StyleMatrix.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extLst")
                    ctObj.extLst = CT_OfficeArtExtensionList.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<a:{0}", nodeName));
            sw.Write(">");
            if (this.clrScheme != null)
                this.clrScheme.Write(sw, "clrScheme");
            if (this.fontScheme != null)
                this.fontScheme.Write(sw, "fontScheme");
            if (this.fmtScheme != null)
                this.fmtScheme.Write(sw, "fmtScheme");
            if (this.extLst != null)
                this.extLst.Write(sw, "extLst");
            sw.Write(string.Format("</a:{0}>", nodeName));
        }

        public CT_BaseStyles()
        {
            //this.extLstField = new CT_OfficeArtExtensionList();
            //this.fmtSchemeField = new CT_StyleMatrix();
            //this.fontSchemeField = new CT_FontScheme();
            //this.clrSchemeField = new CT_ColorScheme();
        }

        [XmlElement(Order = 0)]
        public CT_ColorScheme clrScheme
        {
            get
            {
                return this.clrSchemeField;
            }
            set
            {
                this.clrSchemeField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_FontScheme fontScheme
        {
            get
            {
                return this.fontSchemeField;
            }
            set
            {
                this.fontSchemeField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_StyleMatrix fmtScheme
        {
            get
            {
                return this.fmtSchemeField;
            }
            set
            {
                this.fmtSchemeField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_OfficeArtExtensionList extLst
        {
            get
            {
                return this.extLstField;
            }
            set
            {
                this.extLstField = value;
            }
        }
    }


    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    public enum ST_FontCollectionIndex
    {


        major,


        minor,


        none,
    }
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main")]
    public enum ST_ColorSchemeIndex
    {


        dk1,


        lt1,


        dk2,


        lt2,


        accent1,


        accent2,


        accent3,


        accent4,


        accent5,


        accent6,


        hlink,


        folHlink,
    }
}
