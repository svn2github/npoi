// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>NPOI.OpenXmlFormats</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------

using NPOI.OpenXml4Net.Util;
using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Serialization;

namespace NPOI.OpenXmlFormats.Dml
{
   
    [Serializable]
    
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot("inline", Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = false)]
    public class CT_Inline
    {

        private CT_PositiveSize2D extentField;

        private CT_EffectExtent effectExtentField;

        private CT_NonVisualDrawingProps docPrField;

        private CT_NonVisualGraphicFrameProperties cNvGraphicFramePrField;

        private CT_GraphicalObject graphicField;

        private uint distTField;

        private bool distTFieldSpecified;

        private uint distBField;

        private bool distBFieldSpecified;

        private uint distLField;

        private bool distLFieldSpecified;

        private uint distRField;

        private bool distRFieldSpecified;

        public static CT_Inline Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Inline ctObj = new CT_Inline();
            ctObj.distT = XmlHelper.ReadUInt(node.Attributes["wp:distT"]);
            ctObj.distB = XmlHelper.ReadUInt(node.Attributes["wp:distB"]);
            ctObj.distL = XmlHelper.ReadUInt(node.Attributes["wp:distL"]);
            ctObj.distR = XmlHelper.ReadUInt(node.Attributes["wp:distR"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "extent")
                    ctObj.extent = CT_PositiveSize2D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "effectExtent")
                    ctObj.effectExtent = CT_EffectExtent.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "docPr")
                    ctObj.docPr = CT_NonVisualDrawingProps.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "cNvGraphicFramePr")
                    ctObj.cNvGraphicFramePr = CT_NonVisualGraphicFrameProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "graphic")
                    ctObj.graphic = CT_GraphicalObject.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<wp:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "wp:distT", this.distT);
            XmlHelper.WriteAttribute(sw, "wp:distB", this.distB);
            XmlHelper.WriteAttribute(sw, "wp:distL", this.distL);
            XmlHelper.WriteAttribute(sw, "wp:distR", this.distR);
            sw.Write(">");
            if (this.extent != null)
                this.extent.Write(sw, "extent");
            if (this.effectExtent != null)
                this.effectExtent.Write(sw, "effectExtent");
            if (this.docPr != null)
                this.docPr.Write(sw, "docPr");
            if (this.cNvGraphicFramePr != null)
                this.cNvGraphicFramePr.Write(sw, "cNvGraphicFramePr");
            if (this.graphic != null)
                this.graphic.Write(sw, "graphic");
            sw.Write(string.Format("</wp:{0}>", nodeName));
        }

        /// <summary>
        /// CT_Inline class constructor
        /// </summary>
        public CT_Inline()
        {
            //this.graphicField = new CT_GraphicalObject();
            //this.cNvGraphicFramePrField = new CT_NonVisualGraphicFrameProperties();
            //this.docPrField = new CT_NonVisualDrawingProps();
            //this.effectExtentField = new CT_EffectExtent();
            //this.extentField = new CT_PositiveSize2D();
        }

        [XmlElement(Order = 0)]
        public CT_PositiveSize2D extent
        {
            get
            {
                return this.extentField;
            }
            set
            {
                this.extentField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_EffectExtent effectExtent
        {
            get
            {
                return this.effectExtentField;
            }
            set
            {
                this.effectExtentField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_NonVisualDrawingProps docPr
        {
            get
            {
                return this.docPrField;
            }
            set
            {
                this.docPrField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_NonVisualGraphicFrameProperties cNvGraphicFramePr
        {
            get
            {
                return this.cNvGraphicFramePrField;
            }
            set
            {
                this.cNvGraphicFramePrField = value;
            }
        }

        [XmlElement(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", Order = 4)]
        public CT_GraphicalObject graphic
        {
            get
            {
                return this.graphicField;
            }
            set
            {
                this.graphicField = value;
            }
        }

        [XmlAttribute]
        public uint distT
        {
            get
            {
                return this.distTField;
            }
            set
            {
                this.distTField = value;
            }
        }

        [XmlIgnore]
        public bool distTSpecified
        {
            get
            {
                return this.distTFieldSpecified;
            }
            set
            {
                this.distTFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distB
        {
            get
            {
                return this.distBField;
            }
            set
            {
                this.distBField = value;
            }
        }

        [XmlIgnore]
        public bool distBSpecified
        {
            get
            {
                return this.distBFieldSpecified;
            }
            set
            {
                this.distBFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distL
        {
            get
            {
                return this.distLField;
            }
            set
            {
                this.distLField = value;
            }
        }

        [XmlIgnore]
        public bool distLSpecified
        {
            get
            {
                return this.distLFieldSpecified;
            }
            set
            {
                this.distLFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distR
        {
            get
            {
                return this.distRField;
            }
            set
            {
                this.distRField = value;
            }
        }

        [XmlIgnore]
        public bool distRSpecified
        {
            get
            {
                return this.distRFieldSpecified;
            }
            set
            {
                this.distRFieldSpecified = value;
            }
        }

        public CT_PositiveSize2D AddNewExtent()
        {
            if (this.extentField == null)
                this.extentField = new CT_PositiveSize2D();
            return this.extentField;
        }

        public CT_NonVisualDrawingProps AddNewDocPr()
        {
            if (this.docPrField == null)
                this.docPrField = new CT_NonVisualDrawingProps();
            return this.docPrField;
        }
    }

    
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = true)]
    public class CT_EffectExtent
    {

        private long lField;

        private long tField;

        private long rField;

        private long bField;

        public static CT_EffectExtent Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_EffectExtent ctObj = new CT_EffectExtent();
            ctObj.l = XmlHelper.ReadLong(node.Attributes["wp:l"]);
            ctObj.t = XmlHelper.ReadLong(node.Attributes["wp:t"]);
            ctObj.r = XmlHelper.ReadLong(node.Attributes["wp:r"]);
            ctObj.b = XmlHelper.ReadLong(node.Attributes["wp:b"]);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<wp:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "wp:l", this.l);
            XmlHelper.WriteAttribute(sw, "wp:t", this.t);
            XmlHelper.WriteAttribute(sw, "wp:r", this.r);
            XmlHelper.WriteAttribute(sw, "wp:b", this.b);
            sw.Write(">");
            sw.Write(string.Format("</wp:{0}>", nodeName));
        }

        [XmlAttribute]
        public long l
        {
            get
            {
                return this.lField;
            }
            set
            {
                this.lField = value;
            }
        }

        [XmlAttribute]
        public long t
        {
            get
            {
                return this.tField;
            }
            set
            {
                this.tField = value;
            }
        }

        [XmlAttribute]
        public long r
        {
            get
            {
                return this.rField;
            }
            set
            {
                this.rField = value;
            }
        }

        [XmlAttribute]
        public long b
        {
            get
            {
                return this.bField;
            }
            set
            {
                this.bField = value;
            }
        }
    }

    
    [Serializable]
    
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot("anchor", Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = false)]
    public class CT_Anchor
    {

        private CT_Point2D simplePosField;

        private CT_PosH positionHField;

        private CT_PosV positionVField;

        private CT_PositiveSize2D extentField;

        private CT_EffectExtent effectExtentField;

        private object itemField;

        private CT_NonVisualDrawingProps docPrField;

        private CT_NonVisualGraphicFrameProperties cNvGraphicFramePrField;

        private CT_GraphicalObject graphicField;

        private uint distTField;

        private bool distTFieldSpecified;

        private uint distBField;

        private bool distBFieldSpecified;

        private uint distLField;

        private bool distLFieldSpecified;

        private uint distRField;

        private bool distRFieldSpecified;

        private bool simplePos1Field;

        private bool simplePos1FieldSpecified;

        private uint relativeHeightField;

        private bool behindDocField;

        private bool lockedField;

        private bool layoutInCellField;

        private bool hiddenField;

        private bool hiddenFieldSpecified;

        private bool allowOverlapField;

        /// <summary>
        /// CT_Anchor class constructor
        /// </summary>
        public CT_Anchor()
        {
            //this.effectExtentField = new CT_EffectExtent();
            //this.positionVField = new CT_PosV();
            //this.positionHField = new CT_PosH();
            //this.simplePosField = new CT_Point2D();
        }

        [XmlElement(Order = 0)]
        public CT_Point2D simplePos
        {
            get
            {
                return this.simplePosField;
            }
            set
            {
                this.simplePosField = value;
            }
        }

        [XmlElement(Order = 1)]
        public CT_PosH positionH
        {
            get
            {
                return this.positionHField;
            }
            set
            {
                this.positionHField = value;
            }
        }

        [XmlElement(Order = 2)]
        public CT_PosV positionV
        {
            get
            {
                return this.positionVField;
            }
            set
            {
                this.positionVField = value;
            }
        }

        [XmlElement(Order = 3)]
        public CT_PositiveSize2D extent
        {
            get
            {
                return this.extentField;
            }
            set
            {
                this.extentField = value;
            }
        }

        [XmlElement(Order = 4)]
        public CT_EffectExtent effectExtent
        {
            get
            {
                return this.effectExtentField;
            }
            set
            {
                this.effectExtentField = value;
            }
        }

        CT_WrapNone wrapNoneField;
        public CT_WrapNone wrapNone
        {
            get { return this.wrapNoneField; }
            set { this.wrapNoneField = value; }
        }

        CT_WrapTight wrapTightField;
        public CT_WrapTight wrapTight
        {
            get { return this.wrapTightField; }
            set { this.wrapTightField = value; }
        }

        CT_WrapTopBottom wrapTopAndBottomField;
        public CT_WrapTopBottom wrapTopAndBottom
        {
            get { return this.wrapTopAndBottomField; }
            set { this.wrapTopAndBottomField = value; }
        }

        CT_WrapSquare wrapSquareField;
        public CT_WrapSquare wrapSquare
        {
            get { return this.wrapSquareField; }
            set { this.wrapSquareField = value; }
        }

        CT_WrapThrough wrapThroughField;
        public CT_WrapThrough wrapThrough
        {
            get { return this.wrapThroughField; }
            set { this.wrapThroughField = value; }
        }



        [XmlElement(Order = 6)]
        public CT_NonVisualDrawingProps docPr
        {
            get
            {
                return this.docPrField;
            }
            set
            {
                this.docPrField = value;
            }
        }

        [XmlElement(Order = 7)]
        public CT_NonVisualGraphicFrameProperties cNvGraphicFramePr
        {
            get
            {
                return this.cNvGraphicFramePrField;
            }
            set
            {
                this.cNvGraphicFramePrField = value;
            }
        }

        [XmlElement(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/main", Order = 8)]
        public CT_GraphicalObject graphic
        {
            get
            {
                return this.graphicField;
            }
            set
            {
                this.graphicField = value;
            }
        }

        [XmlAttribute]
        public uint distT
        {
            get
            {
                return this.distTField;
            }
            set
            {
                this.distTField = value;
            }
        }

        [XmlIgnore]
        public bool distTSpecified
        {
            get
            {
                return this.distTFieldSpecified;
            }
            set
            {
                this.distTFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distB
        {
            get
            {
                return this.distBField;
            }
            set
            {
                this.distBField = value;
            }
        }

        [XmlIgnore]
        public bool distBSpecified
        {
            get
            {
                return this.distBFieldSpecified;
            }
            set
            {
                this.distBFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distL
        {
            get
            {
                return this.distLField;
            }
            set
            {
                this.distLField = value;
            }
        }

        [XmlIgnore]
        public bool distLSpecified
        {
            get
            {
                return this.distLFieldSpecified;
            }
            set
            {
                this.distLFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distR
        {
            get
            {
                return this.distRField;
            }
            set
            {
                this.distRField = value;
            }
        }

        [XmlIgnore]
        public bool distRSpecified
        {
            get
            {
                return this.distRFieldSpecified;
            }
            set
            {
                this.distRFieldSpecified = value;
            }
        }

        [XmlAttribute("simplePos")]
        public bool simplePos1
        {
            get
            {
                return this.simplePos1Field;
            }
            set
            {
                this.simplePos1Field = value;
            }
        }

        [XmlIgnore]
        public bool simplePos1Specified
        {
            get
            {
                return this.simplePos1FieldSpecified;
            }
            set
            {
                this.simplePos1FieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint relativeHeight
        {
            get
            {
                return this.relativeHeightField;
            }
            set
            {
                this.relativeHeightField = value;
            }
        }

        [XmlAttribute]
        public bool behindDoc
        {
            get
            {
                return this.behindDocField;
            }
            set
            {
                this.behindDocField = value;
            }
        }

        [XmlAttribute]
        public bool locked
        {
            get
            {
                return this.lockedField;
            }
            set
            {
                this.lockedField = value;
            }
        }

        [XmlAttribute]
        public bool layoutInCell
        {
            get
            {
                return this.layoutInCellField;
            }
            set
            {
                this.layoutInCellField = value;
            }
        }

        [XmlAttribute]
        public bool hidden
        {
            get
            {
                return this.hiddenField;
            }
            set
            {
                this.hiddenField = value;
            }
        }

        [XmlIgnore]
        public bool hiddenSpecified
        {
            get
            {
                return this.hiddenFieldSpecified;
            }
            set
            {
                this.hiddenFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public bool allowOverlap
        {
            get
            {
                return this.allowOverlapField;
            }
            set
            {
                this.allowOverlapField = value;
            }
        }
        public static CT_Anchor Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_Anchor ctObj = new CT_Anchor();
            ctObj.distT = XmlHelper.ReadUInt(node.Attributes["wp:distT"]);
            ctObj.distB = XmlHelper.ReadUInt(node.Attributes["wp:distB"]);
            ctObj.distL = XmlHelper.ReadUInt(node.Attributes["wp:distL"]);
            ctObj.distR = XmlHelper.ReadUInt(node.Attributes["wp:distR"]);
            ctObj.simplePos1 = XmlHelper.ReadBool(node.Attributes["wp:simplePos1"]);
            ctObj.relativeHeight = XmlHelper.ReadUInt(node.Attributes["wp:relativeHeight"]);
            ctObj.behindDoc = XmlHelper.ReadBool(node.Attributes["wp:behindDoc"]);
            ctObj.locked = XmlHelper.ReadBool(node.Attributes["wp:locked"]);
            ctObj.layoutInCell = XmlHelper.ReadBool(node.Attributes["wp:layoutInCell"]);
            ctObj.hidden = XmlHelper.ReadBool(node.Attributes["wp:hidden"]);
            ctObj.allowOverlap = XmlHelper.ReadBool(node.Attributes["wp:allowOverlap"]);
            foreach (XmlNode childNode in node.ChildNodes)
            {
                if (childNode.LocalName == "simplePos")
                    ctObj.simplePos = CT_Point2D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "positionH")
                    ctObj.positionH = CT_PosH.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "positionV")
                    ctObj.positionV = CT_PosV.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "extent")
                    ctObj.extent = CT_PositiveSize2D.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "effectExtent")
                    ctObj.effectExtent = CT_EffectExtent.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "docPr")
                    ctObj.docPr = CT_NonVisualDrawingProps.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "cNvGraphicFramePr")
                    ctObj.cNvGraphicFramePr = CT_NonVisualGraphicFrameProperties.Parse(childNode, namespaceManager);
                else if (childNode.LocalName == "graphic")
                    ctObj.graphic = CT_GraphicalObject.Parse(childNode, namespaceManager);
            }
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<wp:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "wp:distT", this.distT);
            XmlHelper.WriteAttribute(sw, "wp:distB", this.distB);
            XmlHelper.WriteAttribute(sw, "wp:distL", this.distL);
            XmlHelper.WriteAttribute(sw, "wp:distR", this.distR);
            XmlHelper.WriteAttribute(sw, "wp:simplePos1", this.simplePos1);
            XmlHelper.WriteAttribute(sw, "wp:relativeHeight", this.relativeHeight);
            XmlHelper.WriteAttribute(sw, "wp:behindDoc", this.behindDoc);
            XmlHelper.WriteAttribute(sw, "wp:locked", this.locked);
            XmlHelper.WriteAttribute(sw, "wp:layoutInCell", this.layoutInCell);
            XmlHelper.WriteAttribute(sw, "wp:hidden", this.hidden);
            XmlHelper.WriteAttribute(sw, "wp:allowOverlap", this.allowOverlap);
            sw.Write(">");
            if (this.simplePos != null)
                this.simplePos.Write(sw, "simplePos");
            if (this.positionH != null)
                this.positionH.Write(sw, "positionH");
            if (this.positionV != null)
                this.positionV.Write(sw, "positionV");
            if (this.extent != null)
                this.extent.Write(sw, "extent");
            if (this.effectExtent != null)
                this.effectExtent.Write(sw, "effectExtent");
            if (this.docPr != null)
                this.docPr.Write(sw, "docPr");
            if (this.cNvGraphicFramePr != null)
                this.cNvGraphicFramePr.Write(sw, "cNvGraphicFramePr");
            if (this.graphic != null)
                this.graphic.Write(sw, "graphic");
            sw.Write(string.Format("</wp:{0}>", nodeName));
        }

    }

    
    [Serializable]
    
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = true)]
    public class CT_PosH
    {
        public static CT_PosH Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PosH ctObj = new CT_PosH();
            ctObj.posOffset = XmlHelper.ReadInt(node.Attributes["wp:posOffset"]);
            if (node.Attributes["wp:align"] != null)
                ctObj.align = (ST_AlignH)Enum.Parse(typeof(ST_AlignH), node.Attributes["wp:align"].Value);
            if (node.Attributes["wp:relativeFrom"] != null)
                ctObj.relativeFrom = (ST_RelFromH)Enum.Parse(typeof(ST_RelFromH), node.Attributes["wp:relativeFrom"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<wp:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "wp:posOffset", this.posOffset);
            XmlHelper.WriteAttribute(sw, "wp:align", this.align.ToString());
            XmlHelper.WriteAttribute(sw, "wp:relativeFrom", this.relativeFrom.ToString());
            sw.Write(">");
            sw.Write(string.Format("</wp:{0}>", nodeName));
        }

        private ST_RelFromH relativeFromField;

        Int32 posOffsetField;
        public Int32 posOffset
        {
            get { return this.posOffsetField; }
            set { this.posOffsetField = value; }
        }

        ST_AlignH alignField;
        public ST_AlignH align
        {
            get { return this.alignField; }
            set { this.alignField = value; }
        }



        [XmlAttribute]
        public ST_RelFromH relativeFrom
        {
            get
            {
                return this.relativeFromField;
            }
            set
            {
                this.relativeFromField = value;
            }
        }
    }

    
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    public enum ST_AlignH
    {

    
        left,

    
        right,

    
        center,

    
        inside,

    
        outside,
    }

    
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    public enum ST_RelFromH
    {

    
        margin,

    
        page,

    
        column,

    
        character,

    
        leftMargin,

    
        rightMargin,

    
        insideMargin,

    
        outsideMargin,
    }

    
    [Serializable]
    
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = true)]
    public class CT_PosV
    {
        public static CT_PosV Parse(XmlNode node, XmlNamespaceManager namespaceManager)
        {
            if (node == null)
                return null;
            CT_PosV ctObj = new CT_PosV();
            ctObj.posOffset = XmlHelper.ReadInt(node.Attributes["wp:posOffset"]);
            if (node.Attributes["wp:align"] != null)
                ctObj.align = (ST_AlignV)Enum.Parse(typeof(ST_AlignV), node.Attributes["wp:align"].Value);
            if (node.Attributes["wp:relativeFrom"] != null)
                ctObj.relativeFrom = (ST_RelFromV)Enum.Parse(typeof(ST_RelFromV), node.Attributes["wp:relativeFrom"].Value);
            return ctObj;
        }



        internal void Write(StreamWriter sw, string nodeName)
        {
            sw.Write(string.Format("<wp:{0}", nodeName));
            XmlHelper.WriteAttribute(sw, "wp:posOffset", this.posOffset);
            XmlHelper.WriteAttribute(sw, "wp:align", this.align.ToString());
            XmlHelper.WriteAttribute(sw, "wp:relativeFrom", this.relativeFrom.ToString());
            sw.Write(">");
            sw.Write(string.Format("</wp:{0}>", nodeName));
        }

        private ST_RelFromV relativeFromField;

        Int32 posOffsetField;
        public Int32 posOffset
        {
            get { return this.posOffsetField; }
            set { this.posOffsetField = value; }
        }

        ST_AlignV alignField;
        public ST_AlignV align
        {
            get { return this.alignField; }
            set { this.alignField = value; }
        }



        [XmlAttribute]
        public ST_RelFromV relativeFrom
        {
            get
            {
                return this.relativeFromField;
            }
            set
            {
                this.relativeFromField = value;
            }
        }
    }

    
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    public enum ST_AlignV
    {

    
        top,

    
        bottom,

    
        center,

    
        inside,

    
        outside,
    }

    
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    public enum ST_RelFromV
    {

    
        margin,

    
        page,

    
        paragraph,

    
        line,

    
        topMargin,

    
        bottomMargin,

    
        insideMargin,

    
        outsideMargin,
    }

    
    [Serializable]
    
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = true)]
    public partial class CT_WrapNone
    {
    }

    
    [Serializable]
    
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = true)]
    public partial class CT_WrapSquare
    {

        private CT_EffectExtent effectExtentField;

        private ST_WrapText wrapTextField;

        private uint distTField;

        private bool distTFieldSpecified;

        private uint distBField;

        private bool distBFieldSpecified;

        private uint distLField;

        private bool distLFieldSpecified;

        private uint distRField;

        private bool distRFieldSpecified;

        /// <summary>
        /// CT_WrapSquare class constructor
        /// </summary>
        public CT_WrapSquare()
        {
            this.effectExtentField = new CT_EffectExtent();
        }

        [XmlElement(Order = 0)]
        public CT_EffectExtent effectExtent
        {
            get
            {
                return this.effectExtentField;
            }
            set
            {
                this.effectExtentField = value;
            }
        }

        [XmlAttribute]
        public ST_WrapText wrapText
        {
            get
            {
                return this.wrapTextField;
            }
            set
            {
                this.wrapTextField = value;
            }
        }

        [XmlAttribute]
        public uint distT
        {
            get
            {
                return this.distTField;
            }
            set
            {
                this.distTField = value;
            }
        }

        [XmlIgnore]
        public bool distTSpecified
        {
            get
            {
                return this.distTFieldSpecified;
            }
            set
            {
                this.distTFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distB
        {
            get
            {
                return this.distBField;
            }
            set
            {
                this.distBField = value;
            }
        }

        [XmlIgnore]
        public bool distBSpecified
        {
            get
            {
                return this.distBFieldSpecified;
            }
            set
            {
                this.distBFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distL
        {
            get
            {
                return this.distLField;
            }
            set
            {
                this.distLField = value;
            }
        }

        [XmlIgnore]
        public bool distLSpecified
        {
            get
            {
                return this.distLFieldSpecified;
            }
            set
            {
                this.distLFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distR
        {
            get
            {
                return this.distRField;
            }
            set
            {
                this.distRField = value;
            }
        }

        [XmlIgnore]
        public bool distRSpecified
        {
            get
            {
                return this.distRFieldSpecified;
            }
            set
            {
                this.distRFieldSpecified = value;
            }
        }
    }

    
    [Serializable]
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    public enum ST_WrapText
    {

    
        bothSides,

    
        left,

    
        right,

    
        largest,
    }

    
    [Serializable]
    
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = true)]
    public partial class CT_WrapThrough
    {

        private CT_WrapPath wrapPolygonField;

        private ST_WrapText wrapTextField;

        private uint distLField;

        private bool distLFieldSpecified;

        private uint distRField;

        private bool distRFieldSpecified;

        /// <summary>
        /// CT_WrapThrough class constructor
        /// </summary>
        public CT_WrapThrough()
        {
            this.wrapPolygonField = new CT_WrapPath();
        }

        [XmlElement(Order = 0)]
        public CT_WrapPath wrapPolygon
        {
            get
            {
                return this.wrapPolygonField;
            }
            set
            {
                this.wrapPolygonField = value;
            }
        }

        [XmlAttribute]
        public ST_WrapText wrapText
        {
            get
            {
                return this.wrapTextField;
            }
            set
            {
                this.wrapTextField = value;
            }
        }

        [XmlAttribute]
        public uint distL
        {
            get
            {
                return this.distLField;
            }
            set
            {
                this.distLField = value;
            }
        }

        [XmlIgnore]
        public bool distLSpecified
        {
            get
            {
                return this.distLFieldSpecified;
            }
            set
            {
                this.distLFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distR
        {
            get
            {
                return this.distRField;
            }
            set
            {
                this.distRField = value;
            }
        }

        [XmlIgnore]
        public bool distRSpecified
        {
            get
            {
                return this.distRFieldSpecified;
            }
            set
            {
                this.distRFieldSpecified = value;
            }
        }
    }

    
    [Serializable]
    
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = true)]
    public partial class CT_WrapPath
    {

        private CT_Point2D startField;

        private List<CT_Point2D> lineToField;

        private bool editedField;

        private bool editedFieldSpecified;

        /// <summary>
        /// CT_WrapPath class constructor
        /// </summary>
        public CT_WrapPath()
        {
            this.lineToField = new List<CT_Point2D>();
        }

        [XmlElement(Order = 0)]
        public CT_Point2D start
        {
            get
            {
                return this.startField;
            }
            set
            {
                this.startField = value;
            }
        }

        [XmlElement("lineTo", Order = 1)]
        public List<CT_Point2D> lineTo
        {
            get
            {
                return this.lineToField;
            }
            set
            {
                this.lineToField = value;
            }
        }

        [XmlAttribute]
        public bool edited
        {
            get
            {
                return this.editedField;
            }
            set
            {
                this.editedField = value;
            }
        }

        [XmlIgnore]
        public bool editedSpecified
        {
            get
            {
                return this.editedFieldSpecified;
            }
            set
            {
                this.editedFieldSpecified = value;
            }
        }
    }

    
    [Serializable]
    
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = true)]
    public partial class CT_WrapTight
    {

        private CT_WrapPath wrapPolygonField;

        private ST_WrapText wrapTextField;

        private uint distLField;

        private bool distLFieldSpecified;

        private uint distRField;

        private bool distRFieldSpecified;

        /// <summary>
        /// CT_WrapTight class constructor
        /// </summary>
        public CT_WrapTight()
        {
            this.wrapPolygonField = new CT_WrapPath();
        }

        [XmlElement(Order = 0)]
        public CT_WrapPath wrapPolygon
        {
            get
            {
                return this.wrapPolygonField;
            }
            set
            {
                this.wrapPolygonField = value;
            }
        }

        [XmlAttribute]
        public ST_WrapText wrapText
        {
            get
            {
                return this.wrapTextField;
            }
            set
            {
                this.wrapTextField = value;
            }
        }

        [XmlAttribute]
        public uint distL
        {
            get
            {
                return this.distLField;
            }
            set
            {
                this.distLField = value;
            }
        }

        [XmlIgnore]
        public bool distLSpecified
        {
            get
            {
                return this.distLFieldSpecified;
            }
            set
            {
                this.distLFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distR
        {
            get
            {
                return this.distRField;
            }
            set
            {
                this.distRField = value;
            }
        }

        [XmlIgnore]
        public bool distRSpecified
        {
            get
            {
                return this.distRFieldSpecified;
            }
            set
            {
                this.distRFieldSpecified = value;
            }
        }
    }

    
    [Serializable]
    
    [XmlType(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing")]
    [XmlRoot(Namespace = "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", IsNullable = true)]
    public partial class CT_WrapTopBottom
    {

        private CT_EffectExtent effectExtentField;

        private uint distTField;

        private bool distTFieldSpecified;

        private uint distBField;

        private bool distBFieldSpecified;

        /// <summary>
        /// CT_WrapTopBottom class constructor
        /// </summary>
        public CT_WrapTopBottom()
        {
            this.effectExtentField = new CT_EffectExtent();
        }

        [XmlElement(Order = 0)]
        public CT_EffectExtent effectExtent
        {
            get
            {
                return this.effectExtentField;
            }
            set
            {
                this.effectExtentField = value;
            }
        }

        [XmlAttribute]
        public uint distT
        {
            get
            {
                return this.distTField;
            }
            set
            {
                this.distTField = value;
            }
        }

        [XmlIgnore]
        public bool distTSpecified
        {
            get
            {
                return this.distTFieldSpecified;
            }
            set
            {
                this.distTFieldSpecified = value;
            }
        }

        [XmlAttribute]
        public uint distB
        {
            get
            {
                return this.distBField;
            }
            set
            {
                this.distBField = value;
            }
        }

        [XmlIgnore]
        public bool distBSpecified
        {
            get
            {
                return this.distBFieldSpecified;
            }
            set
            {
                this.distBFieldSpecified = value;
            }
        }
    }
}
